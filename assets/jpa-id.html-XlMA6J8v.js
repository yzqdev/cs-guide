import{_ as s,c as a,a as e,o as p}from"./app-C8DxhDIZ.js";const t={};function o(l,n){return p(),a("div",null,n[0]||(n[0]=[e(`<h1 id="jpa教程生成id" tabindex="-1"><a class="header-anchor" href="#jpa教程生成id"><span>jpa教程生成id</span></a></h1><h2 id="jpa使用雪花id生成" tabindex="-1"><a class="header-anchor" href="#jpa使用雪花id生成"><span>jpa使用雪花id生成</span></a></h2><div class="language-java line-numbers-mode" data-highlighter="prismjs" data-ext="java" data-title="java"><pre><code><span class="line"><span class="token keyword">package</span> <span class="token namespace">im<span class="token punctuation">.</span>zhaojun<span class="token punctuation">.</span>zfile<span class="token punctuation">.</span>util</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>hibernate<span class="token punctuation">.</span></span><span class="token class-name">HibernateException</span></span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>hibernate<span class="token punctuation">.</span>engine<span class="token punctuation">.</span>spi<span class="token punctuation">.</span></span><span class="token class-name">SharedSessionContractImplementor</span></span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>hibernate<span class="token punctuation">.</span>id<span class="token punctuation">.</span></span><span class="token class-name">IdentifierGenerator</span></span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>slf4j<span class="token punctuation">.</span></span><span class="token class-name">Logger</span></span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>slf4j<span class="token punctuation">.</span></span><span class="token class-name">LoggerFactory</span></span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>beans<span class="token punctuation">.</span>factory<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span></span><span class="token class-name">Value</span></span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>stereotype<span class="token punctuation">.</span></span><span class="token class-name">Component</span></span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>transaction<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span></span><span class="token class-name">Transactional</span></span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>transaction<span class="token punctuation">.</span>interceptor<span class="token punctuation">.</span></span><span class="token class-name">TransactionAspectSupport</span></span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">import</span> <span class="token import"><span class="token namespace">javax<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span></span><span class="token class-name">PostConstruct</span></span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>io<span class="token punctuation">.</span></span><span class="token class-name">Serializable</span></span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token doc-comment comment">/**</span>
<span class="line"> * 雪花算法ID生成器</span>
<span class="line"> * <span class="token keyword">@author</span> mr ying</span>
<span class="line"> */</span></span>
<span class="line"><span class="token annotation punctuation">@SuppressWarnings</span><span class="token punctuation">(</span><span class="token string">&quot;all&quot;</span><span class="token punctuation">)</span></span>
<span class="line"><span class="token annotation punctuation">@Component</span></span>
<span class="line"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">SnowFlakeIdGenerator</span> <span class="token keyword">implements</span> <span class="token class-name">IdentifierGenerator</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token class-name">Logger</span> logger <span class="token operator">=</span> <span class="token class-name">LoggerFactory</span><span class="token punctuation">.</span><span class="token function">getLogger</span><span class="token punctuation">(</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token doc-comment comment">/**</span>
<span class="line">     * 起始的时间戳</span>
<span class="line">     */</span></span>
<span class="line">    <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token keyword">long</span> twepoch <span class="token operator">=</span> <span class="token number">1557825652094L</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">    <span class="token doc-comment comment">/**</span>
<span class="line">     * 每一部分占用的位数</span>
<span class="line">     */</span></span>
<span class="line">    <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token keyword">long</span> workerIdBits <span class="token operator">=</span> <span class="token number">5L</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token keyword">long</span> datacenterIdBits <span class="token operator">=</span> <span class="token number">5L</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token keyword">long</span> sequenceBits <span class="token operator">=</span> <span class="token number">12L</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">    <span class="token doc-comment comment">/**</span>
<span class="line">     * 每一部分的最大值</span>
<span class="line">     */</span></span>
<span class="line">    <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token keyword">long</span> maxWorkerId <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">1L</span> <span class="token operator">^</span> <span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">1L</span> <span class="token operator">&lt;&lt;</span> workerIdBits<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token keyword">long</span> maxDatacenterId <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">1L</span> <span class="token operator">^</span> <span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">1L</span> <span class="token operator">&lt;&lt;</span> datacenterIdBits<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token keyword">long</span> maxSequence <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">1L</span> <span class="token operator">^</span> <span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">1L</span> <span class="token operator">&lt;&lt;</span> sequenceBits<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">    <span class="token doc-comment comment">/**</span>
<span class="line">     * 每一部分向左的位移</span>
<span class="line">     */</span></span>
<span class="line">    <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token keyword">long</span> workerIdShift <span class="token operator">=</span> sequenceBits<span class="token punctuation">;</span></span>
<span class="line">    <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token keyword">long</span> datacenterIdShift <span class="token operator">=</span> sequenceBits <span class="token operator">+</span> workerIdBits<span class="token punctuation">;</span></span>
<span class="line">    <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token keyword">long</span> timestampShift <span class="token operator">=</span> sequenceBits <span class="token operator">+</span> workerIdBits <span class="token operator">+</span> datacenterIdBits<span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">    <span class="token annotation punctuation">@Value</span><span class="token punctuation">(</span><span class="token string">&quot;\${snowflake.datacenter-id:1}&quot;</span><span class="token punctuation">)</span></span>
<span class="line">    <span class="token keyword">private</span> <span class="token keyword">long</span> datacenterId<span class="token punctuation">;</span> <span class="token comment">// 数据中心ID</span></span>
<span class="line"></span>
<span class="line">    <span class="token annotation punctuation">@Value</span><span class="token punctuation">(</span><span class="token string">&quot;\${snowflake.worker-id:0}&quot;</span><span class="token punctuation">)</span></span>
<span class="line">    <span class="token keyword">private</span> <span class="token keyword">long</span> workerId<span class="token punctuation">;</span> <span class="token comment">// 机器ID</span></span>
<span class="line"></span>
<span class="line">    <span class="token keyword">private</span> <span class="token keyword">long</span> sequence <span class="token operator">=</span> <span class="token number">0L</span><span class="token punctuation">;</span> <span class="token comment">// 序列号</span></span>
<span class="line">    <span class="token keyword">private</span> <span class="token keyword">long</span> lastTimestamp <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">1L</span><span class="token punctuation">;</span> <span class="token comment">// 上一次时间戳</span></span>
<span class="line"></span>
<span class="line">    <span class="token annotation punctuation">@PostConstruct</span></span>
<span class="line">    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">init</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token class-name">String</span> msg<span class="token punctuation">;</span></span>
<span class="line">        <span class="token keyword">if</span> <span class="token punctuation">(</span>workerId <span class="token operator">&gt;</span> maxWorkerId <span class="token operator">||</span> workerId <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">            msg <span class="token operator">=</span> <span class="token class-name">String</span><span class="token punctuation">.</span><span class="token function">format</span><span class="token punctuation">(</span><span class="token string">&quot;worker Id can&#39;t be greater than %d or less than 0&quot;</span><span class="token punctuation">,</span> maxWorkerId<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">            logger<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span>msg<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token punctuation">}</span></span>
<span class="line">        <span class="token keyword">if</span> <span class="token punctuation">(</span>datacenterId <span class="token operator">&gt;</span> maxDatacenterId <span class="token operator">||</span> datacenterId <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">            msg <span class="token operator">=</span> <span class="token class-name">String</span><span class="token punctuation">.</span><span class="token function">format</span><span class="token punctuation">(</span><span class="token string">&quot;datacenter Id can&#39;t be greater than %d or less than 0&quot;</span><span class="token punctuation">,</span> maxDatacenterId<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">            logger<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span>msg<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token punctuation">}</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">    <span class="token annotation punctuation">@Transactional</span></span>
<span class="line">    <span class="token keyword">public</span> <span class="token keyword">synchronized</span> <span class="token keyword">long</span> <span class="token function">nextId</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token keyword">long</span> timestamp <span class="token operator">=</span> <span class="token function">timeGen</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token keyword">if</span> <span class="token punctuation">(</span>timestamp <span class="token operator">&lt;</span> lastTimestamp<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">            <span class="token keyword">try</span> <span class="token punctuation">{</span></span>
<span class="line">                <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">Exception</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">.</span><span class="token function">format</span><span class="token punctuation">(</span></span>
<span class="line">                        <span class="token string">&quot;Clock moved backwards.  Refusing to generate id for %d milliseconds&quot;</span><span class="token punctuation">,</span> lastTimestamp <span class="token operator">-</span> timestamp<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">            <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">                e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">                <span class="token class-name">TransactionAspectSupport</span><span class="token punctuation">.</span><span class="token function">currentTransactionStatus</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">setRollbackOnly</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">            <span class="token punctuation">}</span></span>
<span class="line">        <span class="token punctuation">}</span></span>
<span class="line">        <span class="token keyword">if</span> <span class="token punctuation">(</span>timestamp <span class="token operator">==</span> lastTimestamp<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">            sequence <span class="token operator">=</span> <span class="token punctuation">(</span>sequence <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span> maxSequence<span class="token punctuation">;</span></span>
<span class="line">            <span class="token keyword">if</span> <span class="token punctuation">(</span>sequence <span class="token operator">==</span> <span class="token number">0L</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">                timestamp <span class="token operator">=</span> <span class="token function">tilNextMillis</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">            <span class="token punctuation">}</span></span>
<span class="line">        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span></span>
<span class="line">            sequence <span class="token operator">=</span> <span class="token number">0L</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token punctuation">}</span></span>
<span class="line">        lastTimestamp <span class="token operator">=</span> timestamp<span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">        <span class="token keyword">return</span> <span class="token punctuation">(</span>timestamp <span class="token operator">-</span> twepoch<span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> timestampShift <span class="token comment">// 时间戳部分</span></span>
<span class="line">                <span class="token operator">|</span> datacenterId <span class="token operator">&lt;&lt;</span> datacenterIdShift <span class="token comment">// 数据中心部分</span></span>
<span class="line">                <span class="token operator">|</span> workerId <span class="token operator">&lt;&lt;</span> workerIdShift <span class="token comment">// 机器标识部分</span></span>
<span class="line">                <span class="token operator">|</span> sequence<span class="token punctuation">;</span> <span class="token comment">// 序列号部分</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">    <span class="token keyword">private</span> <span class="token keyword">long</span> <span class="token function">tilNextMillis</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token keyword">long</span> timestamp <span class="token operator">=</span> <span class="token function">timeGen</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token keyword">while</span> <span class="token punctuation">(</span>timestamp <span class="token operator">&lt;=</span> lastTimestamp<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">            timestamp <span class="token operator">=</span> <span class="token function">timeGen</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token punctuation">}</span></span>
<span class="line">        <span class="token keyword">return</span> timestamp<span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">    <span class="token keyword">private</span> <span class="token keyword">long</span> <span class="token function">timeGen</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token keyword">return</span> <span class="token class-name">System</span><span class="token punctuation">.</span><span class="token function">currentTimeMillis</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"> </span>
<span class="line"> <span class="token comment">//重写IdentifierGenerator的方法</span></span>
<span class="line">    <span class="token annotation punctuation">@Override</span></span>
<span class="line">    <span class="token keyword">public</span> <span class="token class-name">Serializable</span> <span class="token function">generate</span><span class="token punctuation">(</span><span class="token class-name">SharedSessionContractImplementor</span> session<span class="token punctuation">,</span> <span class="token class-name">Object</span> o<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">HibernateException</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token keyword">return</span> <span class="token class-name">String</span><span class="token punctuation">.</span><span class="token function">valueOf</span><span class="token punctuation">(</span><span class="token function">nextId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>然后在<code>application.yml</code>配置</p><div class="language-yaml" data-highlighter="prismjs" data-ext="yml" data-title="yml"><pre><code><span class="line"><span class="token comment">#雪花算法</span></span>
<span class="line"><span class="token key atrule">snowflake</span><span class="token punctuation">:</span></span>
<span class="line">  <span class="token key atrule">datacenter-id</span><span class="token punctuation">:</span> <span class="token number">1</span></span>
<span class="line">  <span class="token key atrule">worker-id</span><span class="token punctuation">:</span> <span class="token number">0</span></span>
<span class="line"></span></code></pre></div><p>使用</p><div class="language-java" data-highlighter="prismjs" data-ext="java" data-title="java"><pre><code><span class="line">    <span class="token annotation punctuation">@Id</span></span>
<span class="line">    <span class="token annotation punctuation">@GenericGenerator</span><span class="token punctuation">(</span>name <span class="token operator">=</span> <span class="token string">&quot;idGenerator&quot;</span><span class="token punctuation">,</span> strategy <span class="token operator">=</span> <span class="token string">&quot;im.zhaojun.zfile.util.SnowFlakeIdGenerator&quot;</span><span class="token punctuation">)</span></span>
<span class="line">    <span class="token annotation punctuation">@GeneratedValue</span><span class="token punctuation">(</span>generator <span class="token operator">=</span> <span class="token string">&quot;idGenerator&quot;</span><span class="token punctuation">)</span></span>
<span class="line">    <span class="token keyword">private</span> <span class="token class-name">String</span> id<span class="token punctuation">;</span></span>
<span class="line"></span></code></pre></div><h2 id="_1-spring-boot-jpa项目的构建" tabindex="-1"><a class="header-anchor" href="#_1-spring-boot-jpa项目的构建"><span>1.spring boot+jpa项目的构建</span></a></h2><p>请参考<a href="https://www.jianshu.com/p/b7c0115889ba" target="_blank" rel="noopener noreferrer">spring boot+jpa简单实现</a></p><h2 id="_2-id-generatedvalue四种id生成策略" tabindex="-1"><a class="header-anchor" href="#_2-id-generatedvalue四种id生成策略"><span>2.@Id+@GeneratedValue四种id生成策略</span></a></h2><p>使用<code>GenerationType.IDENTITY</code>(mysql要设置成自增)</p><div class="language-java line-numbers-mode" data-highlighter="prismjs" data-ext="java" data-title="java"><pre><code><span class="line"><span class="token keyword">package</span> <span class="token namespace">com<span class="token punctuation">.</span>dancer4code<span class="token punctuation">.</span>actuator<span class="token punctuation">.</span>pojo</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">import</span> <span class="token import"><span class="token namespace">lombok<span class="token punctuation">.</span></span><span class="token class-name">AllArgsConstructor</span></span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">import</span> <span class="token import"><span class="token namespace">lombok<span class="token punctuation">.</span></span><span class="token class-name">Data</span></span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">import</span> <span class="token import"><span class="token namespace">lombok<span class="token punctuation">.</span></span><span class="token class-name">NoArgsConstructor</span></span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>hibernate<span class="token punctuation">.</span>annotations<span class="token punctuation">.</span></span><span class="token class-name">GenericGenerator</span></span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">import</span> <span class="token import"><span class="token namespace">javax<span class="token punctuation">.</span>persistence<span class="token punctuation">.</span></span><span class="token operator">*</span></span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>io<span class="token punctuation">.</span></span><span class="token class-name">Serializable</span></span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"><span class="token annotation punctuation">@Data</span></span>
<span class="line"><span class="token annotation punctuation">@AllArgsConstructor</span></span>
<span class="line"><span class="token annotation punctuation">@NoArgsConstructor</span></span>
<span class="line"><span class="token annotation punctuation">@Entity</span></span>
<span class="line"><span class="token annotation punctuation">@Table</span><span class="token punctuation">(</span>name <span class="token operator">=</span> <span class="token string">&quot;student&quot;</span><span class="token punctuation">)</span></span>
<span class="line"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Student</span> <span class="token keyword">implements</span> <span class="token class-name">Serializable</span><span class="token punctuation">{</span></span>
<span class="line">   <span class="token annotation punctuation">@Id</span></span>
<span class="line">   <span class="token annotation punctuation">@GeneratedValue</span><span class="token punctuation">(</span>strategy <span class="token operator">=</span> <span class="token class-name">GenerationType</span><span class="token punctuation">.</span><span class="token constant">IDENTITY</span><span class="token punctuation">)</span></span>
<span class="line">    <span class="token keyword">private</span> <span class="token class-name">String</span> id<span class="token punctuation">;</span></span>
<span class="line">    <span class="token keyword">private</span> <span class="token class-name">String</span> name<span class="token punctuation">;</span></span>
<span class="line">    <span class="token keyword">private</span> <span class="token class-name">Integer</span> age<span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>JPA提供四种标准用法,由@GeneratedValue的源代码：</p><div class="language-kotlin" data-highlighter="prismjs" data-ext="kt" data-title="kt"><pre><code><span class="line">    <span class="token annotation builtin">@Target</span><span class="token punctuation">(</span><span class="token punctuation">{</span>METHOD<span class="token punctuation">,</span>FIELD<span class="token punctuation">}</span><span class="token punctuation">)</span>    </span>
<span class="line">    <span class="token annotation builtin">@Retention</span><span class="token punctuation">(</span>RUNTIME<span class="token punctuation">)</span>    </span>
<span class="line">    <span class="token keyword">public</span> @<span class="token keyword">interface</span> GeneratedValue<span class="token punctuation">{</span>    </span>
<span class="line">        GenerationType <span class="token function">strategy</span><span class="token punctuation">(</span><span class="token punctuation">)</span> default AUTO<span class="token punctuation">;</span>    </span>
<span class="line">        String <span class="token function">generator</span><span class="token punctuation">(</span><span class="token punctuation">)</span> default <span class="token string-literal singleline"><span class="token string">&quot;&quot;</span></span><span class="token punctuation">;</span>    </span>
<span class="line">    <span class="token punctuation">}</span>   </span>
<span class="line"></span></code></pre></div><p>其中GenerationType:</p><div class="language-swift" data-highlighter="prismjs" data-ext="swift" data-title="swift"><pre><code><span class="line"><span class="token keyword">public</span> <span class="token keyword">enum</span> <span class="token class-name">GenerationType</span><span class="token punctuation">{</span>    </span>
<span class="line">    <span class="token constant">TABLE</span><span class="token punctuation">,</span>    </span>
<span class="line">    <span class="token constant">SEQUENCE</span><span class="token punctuation">,</span>    </span>
<span class="line">    <span class="token constant">IDENTITY</span><span class="token punctuation">,</span>    </span>
<span class="line">    <span class="token constant">AUTO</span>   </span>
<span class="line"><span class="token punctuation">}</span> </span>
<span class="line"></span></code></pre></div><p>JPA提供的四种标准用法为<code>TABLE</code>,<code>SEQUENCE</code>,<code>IDENTITY</code>,<code>AUTO</code>.</p><ul><li>TABLE：使用一个特定的数据库表格来保存主键。 GenerationType.TABLE：使用一个特定的数据库表格来保存主键,持久化引擎通过关系数据库的一张特定的表格来生成主键,这种策略的好处就是不依赖于外部环境和数据库的具体实现,在不同数据库间可以很容易的进行移植,但由于其不能充分利用数据库的特性,所以不会优先使用。该策略一般与另外一个注解一起使用@TableGenerator,@TableGenerator注解指定了生成主键的表(可以在实体类上指定也可以在主键字段或属性上指定),然后JPA将会根据注解内容自动生成一张表作为序列表(或使用现有的序列表)。如果不指定序列表,则会生成一张默认的序列表,表中的列名也是自动生成,数据库上会生成一张名为sequence的表(SEQ_NAME,SEQ_COUNT)。序列表一般只包含两个字段:第一个字段是该生成策略的名称,第二个字段是该关系表的最大序号,它会随着数据的插入逐渐累加。例如：</li></ul><div class="language-kotlin" data-highlighter="prismjs" data-ext="kt" data-title="kt"><pre><code><span class="line"><span class="token annotation builtin">@Id</span>  </span>
<span class="line"><span class="token annotation builtin">@GeneratedValue</span><span class="token punctuation">(</span>strategy <span class="token operator">=</span> GenerationType<span class="token punctuation">.</span>TABLE<span class="token punctuation">,</span> generator <span class="token operator">=</span> <span class="token string-literal singleline"><span class="token string">&quot;id_sequence&quot;</span></span><span class="token punctuation">)</span>  </span>
<span class="line"><span class="token annotation builtin">@TableGenerator</span><span class="token punctuation">(</span>name <span class="token operator">=</span> <span class="token string-literal singleline"><span class="token string">&quot;id_sequence&quot;</span></span><span class="token punctuation">,</span> allocationSize <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">,</span> table <span class="token operator">=</span> <span class="token string-literal singleline"><span class="token string">&quot;sequence_table&quot;</span></span><span class="token punctuation">,</span> pkColumnName <span class="token operator">=</span> <span class="token string-literal singleline"><span class="token string">&quot;sequence_max_id&quot;</span></span><span class="token punctuation">,</span> valueColumnName <span class="token operator">=</span> <span class="token string-literal singleline"><span class="token string">&quot;sequence_count&quot;</span></span><span class="token punctuation">)</span>  </span>
<span class="line"><span class="token keyword">private</span> int id<span class="token punctuation">;</span></span>
<span class="line"></span></code></pre></div><ul><li>SEQUENCE：根据底层数据库的序列来生成主键，条件是数据库支持序列。 GenerationType.SEQUENCE：在某些数据库中,不支持主键自增长,比如Oracle,其提供了一种叫做&quot;序列(sequence)&quot;的机制生成主键。此时,GenerationType.SEQUENCE就可以作为主键生成策略。该策略的不足之处正好与TABLE相反,由于只有部分数据库(Oracle,PostgreSQL,DB2)支持序列对象,所以该策略一般不应用于其他数据库。类似的,该策略一般与另外一个注解一起使用@SequenceGenerator,@SequenceGenerator注解指定了生成主键的序列.然后JPA会根据注解内容创建一个序列(或使用一个现有的序列)。如果不指定序列,则会自动生成一个序列SEQ_GEN_SEQUENCE。例如：</li></ul><div class="language-kotlin" data-highlighter="prismjs" data-ext="kt" data-title="kt"><pre><code><span class="line"><span class="token annotation builtin">@Id</span>  </span>
<span class="line"><span class="token annotation builtin">@GeneratedValue</span><span class="token punctuation">(</span>strategy <span class="token operator">=</span> GenerationType<span class="token punctuation">.</span>SEQUENCE<span class="token punctuation">,</span> generator <span class="token operator">=</span> <span class="token string-literal singleline"><span class="token string">&quot;id_sequence&quot;</span></span><span class="token punctuation">)</span>  </span>
<span class="line"><span class="token annotation builtin">@SequenceGenerator</span><span class="token punctuation">(</span>name <span class="token operator">=</span> <span class="token string-literal singleline"><span class="token string">&quot;id_sequence&quot;</span></span><span class="token punctuation">,</span> initialValue <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">,</span> allocationSize <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">,</span> sequenceName <span class="token operator">=</span> <span class="token string-literal singleline"><span class="token string">&quot;ID_SEQUENCE&quot;</span></span><span class="token punctuation">)</span>  </span>
<span class="line"><span class="token keyword">private</span> int id<span class="token punctuation">;</span></span>
<span class="line"></span></code></pre></div><ul><li>IDENTITY：主键由数据库自动生成（主要是自动增长型） GenerationType.IDENTITY：此种主键生成策略就是通常所说的主键自增长,数据库在插入数据时,会自动给主键赋值,比如MYSQL可以在创建表时声明&quot;auto_increment&quot; 来指定主键自增长。该策略在大部分数据库中都提供了支持(指定方法或关键字可能不同),但还是有少数数据库不支持,所以可移植性略差。使用自增长主键生成策略是只需要声明strategy = GenerationType.IDENTITY即可。例如：</li></ul><div class="language-java" data-highlighter="prismjs" data-ext="java" data-title="java"><pre><code><span class="line"><span class="token annotation punctuation">@Id</span>  </span>
<span class="line"><span class="token annotation punctuation">@GeneratedValue</span><span class="token punctuation">(</span>strategy <span class="token operator">=</span> <span class="token class-name">GenerationType</span><span class="token punctuation">.</span><span class="token constant">IDENTITY</span><span class="token punctuation">)</span>  </span>
<span class="line"><span class="token keyword">private</span> <span class="token keyword">int</span> id<span class="token punctuation">;</span></span>
<span class="line"></span></code></pre></div><ul><li>AUTO：主键由程序控制。 GenerationType.AUTO：把主键生成策略交给持久化引擎(persistence engine),持久化引擎会根据数据库在以上三种主键生成策略中选择其中一种。此种主键生成策略比较常用,由于JPA默认的生成策略就是GenerationType.AUTO,所以使用此种策略时.可以显式的指定@GeneratedValue(strategy = GenerationType.AUTO)也可以直接@GeneratedValue。例如：</li></ul><div class="language-tsx" data-highlighter="prismjs" data-ext="tsx" data-title="tsx"><pre><code><span class="line"><span class="token comment">//如果不指定具体的生成规则，则默认为AUTO，即下列两种情况等价</span></span>
<span class="line"><span class="token decorator"><span class="token at operator">@</span><span class="token function">Id</span></span>  </span>
<span class="line">@<span class="token function">GeneratedValue</span><span class="token punctuation">(</span>strategy <span class="token operator">=</span> GenerationType<span class="token punctuation">.</span><span class="token constant">AUTO</span><span class="token punctuation">)</span> </span>
<span class="line"><span class="token keyword">private</span> String id<span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token decorator"><span class="token at operator">@</span><span class="token function">Id</span></span>  </span>
<span class="line"><span class="token keyword">private</span> String id<span class="token punctuation">;</span></span>
<span class="line"></span></code></pre></div><p>常用数据库支持生成规则如下：</p><table><thead><tr><th style="text-align:center;"></th><th style="text-align:center;">mysql</th><th style="text-align:center;">Oracle</th><th style="text-align:center;">PostgreSQL</th></tr></thead><tbody><tr><td style="text-align:center;">GenerationType.TABLE</td><td style="text-align:center;">√</td><td style="text-align:center;">√</td><td style="text-align:center;">√</td></tr><tr><td style="text-align:center;">GenerationType.AUTO</td><td style="text-align:center;">√</td><td style="text-align:center;">√</td><td style="text-align:center;">√</td></tr><tr><td style="text-align:center;">GenerationType.IDENTITY</td><td style="text-align:center;">√</td><td style="text-align:center;">x</td><td style="text-align:center;">√</td></tr><tr><td style="text-align:center;">GenerationType.SEQUENCE</td><td style="text-align:center;">x</td><td style="text-align:center;">√</td><td style="text-align:center;">√</td></tr></tbody></table><h2 id="_3-hibernate主键策略生成" tabindex="-1"><a class="header-anchor" href="#_3-hibernate主键策略生成"><span>3.Hibernate主键策略生成</span></a></h2><p>hibernate-5.3.7.Final版本的默认工厂中有<code>14种</code>生成策略,具体可见org.hibernate.id.factory.internal.DefaultIdentifierGeneratorFactory</p><div class="language-java line-numbers-mode" data-highlighter="prismjs" data-ext="java" data-title="java"><pre><code><span class="line"><span class="token keyword">public</span> <span class="token class-name">DefaultIdentifierGeneratorFactory</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token function">register</span><span class="token punctuation">(</span> <span class="token string">&quot;uuid2&quot;</span><span class="token punctuation">,</span> <span class="token class-name">UUIDGenerator</span><span class="token punctuation">.</span><span class="token keyword">class</span> <span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token function">register</span><span class="token punctuation">(</span> <span class="token string">&quot;guid&quot;</span><span class="token punctuation">,</span> <span class="token class-name">GUIDGenerator</span><span class="token punctuation">.</span><span class="token keyword">class</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment">// can be done with UUIDGenerator + strategy</span></span>
<span class="line">        <span class="token function">register</span><span class="token punctuation">(</span> <span class="token string">&quot;uuid&quot;</span><span class="token punctuation">,</span> <span class="token class-name">UUIDHexGenerator</span><span class="token punctuation">.</span><span class="token keyword">class</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token comment">// &quot;deprecated&quot; for new use</span></span>
<span class="line">        <span class="token function">register</span><span class="token punctuation">(</span> <span class="token string">&quot;uuid.hex&quot;</span><span class="token punctuation">,</span> <span class="token class-name">UUIDHexGenerator</span><span class="token punctuation">.</span><span class="token keyword">class</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token comment">// uuid.hex is deprecated</span></span>
<span class="line">        <span class="token function">register</span><span class="token punctuation">(</span> <span class="token string">&quot;assigned&quot;</span><span class="token punctuation">,</span> <span class="token class-name">Assigned</span><span class="token punctuation">.</span><span class="token keyword">class</span> <span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token function">register</span><span class="token punctuation">(</span> <span class="token string">&quot;identity&quot;</span><span class="token punctuation">,</span> <span class="token class-name">IdentityGenerator</span><span class="token punctuation">.</span><span class="token keyword">class</span> <span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token function">register</span><span class="token punctuation">(</span> <span class="token string">&quot;select&quot;</span><span class="token punctuation">,</span> <span class="token class-name">SelectGenerator</span><span class="token punctuation">.</span><span class="token keyword">class</span> <span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token function">register</span><span class="token punctuation">(</span> <span class="token string">&quot;sequence&quot;</span><span class="token punctuation">,</span> <span class="token class-name">SequenceStyleGenerator</span><span class="token punctuation">.</span><span class="token keyword">class</span> <span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token function">register</span><span class="token punctuation">(</span> <span class="token string">&quot;seqhilo&quot;</span><span class="token punctuation">,</span> <span class="token class-name">SequenceHiLoGenerator</span><span class="token punctuation">.</span><span class="token keyword">class</span> <span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token function">register</span><span class="token punctuation">(</span> <span class="token string">&quot;increment&quot;</span><span class="token punctuation">,</span> <span class="token class-name">IncrementGenerator</span><span class="token punctuation">.</span><span class="token keyword">class</span> <span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token function">register</span><span class="token punctuation">(</span> <span class="token string">&quot;foreign&quot;</span><span class="token punctuation">,</span> <span class="token class-name">ForeignGenerator</span><span class="token punctuation">.</span><span class="token keyword">class</span> <span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token function">register</span><span class="token punctuation">(</span> <span class="token string">&quot;sequence-identity&quot;</span><span class="token punctuation">,</span> <span class="token class-name">SequenceIdentityGenerator</span><span class="token punctuation">.</span><span class="token keyword">class</span> <span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token function">register</span><span class="token punctuation">(</span> <span class="token string">&quot;enhanced-sequence&quot;</span><span class="token punctuation">,</span> <span class="token class-name">SequenceStyleGenerator</span><span class="token punctuation">.</span><span class="token keyword">class</span> <span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token function">register</span><span class="token punctuation">(</span> <span class="token string">&quot;enhanced-table&quot;</span><span class="token punctuation">,</span> <span class="token class-name">TableGenerator</span><span class="token punctuation">.</span><span class="token keyword">class</span> <span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>对几种比较常用的类型进行说明：</p><ul><li>uuid 采用128位的uuid算法生成主键，uuid被编码为一个32位16进制数字的字符串。 当使用strategy为uuid时，使用的时hibernate自己定义的UUID生成算法，此策略已过时，其具体实现参照org.hibernate.id. UUIDHexGenerator, 生成的字符串如402880876359adeb016359ae27190000当使用strategy为uuid2时，此为此版本推荐使用的uuid生成算法，其默认采用标准的生成策略StandardRandomStrategy，实现为使用jdk自带的uuid生成方法，生成的字符串如4af17c8e-8317-43e9-aff9-12d5590a71c6</li></ul><div class="language-kotlin" data-highlighter="prismjs" data-ext="kt" data-title="kt"><pre><code><span class="line"><span class="token annotation builtin">@Id</span></span>
<span class="line"><span class="token annotation builtin">@GeneratedValue</span><span class="token punctuation">(</span>generator <span class="token operator">=</span> <span class="token string-literal singleline"><span class="token string">&quot;faceset_generator&quot;</span></span><span class="token punctuation">)</span></span>
<span class="line"><span class="token annotation builtin">@GenericGenerator</span><span class="token punctuation">(</span>name <span class="token operator">=</span> <span class="token string-literal singleline"><span class="token string">&quot;faceset_generator&quot;</span></span><span class="token punctuation">,</span> strategy <span class="token operator">=</span> <span class="token string-literal singleline"><span class="token string">&quot;uuid&quot;</span></span><span class="token punctuation">)</span></span>
<span class="line"></span></code></pre></div><ul><li>assigned 插入主键时，由程序来指定。相当于JPA中的AUTO。</li></ul><div class="language-kotlin" data-highlighter="prismjs" data-ext="kt" data-title="kt"><pre><code><span class="line"><span class="token annotation builtin">@Id</span></span>
<span class="line"><span class="token annotation builtin">@GeneratedValue</span><span class="token punctuation">(</span>generator <span class="token operator">=</span> <span class="token string-literal singleline"><span class="token string">&quot;faceset_generator&quot;</span></span><span class="token punctuation">)</span></span>
<span class="line"><span class="token annotation builtin">@GenericGenerator</span><span class="token punctuation">(</span>name <span class="token operator">=</span> <span class="token string-literal singleline"><span class="token string">&quot;faceset_generator&quot;</span></span><span class="token punctuation">,</span> strategy <span class="token operator">=</span> <span class="token string-literal singleline"><span class="token string">&quot;assigned&quot;</span></span><span class="token punctuation">)</span></span>
<span class="line"></span></code></pre></div><ul><li>sequence</li></ul><div class="language-kotlin" data-highlighter="prismjs" data-ext="kt" data-title="kt"><pre><code><span class="line"><span class="token annotation builtin">@Id</span></span>
<span class="line"><span class="token annotation builtin">@GeneratedValue</span><span class="token punctuation">(</span>generator <span class="token operator">=</span> <span class="token string-literal singleline"><span class="token string">&quot;faceset_generator&quot;</span></span><span class="token punctuation">)</span>  </span>
<span class="line"><span class="token annotation builtin">@GenericGenerator</span><span class="token punctuation">(</span>name <span class="token operator">=</span> <span class="token string-literal singleline"><span class="token string">&quot;faceset_generator&quot;</span></span><span class="token punctuation">,</span> strategy <span class="token operator">=</span> <span class="token string-literal singleline"><span class="token string">&quot;sequence&quot;</span></span><span class="token punctuation">,</span>    parameters <span class="token operator">=</span> <span class="token punctuation">{</span> <span class="token annotation builtin">@Parameter</span><span class="token punctuation">(</span>name <span class="token operator">=</span> <span class="token string-literal singleline"><span class="token string">&quot;sequence&quot;</span></span><span class="token punctuation">,</span> value <span class="token operator">=</span> <span class="token string-literal singleline"><span class="token string">&quot;faceset_seq&quot;</span></span><span class="token punctuation">)</span> <span class="token punctuation">}</span><span class="token punctuation">)</span> </span>
<span class="line"></span></code></pre></div><ul><li>guid 采用数据库底层的guid算法机制，对应MYSQL的uuid()函数，SQL Server的newid()函数，ORACLE的rawtohex(sys_guid())函数等</li></ul><p>来自<a href="https://www.jianshu.com/p/ee87671a492b" target="_blank" rel="noopener noreferrer">SpringDataJpa-主键生成策略</a></p><h2 id="_4-自定义主键生成策略" tabindex="-1"><a class="header-anchor" href="#_4-自定义主键生成策略"><span>4.自定义主键生成策略</span></a></h2><div class="language-dart line-numbers-mode" data-highlighter="prismjs" data-ext="dart" data-title="dart"><pre><code><span class="line">package com<span class="token punctuation">.</span>dancer4code<span class="token punctuation">.</span>actuator<span class="token punctuation">.</span>pojo<span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">import</span> <span class="token class-name"><span class="token namespace">lombok<span class="token punctuation">.</span></span>AllArgsConstructor</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">import</span> <span class="token class-name"><span class="token namespace">lombok<span class="token punctuation">.</span></span>Data</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">import</span> <span class="token class-name"><span class="token namespace">lombok<span class="token punctuation">.</span></span>NoArgsConstructor</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">import</span> <span class="token class-name"><span class="token namespace">org<span class="token punctuation">.</span>hibernate<span class="token punctuation">.</span>annotations<span class="token punctuation">.</span></span>GenericGenerator</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">import</span> javax<span class="token punctuation">.</span>persistence<span class="token punctuation">.</span><span class="token operator">*</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">import</span> <span class="token class-name"><span class="token namespace">java<span class="token punctuation">.</span>io<span class="token punctuation">.</span></span>Serializable</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">/**</span>
<span class="line"> * Created with IntelliJ IDEA.</span>
<span class="line"> * User: liangqing.zhao(zlq)</span>
<span class="line"> * Date: 2019/10/4 17:14</span>
<span class="line"> * Description:</span>
<span class="line"> */</span></span>
<span class="line"><span class="token metadata function">@Data</span></span>
<span class="line"><span class="token metadata function">@AllArgsConstructor</span></span>
<span class="line"><span class="token metadata function">@NoArgsConstructor</span></span>
<span class="line"><span class="token metadata function">@Entity</span></span>
<span class="line"><span class="token metadata function">@Table</span><span class="token punctuation">(</span>name <span class="token operator">=</span> <span class="token string-literal"><span class="token string">&quot;student&quot;</span></span><span class="token punctuation">)</span></span>
<span class="line"></span>
<span class="line">public <span class="token keyword">class</span> <span class="token class-name">Student</span> <span class="token keyword">implements</span> <span class="token class-name">Serializable</span><span class="token punctuation">{</span></span>
<span class="line">    <span class="token metadata function">@Id</span></span>
<span class="line">    <span class="token metadata function">@GenericGenerator</span><span class="token punctuation">(</span>name <span class="token operator">=</span> <span class="token string-literal"><span class="token string">&quot;my_id&quot;</span></span><span class="token punctuation">,</span> strategy <span class="token operator">=</span> <span class="token string-literal"><span class="token string">&quot;com.dancer4code.actuator.utils.MyIdGenerator&quot;</span></span> <span class="token punctuation">)</span></span>
<span class="line">    <span class="token metadata function">@GeneratedValue</span><span class="token punctuation">(</span>generator <span class="token operator">=</span> <span class="token string-literal"><span class="token string">&quot;my_id&quot;</span></span><span class="token punctuation">)</span></span>
<span class="line">    private <span class="token class-name">String</span> id<span class="token punctuation">;</span></span>
<span class="line">    private <span class="token class-name">String</span> name<span class="token punctuation">;</span></span>
<span class="line">    private <span class="token class-name">Integer</span> age<span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><em>MyIdGenerator.java</em></p><div class="language-swift line-numbers-mode" data-highlighter="prismjs" data-ext="swift" data-title="swift"><pre><code><span class="line">package com<span class="token punctuation">.</span>dancer4code<span class="token punctuation">.</span>actuator<span class="token punctuation">.</span>utils<span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">import</span> org<span class="token punctuation">.</span>hibernate<span class="token punctuation">.</span><span class="token class-name">HibernateException</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">import</span> org<span class="token punctuation">.</span>hibernate<span class="token punctuation">.</span>engine<span class="token punctuation">.</span>spi<span class="token punctuation">.</span><span class="token class-name">SharedSessionContractImplementor</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">import</span> org<span class="token punctuation">.</span>hibernate<span class="token punctuation">.</span>id<span class="token punctuation">.</span><span class="token class-name">IdentifierGenerator</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">import</span> java<span class="token punctuation">.</span>io<span class="token punctuation">.</span><span class="token class-name">Serializable</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span><span class="token constant">UUID</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">/**</span>
<span class="line"> * Created with IntelliJ IDEA.</span>
<span class="line"> * User: liangqing.zhao(zlq)</span>
<span class="line"> * Date: 2019/10/4 19:01</span>
<span class="line"> * Description:</span>
<span class="line"> */</span></span>
<span class="line"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MyIdGenerator</span> implements <span class="token class-name">IdentifierGenerator</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token attribute atrule">@Override</span></span>
<span class="line">    <span class="token keyword">public</span> <span class="token class-name">Serializable</span> <span class="token function">generate</span><span class="token punctuation">(</span><span class="token class-name">SharedSessionContractImplementor</span> session<span class="token punctuation">,</span> <span class="token class-name">Object</span> object<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">HibernateException</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token keyword">return</span> <span class="token string-literal"><span class="token string">&quot;d4c-&quot;</span></span><span class="token operator">+</span><span class="token constant">UUID</span><span class="token punctuation">.</span><span class="token function">randomUUID</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><em>成功实现自己的id生成</em></p><p><img src="https:////upload-images.jianshu.io/upload_images/19382524-45ae6b26ffdb8023.png?imageMogr2/auto-orient/strip|imageView2/2/w/495/format/webp" alt="img"></p><p>result</p><p>源码见gitee中<a href="https://links.jianshu.com/go?to=https%3A%2F%2Fgitee.com%2Fdancer4code%2Fspring-boot-lab" target="_blank" rel="noopener noreferrer">spring-boot-lab</a></p><p>如果还不够用请参考雪花算法 更多其他内容请参考<a href="https://www.jianshu.com/p/9d7ebe37215e" target="_blank" rel="noopener noreferrer">分布式全局唯一ID生成策略</a></p>`,48)]))}const i=s(t,[["render",o]]),u=JSON.parse('{"path":"/java-tutor/orm-tutor/jpa-id.html","title":"jpa教程生成id","lang":"zh-CN","frontmatter":{"description":"jpa教程生成id jpa使用雪花id生成 然后在application.yml配置 使用 1.spring boot+jpa项目的构建 请参考spring boot+jpa简单实现 2.@Id+@GeneratedValue四种id生成策略 使用GenerationType.IDENTITY(mysql要设置成自增) JPA提供四种标准用法,由@Ge...","head":[["meta",{"property":"og:url","content":"https://yzqdev.github.io/cs-guide/cs-guide/java-tutor/orm-tutor/jpa-id.html"}],["meta",{"property":"og:site_name","content":"cs-guide"}],["meta",{"property":"og:title","content":"jpa教程生成id"}],["meta",{"property":"og:description","content":"jpa教程生成id jpa使用雪花id生成 然后在application.yml配置 使用 1.spring boot+jpa项目的构建 请参考spring boot+jpa简单实现 2.@Id+@GeneratedValue四种id生成策略 使用GenerationType.IDENTITY(mysql要设置成自增) JPA提供四种标准用法,由@Ge..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:image","content":"https:////upload-images.jianshu.io/upload_images/19382524-45ae6b26ffdb8023.png?imageMogr2/auto-orient/strip|imageView2/2/w/495/format/webp"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2022-05-16T16:26:27.000Z"}],["meta",{"property":"article:modified_time","content":"2022-05-16T16:26:27.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"jpa教程生成id\\",\\"image\\":[\\"https:////upload-images.jianshu.io/upload_images/19382524-45ae6b26ffdb8023.png?imageMogr2/auto-orient/strip|imageView2/2/w/495/format/webp\\"],\\"dateModified\\":\\"2022-05-16T16:26:27.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"yzqdev\\",\\"url\\":\\"http://www.yzqdev.top\\"}]}"]]},"headers":[{"level":2,"title":"jpa使用雪花id生成","slug":"jpa使用雪花id生成","link":"#jpa使用雪花id生成","children":[]},{"level":2,"title":"1.spring boot+jpa项目的构建","slug":"_1-spring-boot-jpa项目的构建","link":"#_1-spring-boot-jpa项目的构建","children":[]},{"level":2,"title":"2.@Id+@GeneratedValue四种id生成策略","slug":"_2-id-generatedvalue四种id生成策略","link":"#_2-id-generatedvalue四种id生成策略","children":[]},{"level":2,"title":"3.Hibernate主键策略生成","slug":"_3-hibernate主键策略生成","link":"#_3-hibernate主键策略生成","children":[]},{"level":2,"title":"4.自定义主键生成策略","slug":"_4-自定义主键生成策略","link":"#_4-自定义主键生成策略","children":[]}],"git":{"createdTime":1652718387000,"updatedTime":1652718387000,"contributors":[{"name":"yzqdev","username":"yzqdev","email":"yzqdev@outlook.com","commits":1,"url":"https://github.com/yzqdev"}]},"readingTime":{"minutes":6.57,"words":1972},"filePathRelative":"java-tutor/orm-tutor/jpa-id.md","localizedDate":"2022年5月16日","autoDesc":true}');export{i as comp,u as data};
