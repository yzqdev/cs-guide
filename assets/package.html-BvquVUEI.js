import{_ as s,c as a,a as t,o as e}from"./app-C8DxhDIZ.js";const p={};function o(i,n){return e(),a("div",null,n[0]||(n[0]=[t(`<h1 id="打包" tabindex="-1"><a class="header-anchor" href="#打包"><span>打包</span></a></h1><h2 id="gradle打包" tabindex="-1"><a class="header-anchor" href="#gradle打包"><span>gradle打包</span></a></h2><div class="language-text" data-highlighter="prismjs" data-ext="text" data-title="text"><pre><code><span class="line">./gradlew bootJar</span>
<span class="line"></span></code></pre></div><p>依赖分离打包</p><p>在build.gradle.kts中加入下面的代码,然后运行<code>./gradlew thin</code>和<code>./gradlew bootJar</code>同时打包thin包和fatjar</p><div class="language-kotlin line-numbers-mode" data-highlighter="prismjs" data-ext="kt" data-title="kt"><pre><code><span class="line">tasks<span class="token punctuation">.</span>register<span class="token operator">&lt;</span>Delete<span class="token operator">&gt;</span><span class="token punctuation">(</span><span class="token string-literal singleline"><span class="token string">&quot;clearLib&quot;</span></span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment">//清除lib  </span></span>
<span class="line">  </span>
<span class="line">  <span class="token function">delete</span><span class="token punctuation">(</span>layout<span class="token punctuation">.</span>buildDirectory<span class="token punctuation">.</span><span class="token function">dir</span><span class="token punctuation">(</span><span class="token string-literal singleline"><span class="token string">&quot;libs/lib&quot;</span></span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  </span>
<span class="line"><span class="token punctuation">}</span>  </span>
<span class="line">  </span>
<span class="line">tasks<span class="token punctuation">.</span>register<span class="token operator">&lt;</span>Copy<span class="token operator">&gt;</span><span class="token punctuation">(</span><span class="token string-literal singleline"><span class="token string">&quot;copyLib&quot;</span></span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment">//拷贝lib  </span></span>
<span class="line">  <span class="token function">from</span><span class="token punctuation">(</span>configurations<span class="token punctuation">.</span>runtimeClasspath<span class="token punctuation">)</span> <span class="token comment">//从运行时目录  </span></span>
<span class="line">  <span class="token function">into</span><span class="token punctuation">(</span>layout<span class="token punctuation">.</span>buildDirectory<span class="token punctuation">.</span><span class="token function">dir</span><span class="token punctuation">(</span><span class="token string-literal singleline"><span class="token string">&quot;libs/lib&quot;</span></span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment">//到打包目录  </span></span>
<span class="line">tasks<span class="token punctuation">.</span>register<span class="token operator">&lt;</span>BootJar<span class="token operator">&gt;</span><span class="token punctuation">(</span><span class="token string-literal singleline"><span class="token string">&quot;thin&quot;</span></span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  </span>
<span class="line">  <span class="token function">dependsOn</span><span class="token punctuation">(</span><span class="token string-literal singleline"><span class="token string">&quot;clearLib&quot;</span></span><span class="token punctuation">)</span> <span class="token comment">//依赖清除和拷贝lib任务  </span></span>
<span class="line">  <span class="token function">dependsOn</span><span class="token punctuation">(</span><span class="token string-literal singleline"><span class="token string">&quot;copyLib&quot;</span></span><span class="token punctuation">)</span>  </span>
<span class="line">  <span class="token function">exclude</span><span class="token punctuation">(</span>&quot;<span class="token operator">*</span><span class="token operator">*</span><span class="token comment">/*.jar&quot;) //打包时排除jar文件（不打包成fat jar）  </span>
<span class="line">  mainClass.set(&quot;ab.yzq.jv.mini.MiniApp&quot;)  </span>
<span class="line">  archiveBaseName=&quot;spring-min-thin&quot;  </span>
<span class="line">  targetJavaVersion = JavaVersion.VERSION_17  </span>
<span class="line">  manifest {  </span>
<span class="line">    attributes[&quot;Manifest-Version&quot;] = &quot;1.0&quot;  </span>
<span class="line">    attributes[&quot;Multi-Release&quot;] = &quot;true&quot;  </span>
<span class="line">//    attributes[&quot;Main-Class&quot;] = &quot;org.springframework.boot.loader.JarLauncher&quot; //main方法所在的class，我这个例子是用的Kotlin所以带有Kt后缀  </span>
<span class="line">    attributes[&quot;Class-Path&quot;] =  </span>
<span class="line">      configurations.runtimeClasspath.get().files.joinToString(&quot; &quot;) { &quot;lib/\${it.name}&quot; }  //构建出 lib/包名 的字符串并用空格分隔  </span>
<span class="line">  }  </span>
<span class="line">  with(tasks.named(&quot;bootJar&quot;).get() as CopySpec)  </span>
<span class="line">}</span>
<span class="line"></span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>groovy版本</p><div class="language-groovy line-numbers-mode" data-highlighter="prismjs" data-ext="groovy" data-title="groovy"><pre><code><span class="line">task <span class="token function">customJar</span><span class="token punctuation">(</span>type<span class="token punctuation">:</span> BootJar<span class="token punctuation">)</span> <span class="token punctuation">{</span>  </span>
<span class="line">  archiveBaseName <span class="token operator">=</span> <span class="token string">&#39;custom-spring-boot&#39;</span>  </span>
<span class="line">  version <span class="token operator">=</span> <span class="token string">&#39;0.1.0&#39;</span>  </span>
<span class="line">  mainClass <span class="token operator">=</span> <span class="token string">&#39;ab.yzq.springdemo.SpringDemoApp&#39;</span>  </span>
<span class="line">  targetJavaVersion <span class="token operator">=</span> JavaVersion<span class="token punctuation">.</span>VERSION_17  </span>
<span class="line">  <span class="token function">dependsOn</span><span class="token punctuation">(</span><span class="token interpolation-string"><span class="token string">&quot;clearLib&quot;</span></span><span class="token punctuation">)</span> <span class="token comment">//依赖清除和拷贝lib任务  </span></span>
<span class="line">  <span class="token function">dependsOn</span><span class="token punctuation">(</span><span class="token interpolation-string"><span class="token string">&quot;copyLib&quot;</span></span><span class="token punctuation">)</span>  </span>
<span class="line">  <span class="token function">exclude</span><span class="token punctuation">(</span><span class="token interpolation-string"><span class="token string">&quot;**/*.jar&quot;</span></span><span class="token punctuation">)</span> <span class="token comment">//打包时排除jar文件（不打包成fat jar）  </span></span>
<span class="line">  manifest <span class="token punctuation">{</span>  </span>
<span class="line">    attributes<span class="token punctuation">[</span><span class="token interpolation-string"><span class="token string">&quot;Manifest-Version&quot;</span></span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token interpolation-string"><span class="token string">&quot;1.0&quot;</span></span>  </span>
<span class="line">    attributes<span class="token punctuation">[</span><span class="token interpolation-string"><span class="token string">&quot;Multi-Release&quot;</span></span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token interpolation-string"><span class="token string">&quot;true&quot;</span></span>  </span>
<span class="line"><span class="token comment">//    attributes[&quot;Main-Class&quot;] = &quot;org.springframework.boot.loader.JarLauncher&quot; //main方法所在的class，我这个例子是用的Kotlin所以带有Kt后缀  </span></span>
<span class="line">    attributes<span class="token punctuation">[</span><span class="token string">&#39;Class-Path&#39;</span><span class="token punctuation">]</span> <span class="token operator">=</span> configurations<span class="token punctuation">.</span>runtimeClasspath<span class="token punctuation">.</span>collect <span class="token punctuation">{</span> <span class="token string">&#39;lib/&#39;</span> <span class="token operator">+</span> it<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">}</span><span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span><span class="token string">&#39; &#39;</span><span class="token punctuation">)</span>  </span>
<span class="line">  <span class="token punctuation">}</span>  </span>
<span class="line">  <span class="token function">println</span><span class="token punctuation">(</span><span class="token interpolation-string"><span class="token string">&quot;below is bootjar&quot;</span></span><span class="token punctuation">)</span>  </span>
<span class="line">  <span class="token function">print</span><span class="token punctuation">(</span>bootJar<span class="token punctuation">)</span>  </span>
<span class="line">  with bootJar    </span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,8)]))}const c=s(p,[["render",o]]),u=JSON.parse('{"path":"/java-tutor/springboot/package.html","title":"打包","lang":"zh-CN","frontmatter":{"description":"打包 gradle打包 依赖分离打包 在build.gradle.kts中加入下面的代码,然后运行./gradlew thin和./gradlew bootJar同时打包thin包和fatjar groovy版本","head":[["meta",{"property":"og:url","content":"https://yzqdev.github.io/cs-guide/cs-guide/java-tutor/springboot/package.html"}],["meta",{"property":"og:site_name","content":"cs-guide"}],["meta",{"property":"og:title","content":"打包"}],["meta",{"property":"og:description","content":"打包 gradle打包 依赖分离打包 在build.gradle.kts中加入下面的代码,然后运行./gradlew thin和./gradlew bootJar同时打包thin包和fatjar groovy版本"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-06-20T19:28:54.000Z"}],["meta",{"property":"article:modified_time","content":"2024-06-20T19:28:54.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"打包\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2024-06-20T19:28:54.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"yzqdev\\",\\"url\\":\\"http://www.yzqdev.top\\"}]}"]]},"headers":[{"level":2,"title":"gradle打包","slug":"gradle打包","link":"#gradle打包","children":[]}],"git":{"createdTime":1697339432000,"updatedTime":1718911734000,"contributors":[{"name":"yzqdev","username":"yzqdev","email":"yzqdev@outlook.com","commits":4,"url":"https://github.com/yzqdev"}]},"readingTime":{"minutes":0.97,"words":292},"filePathRelative":"java-tutor/springboot/package.md","localizedDate":"2023年10月15日","autoDesc":true}');export{c as comp,u as data};
