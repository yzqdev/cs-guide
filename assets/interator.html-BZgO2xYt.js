import{_ as s,c as a,a as p,o as t}from"./app-C8DxhDIZ.js";const e={};function l(c,n){return t(),a("div",null,n[0]||(n[0]=[p(`<h1 id="迭代" tabindex="-1"><a class="header-anchor" href="#迭代"><span>迭代</span></a></h1><p>这篇内容挺多的，而且比内容不好理解。或许新手看完后，还会一脸懵逼，不过这是正常的，如果你看完后，是迷糊的，那么建议你继续学习后面的内容，等学完，再回来看几次。</p><p>注：这也是我第二次修改内容没有改过的章节。</p><h1 id="目录" tabindex="-1"><a class="header-anchor" href="#目录"><span>目录</span></a></h1><p><img src="http://twowaterimage.oss-cn-beijing.aliyuncs.com/2019-10-07-迭代器和生成器.png" alt=""></p><h1 id="一、迭代" tabindex="-1"><a class="header-anchor" href="#一、迭代"><span>一、迭代</span></a></h1><p>什么叫做迭代？</p><p>比如在 Java 中，我们通过 List 集合的下标来遍历 List 集合中的元素，在 Python 中，给定一个 list 或 tuple，我们可以通过 for 循环来遍历这个 list 或 tuple ，这种遍历就是迭代。</p><p>可是，Python 的 <code>for</code> 循环抽象程度要高于 Java 的 <code>for</code> 循环的，为什么这么说呢？因为 Python 的 <code>for</code> 循环不仅可以用在 list 或tuple 上，还可以作用在其他可迭代对象上。</p><p>也就是说，只要是可迭代的对象，无论有没有下标，都是可以迭代的。</p><p>比如：</p><div class="language-python line-numbers-mode" data-highlighter="prismjs" data-ext="py" data-title="py"><pre><code><span class="line"></span>
<span class="line"><span class="token comment"># -*- coding: UTF-8 -*-</span></span>
<span class="line"></span>
<span class="line"><span class="token comment"># 1、for 循环迭代字符串</span></span>
<span class="line"><span class="token keyword">for</span> char <span class="token keyword">in</span> <span class="token string">&#39;liangdianshui&#39;</span> <span class="token punctuation">:</span></span>
<span class="line">    <span class="token keyword">print</span> <span class="token punctuation">(</span> char <span class="token punctuation">,</span> end <span class="token operator">=</span> <span class="token string">&#39; &#39;</span> <span class="token punctuation">)</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&#39;\\n&#39;</span><span class="token punctuation">)</span></span>
<span class="line"></span>
<span class="line"><span class="token comment"># 2、for 循环迭代 list</span></span>
<span class="line">list1 <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">]</span></span>
<span class="line"><span class="token keyword">for</span> num1 <span class="token keyword">in</span> list1 <span class="token punctuation">:</span></span>
<span class="line">    <span class="token keyword">print</span> <span class="token punctuation">(</span> num1 <span class="token punctuation">,</span> end <span class="token operator">=</span> <span class="token string">&#39; &#39;</span> <span class="token punctuation">)</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&#39;\\n&#39;</span><span class="token punctuation">)</span></span>
<span class="line"></span>
<span class="line"><span class="token comment"># 3、for 循环也可以迭代 dict （字典）</span></span>
<span class="line">dict1 <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token string">&#39;name&#39;</span><span class="token punctuation">:</span><span class="token string">&#39;两点水&#39;</span><span class="token punctuation">,</span><span class="token string">&#39;age&#39;</span><span class="token punctuation">:</span><span class="token string">&#39;23&#39;</span><span class="token punctuation">,</span><span class="token string">&#39;sex&#39;</span><span class="token punctuation">:</span><span class="token string">&#39;男&#39;</span><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">for</span> key <span class="token keyword">in</span> dict1 <span class="token punctuation">:</span>    <span class="token comment"># 迭代 dict 中的 key</span></span>
<span class="line">    <span class="token keyword">print</span> <span class="token punctuation">(</span> key <span class="token punctuation">,</span> end <span class="token operator">=</span> <span class="token string">&#39; &#39;</span> <span class="token punctuation">)</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&#39;\\n&#39;</span><span class="token punctuation">)</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">for</span> value <span class="token keyword">in</span> dict1<span class="token punctuation">.</span>values<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">:</span>   <span class="token comment"># 迭代 dict 中的 value</span></span>
<span class="line"> <span class="token keyword">print</span> <span class="token punctuation">(</span> value <span class="token punctuation">,</span> end <span class="token operator">=</span> <span class="token string">&#39; &#39;</span> <span class="token punctuation">)</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">print</span> <span class="token punctuation">(</span><span class="token string">&#39;\\n&#39;</span><span class="token punctuation">)</span></span>
<span class="line"></span>
<span class="line"><span class="token comment"># 如果 list 里面一个元素有两个变量，也是很容易迭代的</span></span>
<span class="line"><span class="token keyword">for</span> x <span class="token punctuation">,</span> y <span class="token keyword">in</span> <span class="token punctuation">[</span> <span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token string">&#39;a&#39;</span><span class="token punctuation">)</span> <span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token string">&#39;b&#39;</span><span class="token punctuation">)</span> <span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token string">&#39;c&#39;</span><span class="token punctuation">)</span> <span class="token punctuation">]</span> <span class="token punctuation">:</span></span>
<span class="line"> <span class="token keyword">print</span> <span class="token punctuation">(</span> x <span class="token punctuation">,</span> y <span class="token punctuation">)</span></span>
<span class="line"></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>输出的结果如下：</p><div class="language-txt" data-highlighter="prismjs" data-ext="txt" data-title="txt"><pre><code><span class="line">l i a n g d i a n s h u i </span>
<span class="line"></span>
<span class="line">1 2 3 4 5 </span>
<span class="line"></span>
<span class="line">name age sex </span>
<span class="line"></span>
<span class="line">两点水 23 男 </span>
<span class="line"></span>
<span class="line">1 a</span>
<span class="line">2 b</span>
<span class="line">3 c</span>
<span class="line"></span></code></pre></div><h1 id="二、python-迭代器" tabindex="-1"><a class="header-anchor" href="#二、python-迭代器"><span>二、Python 迭代器</span></a></h1><p>上面简单的介绍了一下迭代，迭代是 Python 最强大的功能之一，是访问集合元素的一种方式。现在正式进入主题：迭代器，迭代器是一个可以记住遍历的位置的对象。</p><p>迭代器对象从集合的第一个元素开始访问，直到所有的元素被访问完结束。</p><p>迭代器只能往前不会后退。</p><p>迭代器有两个基本的方法：iter() 和 next(),且字符串，列表或元组对象都可用于创建迭代器，迭代器对象可以使用常规 for 语句进行遍历，也可以使用 next() 函数来遍历。</p><p>具体的实例：</p><div class="language-python line-numbers-mode" data-highlighter="prismjs" data-ext="py" data-title="py"><pre><code><span class="line"><span class="token comment"># 1、字符创创建迭代器对象</span></span>
<span class="line">str1 <span class="token operator">=</span> <span class="token string">&#39;liangdianshui&#39;</span></span>
<span class="line">iter1 <span class="token operator">=</span> <span class="token builtin">iter</span> <span class="token punctuation">(</span> str1 <span class="token punctuation">)</span></span>
<span class="line"></span>
<span class="line"><span class="token comment"># 2、list对象创建迭代器</span></span>
<span class="line">list1 <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">]</span></span>
<span class="line">iter2 <span class="token operator">=</span> <span class="token builtin">iter</span> <span class="token punctuation">(</span> list1 <span class="token punctuation">)</span></span>
<span class="line"></span>
<span class="line"><span class="token comment"># 3、tuple(元祖) 对象创建迭代器</span></span>
<span class="line">tuple1 <span class="token operator">=</span> <span class="token punctuation">(</span> <span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span> <span class="token punctuation">)</span></span>
<span class="line">iter3 <span class="token operator">=</span> <span class="token builtin">iter</span> <span class="token punctuation">(</span> tuple1 <span class="token punctuation">)</span></span>
<span class="line"></span>
<span class="line"><span class="token comment"># for 循环遍历迭代器对象</span></span>
<span class="line"><span class="token keyword">for</span> x <span class="token keyword">in</span> iter1 <span class="token punctuation">:</span></span>
<span class="line">    <span class="token keyword">print</span> <span class="token punctuation">(</span> x <span class="token punctuation">,</span> end <span class="token operator">=</span> <span class="token string">&#39; &#39;</span> <span class="token punctuation">)</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&#39;\\n------------------------&#39;</span><span class="token punctuation">)</span></span>
<span class="line"> </span>
<span class="line"><span class="token comment"># next() 函数遍历迭代器</span></span>
<span class="line"><span class="token keyword">while</span> <span class="token boolean">True</span> <span class="token punctuation">:</span></span>
<span class="line">    <span class="token keyword">try</span> <span class="token punctuation">:</span></span>
<span class="line">        <span class="token keyword">print</span> <span class="token punctuation">(</span> <span class="token builtin">next</span> <span class="token punctuation">(</span> iter3 <span class="token punctuation">)</span> <span class="token punctuation">)</span></span>
<span class="line">    <span class="token keyword">except</span> StopIteration <span class="token punctuation">:</span></span>
<span class="line">        <span class="token keyword">break</span></span>
<span class="line"></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>最后输出的结果：</p><div class="language-txt" data-highlighter="prismjs" data-ext="txt" data-title="txt"><pre><code><span class="line">l i a n g d i a n s h u i </span>
<span class="line">------------------------</span>
<span class="line">1</span>
<span class="line">2</span>
<span class="line">3</span>
<span class="line">4</span>
<span class="line"></span></code></pre></div><h1 id="三、list-生成式-列表生成式" tabindex="-1"><a class="header-anchor" href="#三、list-生成式-列表生成式"><span>三、list 生成式（列表生成式）</span></a></h1><h2 id="_1、创建-list-的方式" tabindex="-1"><a class="header-anchor" href="#_1、创建-list-的方式"><span>1、创建 list 的方式</span></a></h2><p>之前经过我们的学习，都知道如何创建一个 list ，可是有些情况，用赋值的形式创建一个 list 太麻烦了，特别是有规律的 list ，一个一个的写，一个一个赋值，太麻烦了。比如要生成一个有 30 个元素的 list ，里面的元素为 1 - 30 。我们可以这样写：</p><div class="language-python" data-highlighter="prismjs" data-ext="py" data-title="py"><pre><code><span class="line"><span class="token comment"># -*- coding: UTF-8 -*-</span></span>
<span class="line"></span>
<span class="line">list1<span class="token operator">=</span><span class="token builtin">list</span> <span class="token punctuation">(</span> <span class="token builtin">range</span> <span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">31</span><span class="token punctuation">)</span> <span class="token punctuation">)</span></span>
<span class="line"><span class="token keyword">print</span><span class="token punctuation">(</span>list1<span class="token punctuation">)</span></span>
<span class="line"></span></code></pre></div><p>输出的结果：</p><div class="language-txt" data-highlighter="prismjs" data-ext="txt" data-title="txt"><pre><code><span class="line">[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30]</span>
<span class="line"></span></code></pre></div><p>但是，如果用到 list 生成式，可以一句代码就生成九九乘法表了。</p><p>你没听错，就是一句代码。</p><p>具体实现：</p><div class="language-python" data-highlighter="prismjs" data-ext="py" data-title="py"><pre><code><span class="line"><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&#39;\\n&#39;</span><span class="token punctuation">.</span>join<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">&#39; &#39;</span><span class="token punctuation">.</span>join <span class="token punctuation">(</span><span class="token string">&#39;%dx%d=%2d&#39;</span> <span class="token operator">%</span> <span class="token punctuation">(</span>x<span class="token punctuation">,</span>y<span class="token punctuation">,</span>x<span class="token operator">*</span>y<span class="token punctuation">)</span>  <span class="token keyword">for</span> x <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span>y<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">for</span> y <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span></span>
<span class="line"></span></code></pre></div><p>最后输出的结果：</p><div class="language-txt" data-highlighter="prismjs" data-ext="txt" data-title="txt"><pre><code><span class="line">1x1= 1</span>
<span class="line">1x2= 2 2x2= 4</span>
<span class="line">1x3= 3 2x3= 6 3x3= 9</span>
<span class="line">1x4= 4 2x4= 8 3x4=12 4x4=16</span>
<span class="line">1x5= 5 2x5=10 3x5=15 4x5=20 5x5=25</span>
<span class="line">1x6= 6 2x6=12 3x6=18 4x6=24 5x6=30 6x6=36</span>
<span class="line">1x7= 7 2x7=14 3x7=21 4x7=28 5x7=35 6x7=42 7x7=49</span>
<span class="line">1x8= 8 2x8=16 3x8=24 4x8=32 5x8=40 6x8=48 7x8=56 8x8=64</span>
<span class="line">1x9= 9 2x9=18 3x9=27 4x9=36 5x9=45 6x9=54 7x9=63 8x9=72 9x9=81</span>
<span class="line"></span></code></pre></div><p>不过，这里我们先要了解如何创建 list 生成式</p><h2 id="_2、list-生成式的创建" tabindex="-1"><a class="header-anchor" href="#_2、list-生成式的创建"><span>2、list 生成式的创建</span></a></h2><p>首先，list 生成式的语法为：</p><div class="language-python" data-highlighter="prismjs" data-ext="py" data-title="py"><pre><code><span class="line"><span class="token punctuation">[</span>expr <span class="token keyword">for</span> iter_var <span class="token keyword">in</span> iterable<span class="token punctuation">]</span> </span>
<span class="line"><span class="token punctuation">[</span>expr <span class="token keyword">for</span> iter_var <span class="token keyword">in</span> iterable <span class="token keyword">if</span> cond_expr<span class="token punctuation">]</span></span>
<span class="line"></span></code></pre></div><p>第一种语法：首先迭代 iterable 里所有内容，每一次迭代，都把 iterable 里相应内容放到iter_var 中，再在表达式中应用该 iter_var 的内容，最后用表达式的计算值生成一个列表。</p><p>第二种语法：加入了判断语句，只有满足条件的内容才把 iterable 里相应内容放到 iter_var 中，再在表达式中应用该 iter_var 的内容，最后用表达式的计算值生成一个列表。</p><p>其实不难理解的，因为是 list 生成式，因此肯定是用 [] 括起来的，然后里面的语句是把要生成的元素放在前面，后面加 for 循环语句或者 for 循环语句和判断语句。</p><p>例子：</p><div class="language-python" data-highlighter="prismjs" data-ext="py" data-title="py"><pre><code><span class="line"><span class="token comment"># -*- coding: UTF-8 -*-</span></span>
<span class="line">list1<span class="token operator">=</span><span class="token punctuation">[</span>x <span class="token operator">*</span> x <span class="token keyword">for</span> x <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">11</span><span class="token punctuation">)</span><span class="token punctuation">]</span></span>
<span class="line"><span class="token keyword">print</span><span class="token punctuation">(</span>list1<span class="token punctuation">)</span></span>
<span class="line"></span></code></pre></div><p>输出的结果：</p><div class="language-txt" data-highlighter="prismjs" data-ext="txt" data-title="txt"><pre><code><span class="line">[1, 4, 9, 16, 25, 36, 49, 64, 81, 100]</span>
<span class="line"></span></code></pre></div><p>可以看到，就是把要生成的元素 x * x 放到前面，后面跟 for 循环，就可以把 list 创建出来。那么 for 循环后面有 if 的形式呢？又该如何理解：</p><div class="language-python" data-highlighter="prismjs" data-ext="py" data-title="py"><pre><code><span class="line"><span class="token comment"># -*- coding: UTF-8 -*-</span></span>
<span class="line">list1<span class="token operator">=</span> <span class="token punctuation">[</span>x <span class="token operator">*</span> x <span class="token keyword">for</span> x <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">11</span><span class="token punctuation">)</span> <span class="token keyword">if</span> x <span class="token operator">%</span> <span class="token number">2</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">]</span></span>
<span class="line"><span class="token keyword">print</span><span class="token punctuation">(</span>list1<span class="token punctuation">)</span></span>
<span class="line"></span></code></pre></div><p>输出的结果：</p><div class="language-txt" data-highlighter="prismjs" data-ext="txt" data-title="txt"><pre><code><span class="line">[4, 16, 36, 64, 100]</span>
<span class="line"></span></code></pre></div><p>这个例子是为了求 1 到 10 中偶数的平方根，上面也说到， <code>x * x</code> 是要生成的元素，后面那部分其实就是在 for 循环中嵌套了一个 if 判断语句。</p><p>那么有了这个知识点，我们也可以猜想出，for 循环里面也嵌套 for 循环。具体示例：</p><div class="language-python" data-highlighter="prismjs" data-ext="py" data-title="py"><pre><code><span class="line"><span class="token comment"># -*- coding: UTF-8 -*-</span></span>
<span class="line">list1<span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">(</span>x<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span>y<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token keyword">for</span> x <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span> <span class="token keyword">for</span> y <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">]</span> </span>
<span class="line"><span class="token keyword">print</span><span class="token punctuation">(</span>list1<span class="token punctuation">)</span></span>
<span class="line"></span></code></pre></div><p>输出的结果：</p><div class="language-txt" data-highlighter="prismjs" data-ext="txt" data-title="txt"><pre><code><span class="line">[(1, 1), (1, 2), (1, 3), (1, 4), (1, 5), (2, 1), (2, 2), (2, 3), (2, 4), (2, 5), (3, 1), (3, 2), (3, 3), (3, 4), (3, 5)]</span>
<span class="line"></span></code></pre></div><p>其实知道了 list 生成式是怎样组合的，就不难理解这个东西了。因为 list 生成式只是把之前学习的知识点进行了组合，换成了一种更简洁的写法而已。</p><h1 id="四、生成器" tabindex="-1"><a class="header-anchor" href="#四、生成器"><span>四、生成器</span></a></h1><h2 id="_1、为什么需要生成器" tabindex="-1"><a class="header-anchor" href="#_1、为什么需要生成器"><span>1、为什么需要生成器</span></a></h2><p>通过上面的学习，可以知道列表生成式，我们可以直接创建一个列表。</p><p>但是，受到内存限制，列表容量肯定是有限的。而且，创建一个包含 1000 万个元素的列表，不仅占用很大的存储空间，如果我们仅仅需要访问前面几个元素，那后面绝大多数元素占用的空间都白白浪费了。</p><p><strong>所以，如果列表元素可以按照某种算法推算出来，那我们是否可以在循环的过程中不断推算出后续的元素呢？</strong></p><p>这样就不必创建完整的 list，从而节省大量的空间。</p><p><strong>在 Python 中，这种一边循环一边计算的机制，称为生成器：generator。</strong></p><p>在 Python 中，使用了 yield 的函数被称为生成器（generator）。</p><p>跟普通函数不同的是，生成器是一个返回迭代器的函数，只能用于迭代操作，更简单点理解生成器就是一个迭代器。</p><p>在调用生成器运行的过程中，每次遇到 yield 时函数会暂停并保存当前所有的运行信息，返回 yield 的值。并在下一次执行 next()方法时从当前位置继续运行。</p><p>那么如何创建一个生成器呢？</p><h2 id="_2、生成器的创建" tabindex="-1"><a class="header-anchor" href="#_2、生成器的创建"><span>2、生成器的创建</span></a></h2><p>最简单最简单的方法就是把一个列表生成式的 <code>[]</code> 改成 <code>()</code></p><div class="language-python" data-highlighter="prismjs" data-ext="py" data-title="py"><pre><code><span class="line"><span class="token comment"># -*- coding: UTF-8 -*-</span></span>
<span class="line">gen<span class="token operator">=</span> <span class="token punctuation">(</span>x <span class="token operator">*</span> x <span class="token keyword">for</span> x <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">)</span></span>
<span class="line"><span class="token keyword">print</span><span class="token punctuation">(</span>gen<span class="token punctuation">)</span></span>
<span class="line"></span></code></pre></div><p>输出的结果：</p><div class="language-txt" data-highlighter="prismjs" data-ext="txt" data-title="txt"><pre><code><span class="line">&lt;generator object &lt;genexpr&gt; at 0x0000000002734A40&gt;</span>
<span class="line"></span></code></pre></div><p>创建 List 和 generator 的区别仅在于最外层的 <code>[]</code> 和 <code>()</code> 。</p><p>但是生成器并不真正创建数字列表， 而是返回一个生成器，这个生成器在每次计算出一个条目后，把这个条目“产生” ( yield ) 出来。</p><p>生成器表达式使用了“惰性计算” ( lazy evaluation，也有翻译为“延迟求值”，我以为这种按需调用 call by need 的方式翻译为惰性更好一些)，只有在检索时才被赋值（ evaluated ），所以在列表比较长的情况下使用内存上更有效。</p><p>那么竟然知道了如何创建一个生成器，那么怎么查看里面的元素呢？</p><h2 id="_3、遍历生成器的元素" tabindex="-1"><a class="header-anchor" href="#_3、遍历生成器的元素"><span>3、遍历生成器的元素</span></a></h2><p>按我们的思维，遍历用 for 循环，对了，我们可以试试：</p><div class="language-python" data-highlighter="prismjs" data-ext="py" data-title="py"><pre><code><span class="line"><span class="token comment"># -*- coding: UTF-8 -*-</span></span>
<span class="line">gen<span class="token operator">=</span> <span class="token punctuation">(</span>x <span class="token operator">*</span> x <span class="token keyword">for</span> x <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">)</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">for</span> num  <span class="token keyword">in</span>  gen <span class="token punctuation">:</span></span>
<span class="line"> <span class="token keyword">print</span><span class="token punctuation">(</span>num<span class="token punctuation">)</span></span>
<span class="line"></span></code></pre></div><p>没错，直接这样就可以遍历出来了。当然，上面也提到了迭代器，那么用 next() 可以遍历吗？当然也是可以的。</p><h2 id="_4、以函数的形式实现生成器" tabindex="-1"><a class="header-anchor" href="#_4、以函数的形式实现生成器"><span>4、以函数的形式实现生成器</span></a></h2><p>上面也提到，创建生成器最简单最简单的方法就是把一个列表生成式的 <code>[]</code> 改成 <code>()</code>。为啥突然来个以函数的形式来创建呢？</p><p>其实生成器也是一种迭代器，但是你只能对其迭代一次。</p><p>这是因为它们并没有把所有的值存在内存中，而是在运行时生成值。你通过遍历来使用它们，要么用一个“for”循环，要么将它们传递给任意可以进行迭代的函数和结构。</p><p>而且实际运用中，大多数的生成器都是通过函数来实现的。那么我们该如何通过函数来创建呢？</p><p>先不急，来看下这个例子：</p><div class="language-python" data-highlighter="prismjs" data-ext="py" data-title="py"><pre><code><span class="line"><span class="token comment"># -*- coding: UTF-8 -*-</span></span>
<span class="line"><span class="token keyword">def</span> <span class="token function">my_function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span></span>
<span class="line">    <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">:</span></span>
<span class="line">        <span class="token keyword">print</span> <span class="token punctuation">(</span> i <span class="token punctuation">)</span></span>
<span class="line"></span>
<span class="line">my_function<span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line"></span></code></pre></div><p>输出的结果：</p><div class="language-txt" data-highlighter="prismjs" data-ext="txt" data-title="txt"><pre><code><span class="line">0</span>
<span class="line">1</span>
<span class="line">2</span>
<span class="line">3</span>
<span class="line">4</span>
<span class="line">5</span>
<span class="line">6</span>
<span class="line">7</span>
<span class="line">8</span>
<span class="line">9</span>
<span class="line"></span></code></pre></div><p>如果我们需要把它变成生成器，我们只需要把 <code>print ( i )</code> 改为 <code>yield i</code> 就可以了，具体看下修改后的例子：</p><div class="language-python" data-highlighter="prismjs" data-ext="py" data-title="py"><pre><code><span class="line"><span class="token comment"># -*- coding: UTF-8 -*-</span></span>
<span class="line"><span class="token keyword">def</span> <span class="token function">my_function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span></span>
<span class="line">    <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">:</span></span>
<span class="line">        <span class="token keyword">yield</span> i</span>
<span class="line"></span>
<span class="line"><span class="token keyword">print</span><span class="token punctuation">(</span>my_function<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span></span>
<span class="line"></span></code></pre></div><p>输出的结果：</p><div class="language-txt" data-highlighter="prismjs" data-ext="txt" data-title="txt"><pre><code><span class="line">&lt;generator object my_function at 0x0000000002534A40&gt;</span>
<span class="line"></span></code></pre></div><p>但是，这个例子非常不适合使用生成器，发挥不出生成器的特点，生成器的最好的应用应该是：你不想同一时间将所有计算出来的大量结果集分配到内存当中，特别是结果集里还包含循环。因为这样会耗很大的资源。</p><p>比如下面是一个计算斐波那契数列的生成器：</p><div class="language-python" data-highlighter="prismjs" data-ext="py" data-title="py"><pre><code><span class="line"><span class="token comment"># -*- coding: UTF-8 -*-</span></span>
<span class="line"><span class="token keyword">def</span> <span class="token function">fibon</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">:</span></span>
<span class="line">    a <span class="token operator">=</span> b <span class="token operator">=</span> <span class="token number">1</span></span>
<span class="line">    <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">:</span></span>
<span class="line">        <span class="token keyword">yield</span> a</span>
<span class="line">        a<span class="token punctuation">,</span> b <span class="token operator">=</span> b<span class="token punctuation">,</span> a <span class="token operator">+</span> b</span>
<span class="line"></span>
<span class="line"><span class="token comment"># 引用函数</span></span>
<span class="line"><span class="token keyword">for</span> x <span class="token keyword">in</span> fibon<span class="token punctuation">(</span><span class="token number">1000000</span><span class="token punctuation">)</span><span class="token punctuation">:</span></span>
<span class="line">    <span class="token keyword">print</span><span class="token punctuation">(</span>x <span class="token punctuation">,</span> end <span class="token operator">=</span> <span class="token string">&#39; &#39;</span><span class="token punctuation">)</span></span>
<span class="line"></span></code></pre></div><p>运行的效果：</p><p><img src="http://twowaterimage.oss-cn-beijing.aliyuncs.com/2019-10-07-计算斐波那契数列的生成器.gif" alt=""></p><p>你看，运行一个这么大的参数，也不会说有卡死的状态，因为这种方式不会使用太大的资源。这里，最难理解的就是 generator 和函数的执行流程不一样。函数是顺序执行，遇到 return 语句或者最后一行函数语句就返回。而变成 generator 的函数，在每次调用 next() 的时候执行，遇到 yield语句返回，再次执行时从上次返回的 yield 语句处继续执行。</p><p>比如这个例子：</p><div class="language-python" data-highlighter="prismjs" data-ext="py" data-title="py"><pre><code><span class="line"><span class="token comment"># -*- coding: UTF-8 -*-</span></span>
<span class="line"><span class="token keyword">def</span> <span class="token function">odd</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span></span>
<span class="line">    <span class="token keyword">print</span> <span class="token punctuation">(</span> <span class="token string">&#39;step 1&#39;</span> <span class="token punctuation">)</span></span>
<span class="line">    <span class="token keyword">yield</span> <span class="token punctuation">(</span> <span class="token number">1</span> <span class="token punctuation">)</span></span>
<span class="line">    <span class="token keyword">print</span> <span class="token punctuation">(</span> <span class="token string">&#39;step 2&#39;</span> <span class="token punctuation">)</span></span>
<span class="line">    <span class="token keyword">yield</span> <span class="token punctuation">(</span> <span class="token number">3</span> <span class="token punctuation">)</span></span>
<span class="line">    <span class="token keyword">print</span> <span class="token punctuation">(</span> <span class="token string">&#39;step 3&#39;</span> <span class="token punctuation">)</span></span>
<span class="line">    <span class="token keyword">yield</span> <span class="token punctuation">(</span> <span class="token number">5</span> <span class="token punctuation">)</span></span>
<span class="line"></span>
<span class="line">o <span class="token operator">=</span> odd<span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line"><span class="token keyword">print</span><span class="token punctuation">(</span> <span class="token builtin">next</span><span class="token punctuation">(</span> o <span class="token punctuation">)</span> <span class="token punctuation">)</span></span>
<span class="line"><span class="token keyword">print</span><span class="token punctuation">(</span> <span class="token builtin">next</span><span class="token punctuation">(</span> o <span class="token punctuation">)</span> <span class="token punctuation">)</span></span>
<span class="line"><span class="token keyword">print</span><span class="token punctuation">(</span> <span class="token builtin">next</span><span class="token punctuation">(</span> o <span class="token punctuation">)</span> <span class="token punctuation">)</span></span>
<span class="line"></span></code></pre></div><p>输出的结果：</p><div class="language-txt" data-highlighter="prismjs" data-ext="txt" data-title="txt"><pre><code><span class="line">step 1</span>
<span class="line">1</span>
<span class="line">step 2</span>
<span class="line">3</span>
<span class="line">step 3</span>
<span class="line">5</span>
<span class="line"></span></code></pre></div><p>可以看到，odd 不是普通函数，而是 generator，在执行过程中，遇到 yield 就中断，下次又继续执行。执行 3 次 yield 后，已经没有 yield 可以执行了，如果你继续打印 <code>print( next( o ) )</code> ,就会报错的。所以通常在 generator 函数中都要对错误进行捕获。</p><h2 id="_5、打印杨辉三角" tabindex="-1"><a class="header-anchor" href="#_5、打印杨辉三角"><span>5、打印杨辉三角</span></a></h2><p>通过学习了生成器，我们可以直接利用生成器的知识点来打印杨辉三角：</p><div class="language-python" data-highlighter="prismjs" data-ext="py" data-title="py"><pre><code><span class="line"><span class="token comment"># -*- coding: UTF-8 -*-</span></span>
<span class="line"><span class="token keyword">def</span> <span class="token function">triangles</span><span class="token punctuation">(</span> n <span class="token punctuation">)</span><span class="token punctuation">:</span>         <span class="token comment"># 杨辉三角形</span></span>
<span class="line">    L <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span></span>
<span class="line">    <span class="token keyword">while</span> <span class="token boolean">True</span><span class="token punctuation">:</span></span>
<span class="line">        <span class="token keyword">yield</span> L</span>
<span class="line">        L<span class="token punctuation">.</span>append<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span></span>
<span class="line">        L <span class="token operator">=</span> <span class="token punctuation">[</span> L <span class="token punctuation">[</span> i <span class="token operator">-</span><span class="token number">1</span> <span class="token punctuation">]</span> <span class="token operator">+</span> L <span class="token punctuation">[</span> i <span class="token punctuation">]</span> <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span> <span class="token punctuation">(</span><span class="token builtin">len</span><span class="token punctuation">(</span>L<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">]</span></span>
<span class="line"></span>
<span class="line">n<span class="token operator">=</span> <span class="token number">0</span></span>
<span class="line"><span class="token keyword">for</span> t <span class="token keyword">in</span> triangles<span class="token punctuation">(</span> <span class="token number">10</span> <span class="token punctuation">)</span><span class="token punctuation">:</span>   <span class="token comment"># 直接修改函数名即可运行</span></span>
<span class="line">    <span class="token keyword">print</span><span class="token punctuation">(</span>t<span class="token punctuation">)</span></span>
<span class="line">    n <span class="token operator">=</span> n <span class="token operator">+</span> <span class="token number">1</span></span>
<span class="line">    <span class="token keyword">if</span> n <span class="token operator">==</span> <span class="token number">10</span><span class="token punctuation">:</span></span>
<span class="line">        <span class="token keyword">break</span></span>
<span class="line"></span></code></pre></div><p>输出的结果为：</p><div class="language-txt" data-highlighter="prismjs" data-ext="txt" data-title="txt"><pre><code><span class="line">[1]</span>
<span class="line">[1, 1]</span>
<span class="line">[1, 2, 1]</span>
<span class="line">[1, 3, 3, 1]</span>
<span class="line">[1, 4, 6, 4, 1]</span>
<span class="line">[1, 5, 10, 10, 5, 1]</span>
<span class="line">[1, 6, 15, 20, 15, 6, 1]</span>
<span class="line">[1, 7, 21, 35, 35, 21, 7, 1]</span>
<span class="line">[1, 8, 28, 56, 70, 56, 28, 8, 1]</span>
<span class="line">[1, 9, 36, 84, 126, 126, 84, 36, 9, 1]</span>
<span class="line"></span></code></pre></div><h1 id="五、迭代器和生成器综合例子" tabindex="-1"><a class="header-anchor" href="#五、迭代器和生成器综合例子"><span>五、迭代器和生成器综合例子</span></a></h1><p>因为迭代器和生成器基本是互通的，因此有些知识点需要综合在一起</p><h2 id="_1、反向迭代" tabindex="-1"><a class="header-anchor" href="#_1、反向迭代"><span>1、反向迭代</span></a></h2><p>反向迭代，应该也是常有的需求了，比如从一开始迭代的例子里，有个输出 list 的元素，从 1 到 5 的</p><div class="language-python" data-highlighter="prismjs" data-ext="py" data-title="py"><pre><code><span class="line">list1 <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">]</span></span>
<span class="line"><span class="token keyword">for</span> num1 <span class="token keyword">in</span> list1 <span class="token punctuation">:</span></span>
<span class="line">    <span class="token keyword">print</span> <span class="token punctuation">(</span> num1 <span class="token punctuation">,</span> end <span class="token operator">=</span> <span class="token string">&#39; &#39;</span> <span class="token punctuation">)</span></span>
<span class="line"></span></code></pre></div><p>那么我们从 5 到 1 呢？这也很简单， Python 中有内置的函数 <code>reversed()</code></p><div class="language-python" data-highlighter="prismjs" data-ext="py" data-title="py"><pre><code><span class="line">list1 <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">]</span></span>
<span class="line"><span class="token keyword">for</span> num1 <span class="token keyword">in</span> <span class="token builtin">reversed</span><span class="token punctuation">(</span>list1<span class="token punctuation">)</span> <span class="token punctuation">:</span></span>
<span class="line">    <span class="token keyword">print</span> <span class="token punctuation">(</span> num1 <span class="token punctuation">,</span> end <span class="token operator">=</span> <span class="token string">&#39; &#39;</span> <span class="token punctuation">)</span></span>
<span class="line"></span></code></pre></div><p>方向迭代很简单，可是要注意一点就是：<strong>反向迭代仅仅当对象的大小可预先确定或者对象实现了 <code>__reversed__()</code> 的特殊方法时才能生效。 如果两者都不符合，那你必须先将对象转换为一个列表才行</strong></p><p>其实很多时候我们可以通过在自定义类上实现 <code>__reversed__()</code> 方法来实现反向迭代。不过有些知识点在之前的篇节中还没有提到，不过可以相应的看下，有编程基础的，学完上面的知识点应该也能理解的。</p><div class="language-python line-numbers-mode" data-highlighter="prismjs" data-ext="py" data-title="py"><pre><code><span class="line"><span class="token comment"># -*- coding: UTF-8 -*-</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">class</span> <span class="token class-name">Countdown</span><span class="token punctuation">:</span></span>
<span class="line">    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> start<span class="token punctuation">)</span><span class="token punctuation">:</span></span>
<span class="line">        self<span class="token punctuation">.</span>start <span class="token operator">=</span> start</span>
<span class="line"></span>
<span class="line">    <span class="token keyword">def</span> <span class="token function">__iter__</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span></span>
<span class="line">     <span class="token comment"># Forward iterator</span></span>
<span class="line">        n <span class="token operator">=</span> self<span class="token punctuation">.</span>start</span>
<span class="line">        <span class="token keyword">while</span> n <span class="token operator">&gt;</span> <span class="token number">0</span><span class="token punctuation">:</span></span>
<span class="line">            <span class="token keyword">yield</span> n</span>
<span class="line">            n <span class="token operator">-=</span> <span class="token number">1</span></span>
<span class="line"></span>
<span class="line">    <span class="token keyword">def</span> <span class="token function">__reversed__</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span></span>
<span class="line">     <span class="token comment"># Reverse iterator</span></span>
<span class="line">        n <span class="token operator">=</span> <span class="token number">1</span></span>
<span class="line">        <span class="token keyword">while</span> n <span class="token operator">&lt;=</span> self<span class="token punctuation">.</span>start<span class="token punctuation">:</span></span>
<span class="line">            <span class="token keyword">yield</span> n</span>
<span class="line">            n <span class="token operator">+=</span> <span class="token number">1</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">for</span> rr <span class="token keyword">in</span> <span class="token builtin">reversed</span><span class="token punctuation">(</span>Countdown<span class="token punctuation">(</span><span class="token number">30</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">:</span></span>
<span class="line">    <span class="token keyword">print</span><span class="token punctuation">(</span>rr<span class="token punctuation">)</span></span>
<span class="line"><span class="token keyword">for</span> rr <span class="token keyword">in</span> Countdown<span class="token punctuation">(</span><span class="token number">30</span><span class="token punctuation">)</span><span class="token punctuation">:</span></span>
<span class="line">    <span class="token keyword">print</span><span class="token punctuation">(</span>rr<span class="token punctuation">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>输出的结果是 1 到 30 然后 30 到 1 ，分别是顺序打印和倒序打印</p><h2 id="_2、同时迭代多个序列" tabindex="-1"><a class="header-anchor" href="#_2、同时迭代多个序列"><span>2、同时迭代多个序列</span></a></h2><p>你想同时迭代多个序列，每次分别从一个序列中取一个元素。你遇到过这样的需求吗？</p><p>为了同时迭代多个序列，使用 zip() 函数，具体示例：</p><div class="language-python" data-highlighter="prismjs" data-ext="py" data-title="py"><pre><code><span class="line"><span class="token comment"># -*- coding: UTF-8 -*-</span></span>
<span class="line"></span>
<span class="line">names <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">&#39;laingdianshui&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;twowater&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;两点水&#39;</span><span class="token punctuation">]</span></span>
<span class="line">ages <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">18</span><span class="token punctuation">,</span> <span class="token number">19</span><span class="token punctuation">,</span> <span class="token number">20</span><span class="token punctuation">]</span></span>
<span class="line"><span class="token keyword">for</span> name<span class="token punctuation">,</span> age <span class="token keyword">in</span> <span class="token builtin">zip</span><span class="token punctuation">(</span>names<span class="token punctuation">,</span> ages<span class="token punctuation">)</span><span class="token punctuation">:</span></span>
<span class="line">     <span class="token keyword">print</span><span class="token punctuation">(</span>name<span class="token punctuation">,</span>age<span class="token punctuation">)</span></span>
<span class="line"></span></code></pre></div><p>输出的结果：</p><div class="language-txt" data-highlighter="prismjs" data-ext="txt" data-title="txt"><pre><code><span class="line">laingdianshui 18</span>
<span class="line">twowater 19</span>
<span class="line">两点水 20</span>
<span class="line"></span></code></pre></div><p>其实 zip(a, b) 会生成一个可返回元组 (x, y) 的迭代器，其中 x 来自 a，y 来自 b。 一旦其中某个序列到底结尾，迭代宣告结束。 因此迭代长度跟参数中最短序列长度一致。注意理解这句话喔，也就是说如果 a ， b 的长度不一致的话，以最短的为标准，遍历完后就结束。</p><p>利用 <code>zip()</code> 函数，我们还可把一个 key 列表和一个 value 列表生成一个 dict （字典）,如下：</p><div class="language-python" data-highlighter="prismjs" data-ext="py" data-title="py"><pre><code><span class="line"><span class="token comment"># -*- coding: UTF-8 -*-</span></span>
<span class="line"></span>
<span class="line">names <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">&#39;laingdianshui&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;twowater&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;两点水&#39;</span><span class="token punctuation">]</span></span>
<span class="line">ages <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">18</span><span class="token punctuation">,</span> <span class="token number">19</span><span class="token punctuation">,</span> <span class="token number">20</span><span class="token punctuation">]</span></span>
<span class="line"></span>
<span class="line">dict1<span class="token operator">=</span> <span class="token builtin">dict</span><span class="token punctuation">(</span><span class="token builtin">zip</span><span class="token punctuation">(</span>names<span class="token punctuation">,</span>ages<span class="token punctuation">)</span><span class="token punctuation">)</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">print</span><span class="token punctuation">(</span>dict1<span class="token punctuation">)</span></span>
<span class="line"></span>
<span class="line"></span></code></pre></div><p>输出如下结果：</p><div class="language-python" data-highlighter="prismjs" data-ext="py" data-title="py"><pre><code><span class="line"><span class="token punctuation">{</span><span class="token string">&#39;laingdianshui&#39;</span><span class="token punctuation">:</span> <span class="token number">18</span><span class="token punctuation">,</span> <span class="token string">&#39;twowater&#39;</span><span class="token punctuation">:</span> <span class="token number">19</span><span class="token punctuation">,</span> <span class="token string">&#39;两点水&#39;</span><span class="token punctuation">:</span> <span class="token number">20</span><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre></div><p>这里提一下， <code>zip()</code> 是可以接受多于两个的序列的参数，不仅仅是两个。</p>`,132)]))}const i=s(e,[["render",l]]),u=JSON.parse('{"path":"/python-tutor/basics/interator.html","title":"迭代","lang":"zh-CN","frontmatter":{"description":"迭代 这篇内容挺多的，而且比内容不好理解。或许新手看完后，还会一脸懵逼，不过这是正常的，如果你看完后，是迷糊的，那么建议你继续学习后面的内容，等学完，再回来看几次。 注：这也是我第二次修改内容没有改过的章节。 目录 一、迭代 什么叫做迭代？ 比如在 Java 中，我们通过 List 集合的下标来遍历 List 集合中的元素，在 Python 中，给定一...","head":[["meta",{"property":"og:url","content":"https://yzqdev.github.io/cs-guide/cs-guide/python-tutor/basics/interator.html"}],["meta",{"property":"og:site_name","content":"cs-guide"}],["meta",{"property":"og:title","content":"迭代"}],["meta",{"property":"og:description","content":"迭代 这篇内容挺多的，而且比内容不好理解。或许新手看完后，还会一脸懵逼，不过这是正常的，如果你看完后，是迷糊的，那么建议你继续学习后面的内容，等学完，再回来看几次。 注：这也是我第二次修改内容没有改过的章节。 目录 一、迭代 什么叫做迭代？ 比如在 Java 中，我们通过 List 集合的下标来遍历 List 集合中的元素，在 Python 中，给定一..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:image","content":"http://twowaterimage.oss-cn-beijing.aliyuncs.com/2019-10-07-%E8%BF%AD%E4%BB%A3%E5%99%A8%E5%92%8C%E7%94%9F%E6%88%90%E5%99%A8.png"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2022-06-19T01:50:19.000Z"}],["meta",{"property":"article:modified_time","content":"2022-06-19T01:50:19.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"迭代\\",\\"image\\":[\\"http://twowaterimage.oss-cn-beijing.aliyuncs.com/2019-10-07-%E8%BF%AD%E4%BB%A3%E5%99%A8%E5%92%8C%E7%94%9F%E6%88%90%E5%99%A8.png\\",\\"http://twowaterimage.oss-cn-beijing.aliyuncs.com/2019-10-07-%E8%AE%A1%E7%AE%97%E6%96%90%E6%B3%A2%E9%82%A3%E5%A5%91%E6%95%B0%E5%88%97%E7%9A%84%E7%94%9F%E6%88%90%E5%99%A8.gif\\"],\\"dateModified\\":\\"2022-06-19T01:50:19.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"yzqdev\\",\\"url\\":\\"http://www.yzqdev.top\\"}]}"]]},"headers":[{"level":2,"title":"1、创建 list 的方式","slug":"_1、创建-list-的方式","link":"#_1、创建-list-的方式","children":[]},{"level":2,"title":"2、list 生成式的创建","slug":"_2、list-生成式的创建","link":"#_2、list-生成式的创建","children":[]},{"level":2,"title":"1、为什么需要生成器","slug":"_1、为什么需要生成器","link":"#_1、为什么需要生成器","children":[]},{"level":2,"title":"2、生成器的创建","slug":"_2、生成器的创建","link":"#_2、生成器的创建","children":[]},{"level":2,"title":"3、遍历生成器的元素","slug":"_3、遍历生成器的元素","link":"#_3、遍历生成器的元素","children":[]},{"level":2,"title":"4、以函数的形式实现生成器","slug":"_4、以函数的形式实现生成器","link":"#_4、以函数的形式实现生成器","children":[]},{"level":2,"title":"5、打印杨辉三角","slug":"_5、打印杨辉三角","link":"#_5、打印杨辉三角","children":[]},{"level":2,"title":"1、反向迭代","slug":"_1、反向迭代","link":"#_1、反向迭代","children":[]},{"level":2,"title":"2、同时迭代多个序列","slug":"_2、同时迭代多个序列","link":"#_2、同时迭代多个序列","children":[]}],"git":{"createdTime":1653565176000,"updatedTime":1655603419000,"contributors":[{"name":"yzqdev","username":"yzqdev","email":"yzqdev@outlook.com","commits":2,"url":"https://github.com/yzqdev"}]},"readingTime":{"minutes":12.84,"words":3851},"filePathRelative":"python-tutor/basics/interator.md","localizedDate":"2022年5月26日","autoDesc":true}');export{i as comp,u as data};
