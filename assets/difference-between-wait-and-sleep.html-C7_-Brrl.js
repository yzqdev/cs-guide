import{_ as a,c as t,a as n,o}from"./app-C8DxhDIZ.js";const i={};function s(l,e){return o(),t("div",null,e[0]||(e[0]=[n(`<h1 id="wait-和sleep-的区别" tabindex="-1"><a class="header-anchor" href="#wait-和sleep-的区别"><span>wait()和sleep()的区别</span></a></h1><h3 id="问题" tabindex="-1"><a class="header-anchor" href="#问题"><span>问题</span></a></h3><p>在线程里 <code>wait()</code> 和 <code>sleep()</code> 的区别？</p><p>我的理解是执行 <code>wait()</code> 语句后，该线程仍是运行态，并且会占用CPU，但是执行 <code>sleep()</code>后，该线程则不会占用CPU，对吗？</p><p>为什么需要 <code>sleep()</code> 和 <code>wait()</code> 两条语句：他们底层是如何实现的？</p><h3 id="回答" tabindex="-1"><a class="header-anchor" href="#回答"><span>回答</span></a></h3><p>线程 在<a href="http://docs.oracle.com/javase/6/docs/api/java/lang/Object.html#wait%28%29" target="_blank" rel="noopener noreferrer"><code>wait</code></a> 后，可以被另一个拥有相同 <code>synchronized</code> 对象的线程，通过调用<a href="http://docs.oracle.com/javase/6/docs/api/java/lang/Object.html#notify%28%29" target="_blank" rel="noopener noreferrer">notify</a>唤醒，而 <code>sleep</code> 不行。<code>wait</code> 和 <code>notify</code> 能正常执行的条件是（否则会抛异常）：多个线程的代码，都包在<code>synchronized</code>块中，并且 <code>synchronized</code> 锁的对象需要是同一个。如下所示：</p><div class="language-text" data-highlighter="prismjs" data-ext="text" data-title="text"><pre><code><span class="line">Object mon = ...;</span>
<span class="line">synchronized (mon) {</span>
<span class="line">    mon.wait();</span>
<span class="line">} </span>
<span class="line"></span></code></pre></div><p>上面这个线程调用了 <code>wait</code>后，会进入等待状态。这时另外一个线程可以这样做：</p><div class="language-text" data-highlighter="prismjs" data-ext="text" data-title="text"><pre><code><span class="line">synchronized (mon) { mon.notify(); }</span>
<span class="line"></span></code></pre></div><p>可以看到，<code>synchronized</code>锁对象，都是mon。因此，当第二个线程调用了 <code>notify()</code> 方法，第一个线程就会唤醒（假设有且仅有一个线程是被包在 <code>synchronized (mon)</code> 中且处于等待状态)。</p><p>如果有多个线程在等待（且<code>synchronized</code> 锁对象是同一个，如上例中的mon），则可以调用<a href="http://docs.oracle.com/javase/6/docs/api/java/lang/Object.html#notifyAll%28%29" target="_blank" rel="noopener noreferrer">notifyAll</a>来唤醒。但是，只有其中一个线程能抢到锁并继续执行（因为 <code>wait</code> 的线程都是在 <code>synchronized</code> 块内，需要争夺 <code>synchronized</code> 锁）。其他的线程会被锁住，直到他们依次获得锁。</p><p>再补充几点：</p><ul><li><p><code>wait</code> 方法由 <code>Object</code> 对象调用（例如：你可以让 <code>synchronized</code> 锁对象调用 <code>wait</code> ,如上面例子的mon.wait()）,而 <code>sleep</code> 则由线程调用。</p></li><li><p><code>wait</code> 之后，可能会伪唤醒（<code>spurious wakeups</code>）（正在waiting的线程,无故就被唤醒了，如遇到interrupted, timing out等情况）。因此，你需要多设置一些检查，如果不满足实际的运行条件，则继续等待，如下：</p></li></ul><div class="language-text" data-highlighter="prismjs" data-ext="text" data-title="text"><pre><code><span class="line">synchronized {</span>
<span class="line">    while (!condition) { mon.wait(); }</span>
<span class="line">}</span>
<span class="line"></span></code></pre></div><ul><li>当线程调用 <code>sleep</code> 时，并没有释放对象锁，而 <code>wait</code> 则释放了对象锁：</li></ul><div class="language-text" data-highlighter="prismjs" data-ext="text" data-title="text"><pre><code><span class="line">synchronized(LOCK) {</span>
<span class="line">    Thread.sleep(1000); // LOCK is held</span>
<span class="line">}</span>
<span class="line">synchronized(LOCK) {</span>
<span class="line">    LOCK.wait(); // LOCK is not held</span>
<span class="line">}</span>
<span class="line"></span></code></pre></div><p>最后，再小结一下：</p><ul><li><code>sleep()</code>:“我已经完成了一个时间片，<strong>在n微秒</strong>前，请不要再给我一个时间片”。这时操作系统不会让这个线程做任何事情，直到sleep时间结束。</li><li><code>wait()</code>:&quot;我已经完成了一个时间片，<strong>在其他线程调用<code>notify()</code>前</strong>，请不要再给我一个时间片）。这时操作系统不会安排这个线程继续运行，直到有人调用了<code>notify()</code></li></ul><p><strong>stackoverflow链接：</strong><a href="http://stackoverflow.com/questions/1036754/difference-between-wait-and-sleep" target="_blank" rel="noopener noreferrer">http://stackoverflow.com/questions/1036754/difference-between-wait-and-sleep</a></p><h3 id="相关问题及链接" tabindex="-1"><a class="header-anchor" href="#相关问题及链接"><span>相关问题及链接</span></a></h3><ol><li><a href="http://stackoverflow.com/questions/37026/java-notify-vs-notifyall-all-over-again" target="_blank" rel="noopener noreferrer">Java: notify() vs. notifyAll() all over again</a></li><li><a href="http://ifeve.com/thread-signaling/" target="_blank" rel="noopener noreferrer">线程通信</a></li><li><a href="http://longdick.iteye.com/blog/453615" target="_blank" rel="noopener noreferrer">最简实例说明wait、notify、notifyAll的使用方法</a></li></ol>`,22)]))}const d=a(i,[["render",s]]),r=JSON.parse('{"path":"/cs-tips/java-tip/stackoverflow/difference-between-wait-and-sleep.html","title":"wait()和sleep()的区别","lang":"zh-CN","frontmatter":{"description":"wait()和sleep()的区别 问题 在线程里 wait() 和 sleep() 的区别？ 我的理解是执行 wait() 语句后，该线程仍是运行态，并且会占用CPU，但是执行 sleep()后，该线程则不会占用CPU，对吗？ 为什么需要 sleep() 和 wait() 两条语句：他们底层是如何实现的？ 回答 线程 在wait 后，可以被另一个拥有...","head":[["meta",{"property":"og:url","content":"https://yzqdev.github.io/cs-guide/cs-guide/cs-tips/java-tip/stackoverflow/difference-between-wait-and-sleep.html"}],["meta",{"property":"og:site_name","content":"cs-guide"}],["meta",{"property":"og:title","content":"wait()和sleep()的区别"}],["meta",{"property":"og:description","content":"wait()和sleep()的区别 问题 在线程里 wait() 和 sleep() 的区别？ 我的理解是执行 wait() 语句后，该线程仍是运行态，并且会占用CPU，但是执行 sleep()后，该线程则不会占用CPU，对吗？ 为什么需要 sleep() 和 wait() 两条语句：他们底层是如何实现的？ 回答 线程 在wait 后，可以被另一个拥有..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2023-05-25T04:34:06.000Z"}],["meta",{"property":"article:modified_time","content":"2023-05-25T04:34:06.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"wait()和sleep()的区别\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2023-05-25T04:34:06.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"yzqdev\\",\\"url\\":\\"http://www.yzqdev.top\\"}]}"]]},"headers":[{"level":3,"title":"问题","slug":"问题","link":"#问题","children":[]},{"level":3,"title":"回答","slug":"回答","link":"#回答","children":[]},{"level":3,"title":"相关问题及链接","slug":"相关问题及链接","link":"#相关问题及链接","children":[]}],"git":{"createdTime":1684989246000,"updatedTime":1684989246000,"contributors":[{"name":"yzqdev","username":"yzqdev","email":"yzqdev@outlook.com","commits":1,"url":"https://github.com/yzqdev"}]},"readingTime":{"minutes":2.3,"words":691},"filePathRelative":"cs-tips/java-tip/stackoverflow/difference-between-wait-and-sleep.md","localizedDate":"2023年5月25日","autoDesc":true}');export{d as comp,r as data};
