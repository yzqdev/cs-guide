import{_ as s,c as a,a as p,o as t}from"./app-C8DxhDIZ.js";const e="/cs-guide/assets/2bc3bfa15c-B-ssQXfh.jpeg",c={};function l(o,n){return t(),a("div",null,n[0]||(n[0]=[p(`<h1 id="dart基础2" tabindex="-1"><a class="header-anchor" href="#dart基础2"><span>dart基础2</span></a></h1><h2 id="类和对象" tabindex="-1"><a class="header-anchor" href="#类和对象"><span>类和对象</span></a></h2><h3 id="类的定义" tabindex="-1"><a class="header-anchor" href="#类的定义"><span>类的定义</span></a></h3><div class="language-dart" data-highlighter="prismjs" data-ext="dart" data-title="dart"><pre><code><span class="line"><span class="token comment">// Dart中定义一个类</span></span>
<span class="line"><span class="token keyword">class</span> <span class="token class-name">Person</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token class-name">String</span> name<span class="token punctuation">;</span></span>
<span class="line">  int age<span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">  <span class="token class-name">Person</span><span class="token punctuation">(</span><span class="token class-name">String</span> name<span class="token punctuation">,</span> int age<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span></span>
<span class="line">    <span class="token keyword">this</span><span class="token punctuation">.</span>age <span class="token operator">=</span> age<span class="token punctuation">;</span></span>
<span class="line">  <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre></div><p>Dart中的类与Java中的相似，不同的是，Dart中没有<code>private</code>、<code>public</code>这些成员访问修饰符。如果是类私有的成员，不希望外面访问，只需要在成员变量之前加上一个下划线<code>_</code>变为私有即可。</p><p>以上代码，在Dart中还有一种简化写法，可以自动在构造方法中对成员变量初始化。</p><div class="language-dart" data-highlighter="prismjs" data-ext="dart" data-title="dart"><pre><code><span class="line"><span class="token comment">// Dart中定义一个类</span></span>
<span class="line"><span class="token keyword">class</span>  <span class="token class-name">Person</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token class-name">String</span> name<span class="token punctuation">;</span></span>
<span class="line">    int age<span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">    <span class="token comment">// 在构造方法中初始化成员变量时，可使用如下写法简化</span></span>
<span class="line">    <span class="token class-name">Person</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>name<span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">.</span>age<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">    <span class="token comment">// 如需处理其他变量时，也可单独对其操作</span></span>
<span class="line">    <span class="token comment">// Person(this.name, this.age, String address){</span></span>
<span class="line">    <span class="token comment">//     print(address);</span></span>
<span class="line">    <span class="token comment">// }</span></span>
<span class="line">    <span class="token comment">// 注意，构造方法不能重载，以上注释掉</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre></div><p>另外还需要注意一点，Dart中没有构造方法的重载，不能写两个同名的构造方法。</p><h3 id="getters-和-setters方法" tabindex="-1"><a class="header-anchor" href="#getters-和-setters方法"><span>Getters 和 Setters方法</span></a></h3><p>在Java中，一般不会直接在类的外部去访问类成员，通常使用setter和getter方法来操作类的成员变量。而在Dart语言中，所有类中都包含隐式的getter方法，对于非<code>final</code>修饰的成员，类中还包含隐式的setter方法。这就意味着，在Dart中，你可以直接在类外部通过<code>.</code>操作符访问类成员。这一特点使得Dart语法更加简洁，不会写出满屏的setXXX、getXXX方法。</p><p>当然，很多时候我们调用setter和getter方法并不仅仅是为了赋值和访问，而是为了一些额外的处理，这时候我们只需要使用<code>set</code>与<code>get</code>关键字实现setter和getter方法即可。</p><div class="language-dart line-numbers-mode" data-highlighter="prismjs" data-ext="dart" data-title="dart"><pre><code><span class="line"><span class="token keyword">class</span>  <span class="token class-name">Person</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token class-name">String</span> userName<span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">    <span class="token class-name">Person</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>userName<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">    <span class="token comment">// 方法名前加get关键字</span></span>
<span class="line">    <span class="token class-name">String</span> <span class="token keyword">get</span> name<span class="token punctuation">{</span></span>
<span class="line">        <span class="token keyword">return</span>  <span class="token string-literal"><span class="token string">&quot;user:&quot;</span></span>  <span class="token operator">+</span>  <span class="token keyword">this</span><span class="token punctuation">.</span>userName<span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">    <span class="token comment">// 方法名前加set关键字</span></span>
<span class="line">    <span class="token keyword">set</span> <span class="token function">name</span><span class="token punctuation">(</span><span class="token class-name">String</span> name<span class="token punctuation">)</span><span class="token punctuation">{</span></span>
<span class="line">        <span class="token comment">// do something</span></span>
<span class="line">        <span class="token keyword">this</span><span class="token punctuation">.</span>userName <span class="token operator">=</span> name<span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">void</span>  <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">var</span> p <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Person</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">&quot;zhangsan&quot;</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token function">print</span><span class="token punctuation">(</span>p<span class="token punctuation">.</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment">// user:zhangsan</span></span>
<span class="line">    p<span class="token punctuation">.</span>name <span class="token operator">=</span> <span class="token string-literal"><span class="token string">&quot;Jack&quot;</span></span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token function">print</span><span class="token punctuation">(</span>p<span class="token punctuation">.</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment">// user:Jack</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>要注意，在创建对象时，<code>new</code>关键字并不是必须的，可以省略不写。在写Flutter界面时，不建议写<code>new</code>关键字实例化对象，因为Flutter框架中没有类似的xml语言来描述UI界面，界面也是使用Dart语言来写，在使用Dart写UI时，要保持代码的简洁和结构化，省略<code>new</code>会更友好。</p><h3 id="构造方法" tabindex="-1"><a class="header-anchor" href="#构造方法"><span>构造方法</span></a></h3><blockquote><p>如果没有定义构造方法，则会有一个默认的无参构造方法，并且会调用超类的无参构造方法。</p></blockquote><h4 id="命名构造方法" tabindex="-1"><a class="header-anchor" href="#命名构造方法"><span>命名构造方法</span></a></h4><p>上面已经说过，Dart类中两个同名构造方法不能重载，但是Dart语言为类新增了一种称为<code>命名构造方法</code>的东西。</p><div class="language-dart line-numbers-mode" data-highlighter="prismjs" data-ext="dart" data-title="dart"><pre><code><span class="line"><span class="token keyword">class</span>  <span class="token class-name">Person</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token class-name">String</span> userName<span class="token punctuation">;</span></span>
<span class="line">    int age<span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">    <span class="token class-name">Person</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>userName<span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">.</span>age<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">    <span class="token comment">// 命名构造方法</span></span>
<span class="line">    <span class="token class-name">Person</span><span class="token punctuation">.</span><span class="token function">fromData</span><span class="token punctuation">(</span><span class="token class-name">Map</span> data<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token keyword">this</span><span class="token punctuation">.</span>userName <span class="token operator">=</span> data<span class="token punctuation">[</span><span class="token string-literal"><span class="token string">&#39;name&#39;</span></span><span class="token punctuation">]</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token keyword">this</span><span class="token punctuation">.</span>age <span class="token operator">=</span> data<span class="token punctuation">[</span><span class="token string-literal"><span class="token string">&#39;age&#39;</span></span><span class="token punctuation">]</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">void</span>  <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token comment">// 使用命名构造方法创建对象</span></span>
<span class="line">    <span class="token keyword">var</span> p <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Person</span><span class="token punctuation">.</span><span class="token function">fromData</span><span class="token punctuation">(</span><span class="token punctuation">{</span></span>
<span class="line">        <span class="token string-literal"><span class="token string">&quot;name&quot;</span></span><span class="token punctuation">:</span><span class="token string-literal"><span class="token string">&quot;Bob&quot;</span></span><span class="token punctuation">,</span></span>
<span class="line">        <span class="token string-literal"><span class="token string">&quot;age&quot;</span></span><span class="token punctuation">:</span><span class="token number">19</span></span>
<span class="line">    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token function">print</span><span class="token punctuation">(</span>p<span class="token punctuation">.</span>userName<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>注意，使用命名构造方法可以为一个类实现多个构造方法，也可以更清晰的表明意图。</p><h4 id="常量构造方法" tabindex="-1"><a class="header-anchor" href="#常量构造方法"><span>常量构造方法</span></a></h4><blockquote><p>如果想提供一个状态永远不变的对像，在Dart中，我们可以创建一个编译时常量对象，节省开销。</p></blockquote><div class="language-dart line-numbers-mode" data-highlighter="prismjs" data-ext="dart" data-title="dart"><pre><code><span class="line"><span class="token keyword">class</span>  <span class="token class-name">ConstPoint</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">final</span> num x<span class="token punctuation">;</span></span>
<span class="line">    <span class="token keyword">final</span> num y<span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">    <span class="token comment">// 使用const修构造方法</span></span>
<span class="line">    <span class="token keyword">const</span> <span class="token class-name">ConstPoint</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>x<span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">.</span>y<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">    <span class="token comment">// 编译时常量对象，需使用const来创建对象</span></span>
<span class="line">    <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token class-name">ConstPoint</span> origin <span class="token operator">=</span> <span class="token keyword">const</span>  <span class="token class-name">ConstPoint</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">void</span>  <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token function">print</span><span class="token punctuation">(</span><span class="token class-name">ConstPoint</span><span class="token punctuation">.</span>origin<span class="token punctuation">.</span>x<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token function">print</span><span class="token punctuation">(</span><span class="token class-name">ConstPoint</span><span class="token punctuation">.</span>origin<span class="token punctuation">.</span>y<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="工厂构造方法" tabindex="-1"><a class="header-anchor" href="#工厂构造方法"><span>工厂构造方法</span></a></h4><p>当我们需要创建一个新的对象或者从缓存中取一个对象时，工厂构造方法就派上了用场。</p><div class="language-dart line-numbers-mode" data-highlighter="prismjs" data-ext="dart" data-title="dart"><pre><code><span class="line"><span class="token keyword">class</span>  <span class="token class-name">Logger</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">final</span> <span class="token class-name">String</span> name<span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">    <span class="token comment">// 创建一个静态Map做为缓存</span></span>
<span class="line">    <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">Logger</span><span class="token punctuation">&gt;</span></span> _cache <span class="token operator">=</span>  <span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">Logger</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">    <span class="token comment">// 定义一个命名构造方法，用下划线&quot;_&quot;修饰，将构造方法私有化</span></span>
<span class="line">    <span class="token class-name">Logger</span><span class="token punctuation">.</span><span class="token function">_internal</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">    <span class="token comment">// 使用关键字factory修饰类同名构造方法</span></span>
<span class="line">    <span class="token keyword">factory</span> <span class="token class-name">Logger</span><span class="token punctuation">(</span><span class="token class-name">String</span> name<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token keyword">if</span> <span class="token punctuation">(</span>_cache<span class="token punctuation">.</span><span class="token function">containsKey</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">            <span class="token keyword">return</span> _cache<span class="token punctuation">[</span>name<span class="token punctuation">]</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span></span>
<span class="line">            <span class="token comment">// 调用命名构造方法创建新对象</span></span>
<span class="line">            <span class="token keyword">final</span> logger<span class="token operator">=</span> <span class="token keyword">new</span>  <span class="token class-name">Logger</span><span class="token punctuation">.</span><span class="token function">_internal</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">            _cache<span class="token punctuation">[</span>name<span class="token punctuation">]</span> <span class="token operator">=</span> logger<span class="token punctuation">;</span> <span class="token comment">// 存入缓存</span></span>
<span class="line">            <span class="token keyword">return</span> logger<span class="token punctuation">;</span></span>
<span class="line">        <span class="token punctuation">}</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">void</span>  <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">var</span> uiLog <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Logger</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">&#39;UI&#39;</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token keyword">var</span> eventLog <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Logger</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">&#39;event&#39;</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="构造方法重定向" tabindex="-1"><a class="header-anchor" href="#构造方法重定向"><span>构造方法重定向</span></a></h4><p>有时候一个构造方法会调动类中的其他构造方法来实例化，这时候可以使用构造方法重定向，</p><div class="language-dart" data-highlighter="prismjs" data-ext="dart" data-title="dart"><pre><code><span class="line"><span class="token keyword">class</span> <span class="token class-name">Point</span> <span class="token punctuation">{</span></span>
<span class="line">  num x<span class="token punctuation">;</span></span>
<span class="line">  num y<span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">  <span class="token comment">// 同名构造方法</span></span>
<span class="line">  <span class="token class-name">Point</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>x<span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">.</span>y<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">  <span class="token comment">// 命名构造方法重定向到同名构造方法，中间使用一个冒号</span></span>
<span class="line">  <span class="token class-name">Point</span><span class="token punctuation">.</span><span class="token function">alongXAxis</span><span class="token punctuation">(</span>num x<span class="token punctuation">)</span> <span class="token punctuation">:</span> <span class="token keyword">this</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre></div><h3 id="类的初始化列表" tabindex="-1"><a class="header-anchor" href="#类的初始化列表"><span>类的初始化列表</span></a></h3><p>熟悉C++的朋友应该对初始化列表很了解了，Java中是没有这个特性的。</p><div class="language-dart line-numbers-mode" data-highlighter="prismjs" data-ext="dart" data-title="dart"><pre><code><span class="line"><span class="token keyword">class</span>  <span class="token class-name">Point</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">final</span>  num x<span class="token punctuation">;</span></span>
<span class="line">    <span class="token keyword">final</span>  num y<span class="token punctuation">;</span></span>
<span class="line">    <span class="token keyword">final</span>  num distance<span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">    <span class="token class-name">Point</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span> y<span class="token punctuation">)</span></span>
<span class="line">        <span class="token punctuation">:</span> x <span class="token operator">=</span> x<span class="token punctuation">,</span></span>
<span class="line">          y <span class="token operator">=</span> y<span class="token punctuation">,</span></span>
<span class="line">          distance <span class="token operator">=</span>  <span class="token function">sqrt</span><span class="token punctuation">(</span>x <span class="token operator">*</span> x <span class="token operator">+</span> y <span class="token operator">*</span> y<span class="token punctuation">)</span><span class="token punctuation">{</span></span>
<span class="line">             <span class="token function">print</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">&quot;这是构造方法&quot;</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">          <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">void</span>  <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">var</span> p <span class="token operator">=</span>  <span class="token keyword">new</span>  <span class="token class-name">Point</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token function">print</span><span class="token punctuation">(</span>p<span class="token punctuation">.</span>distance<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><img src="`+e+`" alt="9ff924c46f"></p><ul><li>初始化列表位于构造方法的小括号与大括号之间，在初始化列表之前需添加一个冒号。</li><li>初始化列表是由逗号分隔的一些赋值语句组成。</li><li>它适合用来初始化 <code>final</code>修饰的变量</li><li>初始化列表的调用是在构造方法之前，也就是在类完成实例化之前，因此初始化列表中是不能访问 <code>this</code>的</li></ul><h3 id="运算符重载" tabindex="-1"><a class="header-anchor" href="#运算符重载"><span>运算符重载</span></a></h3><p>这个特性，又很类似于C++中的运算符重载，在Java中是没用这种概念的。</p><div class="language-dart line-numbers-mode" data-highlighter="prismjs" data-ext="dart" data-title="dart"><pre><code><span class="line"><span class="token keyword">class</span> <span class="token class-name">Point</span> <span class="token punctuation">{</span></span>
<span class="line">  int x<span class="token punctuation">;</span></span>
<span class="line">  int y<span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">  <span class="token class-name">Point</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>x<span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">.</span>y<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">  <span class="token comment">// 使用operator关键字，为该类重载&quot;+&quot;运算符</span></span>
<span class="line">  <span class="token class-name">Point</span> <span class="token keyword">operator</span> <span class="token operator">+</span><span class="token punctuation">(</span><span class="token class-name">Point</span> p<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Point</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>x <span class="token operator">+</span> p<span class="token punctuation">.</span>x<span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">.</span>y <span class="token operator">+</span> p<span class="token punctuation">.</span>y<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">  <span class="token comment">// 为该类重载&quot;-&quot;运算符</span></span>
<span class="line">  <span class="token class-name">Point</span> <span class="token keyword">operator</span> <span class="token operator">-</span><span class="token punctuation">(</span><span class="token class-name">Point</span> p<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Point</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>x <span class="token operator">-</span> p<span class="token punctuation">.</span>x<span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">.</span>y <span class="token operator">-</span> p<span class="token punctuation">.</span>y<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span></span>
<span class="line">   <span class="token keyword">var</span> p1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Point</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">   <span class="token keyword">var</span> p2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Point</span><span class="token punctuation">(</span><span class="token number">7</span><span class="token punctuation">,</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">   <span class="token comment">// 重载运算符后，类可以使用“+”、“-” 运算符操作</span></span>
<span class="line">   <span class="token keyword">var</span> p3 <span class="token operator">=</span> p1 <span class="token operator">+</span> p2<span class="token punctuation">;</span></span>
<span class="line">   <span class="token keyword">var</span> p4 <span class="token operator">=</span> p2 <span class="token operator">-</span> p1<span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">   <span class="token function">print</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">&quot;</span><span class="token interpolation"><span class="token punctuation">\${</span><span class="token expression">p3<span class="token punctuation">.</span>x</span><span class="token punctuation">}</span></span><span class="token string">, </span><span class="token interpolation"><span class="token punctuation">\${</span><span class="token expression">p3<span class="token punctuation">.</span>y</span><span class="token punctuation">}</span></span><span class="token string">&quot;</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">   <span class="token function">print</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">&quot;</span><span class="token interpolation"><span class="token punctuation">\${</span><span class="token expression">p4<span class="token punctuation">.</span>x</span><span class="token punctuation">}</span></span><span class="token string">, </span><span class="token interpolation"><span class="token punctuation">\${</span><span class="token expression">p4<span class="token punctuation">.</span>y</span><span class="token punctuation">}</span></span><span class="token string">&quot;</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>打印结果：</p><div class="language-text" data-highlighter="prismjs" data-ext="text" data-title="text"><pre><code><span class="line">8, 15</span>
<span class="line">6, 5</span>
<span class="line"></span></code></pre></div><p>Dart中允许重载的运算符如下：</p><table><thead><tr><th></th><th></th><th></th><th></th><th></th><th></th><th></th></tr></thead><tbody><tr><td><code>+</code></td><td><code>–</code></td><td><code>*</code></td><td><code>~/</code></td><td><code>/</code></td><td><code>%</code></td><td><code>^</code></td></tr><tr><td><code>&lt;</code></td><td><code>&gt;</code></td><td><code>&lt;=</code></td><td><code>&gt;=</code></td><td><code>==</code></td><td><code>[]</code></td><td><code>[]=</code></td></tr><tr><td><code>&amp;</code></td><td><code>~</code></td><td><code>&lt;&lt;</code></td><td><code>&gt;&gt;</code></td><td>|</td><td></td><td></td></tr></tbody></table><h3 id="类的继承" tabindex="-1"><a class="header-anchor" href="#类的继承"><span>类的继承</span></a></h3><p>Dart中的继承，与Java中相似，可以使用关键字<code>extends</code>继承父类，使用关键字<code>super</code>引用父类</p><div class="language-dart" data-highlighter="prismjs" data-ext="dart" data-title="dart"><pre><code><span class="line"><span class="token keyword">class</span> <span class="token class-name">Father</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token function">myFunction</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span></span>
<span class="line">        <span class="token comment">// do something</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">class</span> <span class="token class-name">Son</span> <span class="token keyword">extends</span> <span class="token class-name">Father</span> <span class="token punctuation">{</span></span>
<span class="line"></span>
<span class="line">    <span class="token metadata function">@override</span></span>
<span class="line">    <span class="token function">myFunction</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span></span>
<span class="line">        <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">myFunction</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token comment">// do something</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre></div><p>我们知道，Java中的类仅支持单继承，而Dart中的类也只支持单继承。但是Dart可以使用一种被称为混入的方式来达到多继承的效果，这需要使用<code>with</code>关键字。</p><div class="language-dart line-numbers-mode" data-highlighter="prismjs" data-ext="dart" data-title="dart"><pre><code><span class="line"><span class="token comment">// 首先定义三个父类</span></span>
<span class="line"><span class="token keyword">class</span> <span class="token class-name">Father1</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token function">a</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span></span>
<span class="line">      <span class="token function">print</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">&quot;this is a func&quot;</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">    <span class="token function">common</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span></span>
<span class="line">        <span class="token function">print</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">&quot;common Father1&quot;</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">class</span> <span class="token class-name">Father2</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token function">b</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span></span>
<span class="line">      <span class="token function">print</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">&quot;this is b func&quot;</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">    <span class="token function">common</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span></span>
<span class="line">        <span class="token function">print</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">&quot;common Father2&quot;</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">class</span> <span class="token class-name">Father3</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token function">c</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span></span>
<span class="line">      <span class="token function">print</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">&quot;this is c func&quot;</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">    <span class="token function">common</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span></span>
<span class="line">        <span class="token function">print</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">&quot;common Father3&quot;</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">//定义子类</span></span>
<span class="line"><span class="token keyword">class</span> <span class="token class-name">Son</span> <span class="token keyword">extends</span> <span class="token class-name">Father1</span> <span class="token keyword">with</span> <span class="token class-name">Father2</span><span class="token punctuation">,</span><span class="token class-name">Father3</span><span class="token punctuation">{</span></span>
<span class="line"></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token keyword">var</span> obj <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Son</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">  obj<span class="token punctuation">.</span><span class="token function">common</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">  obj<span class="token punctuation">.</span><span class="token function">a</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">  obj<span class="token punctuation">.</span><span class="token function">b</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">  obj<span class="token punctuation">.</span><span class="token function">c</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>打印结果：</p><div class="language-text" data-highlighter="prismjs" data-ext="text" data-title="text"><pre><code><span class="line">common Father3</span>
<span class="line">this is a func</span>
<span class="line">this is b func</span>
<span class="line">this is c func</span>
<span class="line"></span></code></pre></div><p>要注意，以上继承写法中，也可以直接使用<code>with</code>，等价于如下写法</p><div class="language-dart" data-highlighter="prismjs" data-ext="dart" data-title="dart"><pre><code><span class="line"><span class="token keyword">class</span> <span class="token class-name">Son</span> <span class="token keyword">with</span> <span class="token class-name">Father1</span><span class="token punctuation">,</span><span class="token class-name">Father2</span><span class="token punctuation">,</span><span class="token class-name">Father3</span><span class="token punctuation">{</span></span>
<span class="line"></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre></div><h3 id="接口抽象" tabindex="-1"><a class="header-anchor" href="#接口抽象"><span>接口抽象</span></a></h3><h4 id="抽象类" tabindex="-1"><a class="header-anchor" href="#抽象类"><span>抽象类</span></a></h4><blockquote><p>Dart语言没有提供<code>interface</code>关键字来定义接口，但是Dart语言中保留了抽象类，同Java，使用<code>abstract</code>关键字来修饰抽象类。而Dart中的抽象类，实际上就相当于Java中的接口。</p></blockquote><div class="language-dart" data-highlighter="prismjs" data-ext="dart" data-title="dart"><pre><code><span class="line"><span class="token keyword">abstract</span> <span class="token keyword">class</span> <span class="token class-name">Base</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token comment">// 省略函数体即可定义抽象方法，不需加关键字</span></span>
<span class="line">    <span class="token function">func1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token function">func2</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre></div><p>注意，抽象类是不能被实例化的，子类继承抽象类时，必须实现全部抽象方法。</p><h4 id="隐式接口" tabindex="-1"><a class="header-anchor" href="#隐式接口"><span>隐式接口</span></a></h4><blockquote><p>实际上在Dart中，每个类都隐式的定义了一个包含所有实例成员的接口， 并且该类实现了这个接口。</p></blockquote><p>因此，如果我们想实现某个接口，但有又不想继承，则可以使用这种隐式接口机制。我们需要用到关键字<code>implements</code></p><div class="language-dart line-numbers-mode" data-highlighter="prismjs" data-ext="dart" data-title="dart"><pre><code><span class="line"><span class="token keyword">class</span> <span class="token class-name">People</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token keyword">void</span> <span class="token function">greet</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span></span>
<span class="line">    <span class="token function">print</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">&quot;Hello&quot;</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">class</span> <span class="token class-name">Student</span> <span class="token keyword">implements</span> <span class="token class-name">People</span><span class="token punctuation">{</span></span>
<span class="line">  <span class="token metadata function">@override</span></span>
<span class="line">  <span class="token keyword">void</span> <span class="token function">greet</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span></span>
<span class="line">    <span class="token function">print</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">&quot;Hi,I&#39;m Alice.&quot;</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token function">greet</span><span class="token punctuation">(</span><span class="token class-name">People</span> p<span class="token punctuation">)</span><span class="token punctuation">{</span></span>
<span class="line">  p<span class="token punctuation">.</span><span class="token function">greet</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token function">greet</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Student</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="泛型" tabindex="-1"><a class="header-anchor" href="#泛型"><span>泛型</span></a></h2><p>Dart中也支持泛型，用法与Java中类似。</p><div class="language-dart" data-highlighter="prismjs" data-ext="dart" data-title="dart"><pre><code><span class="line"><span class="token comment">// 泛型</span></span>
<span class="line"><span class="token keyword">var</span> names <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">names<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">&quot;zhangsan&quot;</span></span><span class="token punctuation">)</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">var</span> maps <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span>int<span class="token punctuation">,</span> <span class="token class-name">String</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">maps<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token string-literal"><span class="token string">&quot;value&quot;</span></span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">// 字面量写法</span></span>
<span class="line"><span class="token keyword">var</span> infos <span class="token operator">=</span> <span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">[</span><span class="token string-literal"><span class="token string">&#39;Seth&#39;</span></span><span class="token punctuation">,</span> <span class="token string-literal"><span class="token string">&#39;Kathy&#39;</span></span><span class="token punctuation">,</span> <span class="token string-literal"><span class="token string">&#39;Lars&#39;</span></span><span class="token punctuation">]</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">var</span> pages <span class="token operator">=</span> <span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">String</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">{</span></span>
<span class="line">  <span class="token string-literal"><span class="token string">&#39;index.html&#39;</span></span><span class="token punctuation">:</span> <span class="token string-literal"><span class="token string">&#39;Homepage&#39;</span></span><span class="token punctuation">,</span></span>
<span class="line">  <span class="token string-literal"><span class="token string">&#39;robots.txt&#39;</span></span><span class="token punctuation">:</span> <span class="token string-literal"><span class="token string">&#39;Hints for web robots&#39;</span></span></span>
<span class="line"><span class="token punctuation">}</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre></div><h2 id="异常处理" tabindex="-1"><a class="header-anchor" href="#异常处理"><span>异常处理</span></a></h2><p>如果关心具体异常，针对不同异常进行不同处理，可以使用<code>try...on</code>处理异常，<code>finally</code>是可选的，用于最后的处理。</p><div class="language-dart" data-highlighter="prismjs" data-ext="dart" data-title="dart"><pre><code><span class="line">  <span class="token keyword">try</span> <span class="token punctuation">{</span></span>
<span class="line">      <span class="token comment">// 使除数为0</span></span>
<span class="line">      <span class="token function">print</span><span class="token punctuation">(</span><span class="token number">11</span><span class="token operator">~/</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token punctuation">}</span> <span class="token keyword">on</span> <span class="token class-name">IntegerDivisionByZeroException</span> <span class="token punctuation">{</span></span>
<span class="line">      <span class="token function">print</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">&quot;除数为0&quot;</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token punctuation">}</span><span class="token keyword">on</span> <span class="token class-name">Exception</span><span class="token punctuation">{</span></span>
<span class="line">      <span class="token function">print</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">&quot;Exception&quot;</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token punctuation">}</span><span class="token keyword">finally</span> <span class="token punctuation">{</span></span>
<span class="line">      <span class="token function">print</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">&quot;finally&quot;</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token punctuation">}</span></span>
<span class="line"></span></code></pre></div><p>不关心具体异常，只想捕获，避免异常继续传递，则可以使用<code>try...catch</code>处理</p><div class="language-dart" data-highlighter="prismjs" data-ext="dart" data-title="dart"><pre><code><span class="line">  <span class="token keyword">try</span> <span class="token punctuation">{</span></span>
<span class="line">      <span class="token function">print</span><span class="token punctuation">(</span><span class="token number">11</span><span class="token operator">~/</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token punctuation">}</span> <span class="token keyword">catch</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span><span class="token punctuation">{</span></span>
<span class="line">      <span class="token comment">// 打印报错信息</span></span>
<span class="line">      <span class="token function">print</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token punctuation">}</span><span class="token keyword">finally</span> <span class="token punctuation">{</span></span>
<span class="line">      <span class="token function">print</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">&quot;finally&quot;</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token punctuation">}</span></span>
<span class="line"></span></code></pre></div><p>如果想获取更多异常信息，可以使用两个参数的<code>catch</code>，第二个参数是异常的调用栈信息</p><div class="language-dart" data-highlighter="prismjs" data-ext="dart" data-title="dart"><pre><code><span class="line">  <span class="token keyword">try</span> <span class="token punctuation">{</span></span>
<span class="line">      <span class="token function">print</span><span class="token punctuation">(</span><span class="token number">11</span><span class="token operator">~/</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token punctuation">}</span> <span class="token keyword">catch</span><span class="token punctuation">(</span>e<span class="token punctuation">,</span>s<span class="token punctuation">)</span><span class="token punctuation">{</span></span>
<span class="line">      <span class="token function">print</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token punctuation">}</span></span>
<span class="line"></span></code></pre></div><p>如果你既想针对不同异常进行不同处理，还想打印调用栈信息，那就将两种结合起来使用</p><div class="language-dart" data-highlighter="prismjs" data-ext="dart" data-title="dart"><pre><code><span class="line">  <span class="token keyword">try</span> <span class="token punctuation">{</span></span>
<span class="line">      <span class="token function">print</span><span class="token punctuation">(</span><span class="token number">11</span><span class="token operator">~/</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token punctuation">}</span> <span class="token keyword">on</span> <span class="token class-name">IntegerDivisionByZeroException</span> <span class="token keyword">catch</span><span class="token punctuation">(</span>e<span class="token punctuation">,</span>s<span class="token punctuation">)</span><span class="token punctuation">{</span></span>
<span class="line">      <span class="token function">print</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token punctuation">}</span> <span class="token keyword">on</span> <span class="token class-name">Exception</span> <span class="token keyword">catch</span><span class="token punctuation">(</span>e<span class="token punctuation">,</span>s<span class="token punctuation">)</span><span class="token punctuation">{</span></span>
<span class="line">      <span class="token function">print</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token punctuation">}</span></span>
<span class="line"></span></code></pre></div><h2 id="库与导入" tabindex="-1"><a class="header-anchor" href="#库与导入"><span>库与导入</span></a></h2><p>Dart使用<code>import</code>语句用来导入一个库，后面跟一个字符串形式的Uri来指定表示要引用的库。</p><div class="language-dart" data-highlighter="prismjs" data-ext="dart" data-title="dart"><pre><code><span class="line"><span class="token comment">// 指定dart:前缀，表示导入标准库，如dart:io</span></span>
<span class="line"><span class="token keyword">import</span> <span class="token string-literal"><span class="token string">&#39;dart:math&#39;</span></span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">// 也可以用相对路径或绝对路径来引用dart文件</span></span>
<span class="line"><span class="token keyword">import</span> <span class="token string-literal"><span class="token string">&#39;lib/student/student.dart&#39;</span></span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">// 指定package:前缀，表示导入包管理系统中的库</span></span>
<span class="line"><span class="token keyword">import</span> <span class="token string-literal"><span class="token string">&#39;package:utils/utils.dart&#39;</span></span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre></div><p>导入库时，可以使用<code>as</code>关键字来给库起别名，避免命名空间冲突。</p><div class="language-dart" data-highlighter="prismjs" data-ext="dart" data-title="dart"><pre><code><span class="line"><span class="token keyword">import</span> <span class="token string-literal"><span class="token string">&#39;package:lib1/lib1.dart&#39;</span></span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">import</span> <span class="token string-literal"><span class="token string">&#39;package:lib2/lib2.dart&#39;</span></span> <span class="token operator">as</span> lib2<span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">// 使用lib1中的Element</span></span>
<span class="line"><span class="token class-name">Element</span> element1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Element</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token comment">// 使用lib2中的Element</span></span>
<span class="line"><span class="token class-name"><span class="token namespace">lib2<span class="token punctuation">.</span></span>Element</span> element2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name"><span class="token namespace">lib2<span class="token punctuation">.</span></span>Element</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> </span>
<span class="line"></span></code></pre></div><p>使用<code>show</code>和<code>hide</code>关键字控制库中成员的可见性</p><div class="language-dart" data-highlighter="prismjs" data-ext="dart" data-title="dart"><pre><code><span class="line"><span class="token comment">// 仅导入foo，屏蔽库中其他成员</span></span>
<span class="line"><span class="token keyword">import</span> <span class="token string-literal"><span class="token string">&#39;package:lib1/lib1.dart&#39;</span></span> <span class="token keyword">show</span> foo<span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">// 屏蔽foo，库中其他成员都可见</span></span>
<span class="line"><span class="token keyword">import</span> <span class="token string-literal"><span class="token string">&#39;package:lib2/lib2.dart&#39;</span></span> <span class="token keyword">hide</span> foo<span class="token punctuation">;</span></span>
<span class="line"></span></code></pre></div><p>为了减少 APP 的启动时间，加载很少使用的功能，我们还可以延迟导入库。使用 <code>deferred as</code>关键字延迟导入</p><div class="language-dart" data-highlighter="prismjs" data-ext="dart" data-title="dart"><pre><code><span class="line"><span class="token keyword">import</span> <span class="token string-literal"><span class="token string">&#39;package:deferred/hello.dart&#39;</span></span> <span class="token keyword">deferred</span> <span class="token operator">as</span> hello<span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">// 当需要使用时，再通过库标识符调用 loadLibrary函数加载</span></span>
<span class="line">hello<span class="token punctuation">.</span><span class="token function">loadLibrary</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre></div><h2 id="异步编程" tabindex="-1"><a class="header-anchor" href="#异步编程"><span>异步编程</span></a></h2><p>Dart与JavaScript一样，是一个单线程模型。但这并不意味着Dart中不能进行异步编程，只是这种异步编程区别于传统的多线程异步方式。</p><p>Dart中的所有代码都只在一个线程上运行，但Dart代码可以运行在多个<strong>isolate</strong>上。<strong>isolate</strong>可以看做一个微小的线程，<strong>isolate</strong>由虚拟机调度，<strong>isolate</strong>之间没有共享内存，因此它们之间没有竞争，不需要锁，不用担心死锁，因此开销小，性能高。由于没有共享内存，所以它们之间唯一的通信只能通过Port进行，而且Dart中的消息传递也总是异步的。</p><p>Dart中两种方式可以使用<code>Future</code>对象来进行异步编程</p><ul><li>使用 <code>async</code> 和 <code>await</code>关键字</li><li>使用 Future API</li></ul><p>使用<code>async</code>和<code>await</code>编写代码非常简单，而且编写的代码看起来有点像同步代码，实际上是异步的。</p><div class="language-dart line-numbers-mode" data-highlighter="prismjs" data-ext="dart" data-title="dart"><pre><code><span class="line"><span class="token comment">// 导入io库，调用sleep函数</span></span>
<span class="line"><span class="token keyword">import</span> <span class="token string-literal"><span class="token string">&#39;dart:io&#39;</span></span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">// 模拟耗时操作，调用sleep函数睡眠2秒</span></span>
<span class="line"><span class="token function">doTask</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">async</span><span class="token punctuation">{</span></span>
<span class="line">  <span class="token keyword">await</span> <span class="token function">sleep</span><span class="token punctuation">(</span><span class="token keyword">const</span> <span class="token class-name">Duration</span><span class="token punctuation">(</span>seconds<span class="token punctuation">:</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token keyword">return</span> <span class="token string-literal"><span class="token string">&quot;Ok&quot;</span></span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">// 定义一个函数用于包装</span></span>
<span class="line"><span class="token function">test</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">async</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token keyword">var</span> r <span class="token operator">=</span> <span class="token keyword">await</span> <span class="token function">doTask</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token function">print</span><span class="token punctuation">(</span>r<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span></span>
<span class="line">  <span class="token function">print</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">&quot;main start&quot;</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token function">test</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token function">print</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">&quot;main end&quot;</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>运行结果：</p><div class="language-text" data-highlighter="prismjs" data-ext="text" data-title="text"><pre><code><span class="line">main start</span>
<span class="line">main end</span>
<span class="line">Ok</span>
<span class="line"></span></code></pre></div><p>在函数签名中加入<code>async</code>关键字，表示该函数异步执行，<code>await</code>表示等待异步结果执行完成返回<code>Future</code>对象。但有一点需要注意，<code>await</code>只能在<code>async</code>函数中出现，因此往往需要再定义一个<code>async</code>函数，用于包装。上述代码中<code>test</code>函数就是用于包装。</p>`,89)]))}const u=s(c,[["render",l]]),r=JSON.parse('{"path":"/flutter-tutor/dart/dart-class.html","title":"dart基础2","lang":"zh-CN","frontmatter":{"order":2,"description":"dart基础2 类和对象 类的定义 Dart中的类与Java中的相似，不同的是，Dart中没有private、public这些成员访问修饰符。如果是类私有的成员，不希望外面访问，只需要在成员变量之前加上一个下划线_变为私有即可。 以上代码，在Dart中还有一种简化写法，可以自动在构造方法中对成员变量初始化。 另外还需要注意一点，Dart中没有构造方法的...","head":[["meta",{"property":"og:url","content":"https://yzqdev.github.io/cs-guide/cs-guide/flutter-tutor/dart/dart-class.html"}],["meta",{"property":"og:site_name","content":"cs-guide"}],["meta",{"property":"og:title","content":"dart基础2"}],["meta",{"property":"og:description","content":"dart基础2 类和对象 类的定义 Dart中的类与Java中的相似，不同的是，Dart中没有private、public这些成员访问修饰符。如果是类私有的成员，不希望外面访问，只需要在成员变量之前加上一个下划线_变为私有即可。 以上代码，在Dart中还有一种简化写法，可以自动在构造方法中对成员变量初始化。 另外还需要注意一点，Dart中没有构造方法的..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2023-06-25T05:00:38.000Z"}],["meta",{"property":"article:modified_time","content":"2023-06-25T05:00:38.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"dart基础2\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2023-06-25T05:00:38.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"yzqdev\\",\\"url\\":\\"http://www.yzqdev.top\\"}]}"]]},"headers":[{"level":2,"title":"类和对象","slug":"类和对象","link":"#类和对象","children":[{"level":3,"title":"类的定义","slug":"类的定义","link":"#类的定义","children":[]},{"level":3,"title":"Getters 和 Setters方法","slug":"getters-和-setters方法","link":"#getters-和-setters方法","children":[]},{"level":3,"title":"构造方法","slug":"构造方法","link":"#构造方法","children":[{"level":4,"title":"命名构造方法","slug":"命名构造方法","link":"#命名构造方法","children":[]},{"level":4,"title":"常量构造方法","slug":"常量构造方法","link":"#常量构造方法","children":[]},{"level":4,"title":"工厂构造方法","slug":"工厂构造方法","link":"#工厂构造方法","children":[]},{"level":4,"title":"构造方法重定向","slug":"构造方法重定向","link":"#构造方法重定向","children":[]}]},{"level":3,"title":"类的初始化列表","slug":"类的初始化列表","link":"#类的初始化列表","children":[]},{"level":3,"title":"运算符重载","slug":"运算符重载","link":"#运算符重载","children":[]},{"level":3,"title":"类的继承","slug":"类的继承","link":"#类的继承","children":[]},{"level":3,"title":"接口抽象","slug":"接口抽象","link":"#接口抽象","children":[{"level":4,"title":"抽象类","slug":"抽象类","link":"#抽象类","children":[]},{"level":4,"title":"隐式接口","slug":"隐式接口","link":"#隐式接口","children":[]}]}]},{"level":2,"title":"泛型","slug":"泛型","link":"#泛型","children":[]},{"level":2,"title":"异常处理","slug":"异常处理","link":"#异常处理","children":[]},{"level":2,"title":"库与导入","slug":"库与导入","link":"#库与导入","children":[]},{"level":2,"title":"异步编程","slug":"异步编程","link":"#异步编程","children":[]}],"git":{"createdTime":1684738995000,"updatedTime":1687669238000,"contributors":[{"name":"yzqdev","username":"yzqdev","email":"yzqdev@outlook.com","commits":2,"url":"https://github.com/yzqdev"}]},"readingTime":{"minutes":9.83,"words":2948},"filePathRelative":"flutter-tutor/dart/dart-class.md","localizedDate":"2023年5月22日","autoDesc":true}');export{u as comp,r as data};
