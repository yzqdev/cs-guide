import{_ as n,c as s,a as e,o as t}from"./app-C8DxhDIZ.js";const o={};function l(p,a){return t(),s("div",null,a[0]||(a[0]=[e(`<h1 id="该什么时候使用-threadlocal变量-它是如何工作的" tabindex="-1"><a class="header-anchor" href="#该什么时候使用-threadlocal变量-它是如何工作的"><span>该什么时候使用 ThreadLocal变量，它是如何工作的？</span></a></h1><h3 id="回答1" tabindex="-1"><a class="header-anchor" href="#回答1"><span>回答1</span></a></h3><p>一种可能的（也是常见的）使用情形是你不想通过同步方式（synchronized）访问非线程安全的对象（说的就是SimpleDateFormat）,而是想给每个线程一个对象实例的时候。 例如</p><div class="language-java line-numbers-mode" data-highlighter="prismjs" data-ext="java" data-title="java"><pre><code><span class="line"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Foo</span></span>
<span class="line"><span class="token punctuation">{</span></span>
<span class="line">    <span class="token comment">// SimpleDateFormat is not thread-safe, so give one to each thread</span></span>
<span class="line">    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token class-name">ThreadLocal</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">SimpleDateFormat</span><span class="token punctuation">&gt;</span></span> formatter <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ThreadLocal</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">SimpleDateFormat</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span></span>
<span class="line">        <span class="token annotation punctuation">@Override</span></span>
<span class="line">        <span class="token keyword">protected</span> <span class="token class-name">SimpleDateFormat</span> <span class="token function">initialValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line">        <span class="token punctuation">{</span></span>
<span class="line">            <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">SimpleDateFormat</span><span class="token punctuation">(</span><span class="token string">&quot;yyyyMMdd HHmm&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token punctuation">}</span></span>
<span class="line">    <span class="token punctuation">}</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">formatIt</span><span class="token punctuation">(</span><span class="token class-name">Date</span> date<span class="token punctuation">)</span></span>
<span class="line">    <span class="token punctuation">{</span></span>
<span class="line">        <span class="token keyword">return</span> formatter<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">format</span><span class="token punctuation">(</span>date<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="回答2" tabindex="-1"><a class="header-anchor" href="#回答2"><span>回答2</span></a></h3><p>因为ThreadLocal是一个既定线程内部的数据引用，你可能在使用线程池的应用服务器上因此引起类加载时候的内存泄漏。你需要使用remove()方法很小心地清理TheadLocal中get()或者set()的变量。 如果程序执行完毕没有清理的话，它持有的任何对类的引用将作为部署的Web应用程序的一部分仍保持在永久堆，永远无法得到回收。重新部署/取消部署也无法清理对应用程序类的引用，因为线程不是被你的应用程序所拥有的。 每次成功部署都会创建一个永远不会被垃圾回收类的实例。</p><p>最后将会遇到内存不足的异常-java.lang.java.lang.OutOfMemoryError: PermGen space -XX:MaxPermSize，在google了很多答案之后你可能只是增加了-XX:MaxPermSize，而不是修复这个bug。 倘若你的确遇到这种问题，可以通过<a href="http://www.eclipse.org/mat/" target="_blank" rel="noopener noreferrer">Eclipse&#39;s Memory Analyzer</a>或根据<a href="https://blogs.oracle.com/fkieviet/entry/classloader_leaks_the_dreaded_java" target="_blank" rel="noopener noreferrer">Frank Kieviet&#39;s guide</a> 和 <a href="https://blogs.oracle.com/fkieviet/entry/how_to_fix_the_dreaded" target="_blank" rel="noopener noreferrer">followup</a>来判断哪些线程和类保留了那些引用。</p><p>更新：又发现了<a href="http://avasseur.blogspot.jp/2003/11/threadlocal-and-memory-leaks.html" target="_blank" rel="noopener noreferrer">Alex Vasseur&#39;s blog entry</a>，它帮助我查清楚了一些ThreadLocal的问题。</p><p>stackoverflow链接：<a href="http://stackoverflow.com/questions/817856/when-and-how-should-i-use-a-threadlocal-variable" target="_blank" rel="noopener noreferrer">http://stackoverflow.com/questions/817856/when-and-how-should-i-use-a-threadlocal-variable</a></p>`,9)]))}const r=n(o,[["render",l]]),i=JSON.parse('{"path":"/cs-tips/java-tip/stackoverflow/when-and-how-should-i-use-a-threadlocal-variable.html","title":"该什么时候使用 ThreadLocal变量，它是如何工作的？","lang":"zh-CN","frontmatter":{"description":"该什么时候使用 ThreadLocal变量，它是如何工作的？ 回答1 一种可能的（也是常见的）使用情形是你不想通过同步方式（synchronized）访问非线程安全的对象（说的就是SimpleDateFormat）,而是想给每个线程一个对象实例的时候。 例如 回答2 因为ThreadLocal是一个既定线程内部的数据引用，你可能在使用线程池的应用服务器...","head":[["meta",{"property":"og:url","content":"https://yzqdev.github.io/cs-guide/cs-guide/cs-tips/java-tip/stackoverflow/when-and-how-should-i-use-a-threadlocal-variable.html"}],["meta",{"property":"og:site_name","content":"cs-guide"}],["meta",{"property":"og:title","content":"该什么时候使用 ThreadLocal变量，它是如何工作的？"}],["meta",{"property":"og:description","content":"该什么时候使用 ThreadLocal变量，它是如何工作的？ 回答1 一种可能的（也是常见的）使用情形是你不想通过同步方式（synchronized）访问非线程安全的对象（说的就是SimpleDateFormat）,而是想给每个线程一个对象实例的时候。 例如 回答2 因为ThreadLocal是一个既定线程内部的数据引用，你可能在使用线程池的应用服务器..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2023-05-25T04:34:06.000Z"}],["meta",{"property":"article:modified_time","content":"2023-05-25T04:34:06.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"该什么时候使用 ThreadLocal变量，它是如何工作的？\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2023-05-25T04:34:06.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"yzqdev\\",\\"url\\":\\"http://www.yzqdev.top\\"}]}"]]},"headers":[{"level":3,"title":"回答1","slug":"回答1","link":"#回答1","children":[]},{"level":3,"title":"回答2","slug":"回答2","link":"#回答2","children":[]}],"git":{"createdTime":1684989246000,"updatedTime":1684989246000,"contributors":[{"name":"yzqdev","username":"yzqdev","email":"yzqdev@outlook.com","commits":1,"url":"https://github.com/yzqdev"}]},"readingTime":{"minutes":1.51,"words":453},"filePathRelative":"cs-tips/java-tip/stackoverflow/when-and-how-should-i-use-a-threadlocal-variable.md","localizedDate":"2023年5月25日","autoDesc":true}');export{r as comp,i as data};
