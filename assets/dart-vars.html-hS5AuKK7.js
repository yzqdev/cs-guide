import{_ as s,c as a,a as p,o as t}from"./app-C8DxhDIZ.js";const e="/cs-guide/assets/ffbf539d3c-DeFboXJp.png",l={};function c(o,n){return t(),a("div",null,n[0]||(n[0]=[p(`<h1 id="dart基础1" tabindex="-1"><a class="header-anchor" href="#dart基础1"><span>dart基础1</span></a></h1><h2 id="前言" tabindex="-1"><a class="header-anchor" href="#前言"><span>前言</span></a></h2><p>谷歌推出Flutter跨平台UI框架后，对移动端的开发又产生了新的影响，Flutter采用Dart语言开发，而Flutter为什么选择Dart语言作为唯一的开发语言呢？总的来说，其拥有如下优势</p><ul><li>Dart可基于AOT（Ahead Of Time）编译，即编译成平台的本地代码，运行性能高。</li><li>Dart也可基于JIT（Just In Time）编译，编译快速，可热加载，使开发周期加倍提升（Flutter亚秒级有状态热重载）</li><li>Dart可以更轻松地创建以60fps运行的流畅动画和转场。Dart在没有锁的情况下进行对象分配和垃圾回收</li><li>Dart语法结合Java与JavaScript语法特点，几乎没有令人不适的怪异语法，使Java程序员倍感亲切，快速上手</li></ul><p>通常来说一门语言要么使用AOT编译，编译慢，开发效率低，或者使用JIT编译，在运行时编译，虽然可以热重载，但是执行效率低，而Dart在这两种之间做出了完美平衡，当开发时使用JIT编译，调试快，所见即所得，开发效率高，当发布时，使用AOT编译，编译成目标平台的本地代码，执行效率高。</p><h2 id="安装dart-sdk" tabindex="-1"><a class="header-anchor" href="#安装dart-sdk"><span>安装Dart SDK</span></a></h2><p><a href="https://www.dartlang.org/install" target="_blank" rel="noopener noreferrer">官方下载地址</a> 共有三种SDK版本选择</p><ul><li>Flutter</li><li>Web</li><li>Server</li></ul><p>本章仅作为Dart编程语法学习，这里建议安装<strong>Server</strong>版的SDK，然后选择Windows版本进行下载。</p><h2 id="配置环境变量" tabindex="-1"><a class="header-anchor" href="#配置环境变量"><span>配置环境变量</span></a></h2><p>在Windows上，通过点击下一步即可安装，安装完成后，需将<code>dart-sdk</code>下的的<code>bin</code>目录添加到系统Path环境变量中。这一步骤是通常的命令配置步骤。</p><h2 id="配置-vscode-编辑器" tabindex="-1"><a class="header-anchor" href="#配置-vscode-编辑器"><span>配置 VSCode 编辑器</span></a></h2><p>作为Dart语言的学习，不建议下载笨重的IDE，官方提供支持VSCode 编辑器插件，建议使用VSCode 学习。</p><p>从 <a href="https://code.visualstudio.com/" title="官网下载" target="_blank" rel="noopener noreferrer">官网下载</a> VSCode编辑器，安装完成后，启动VSCode并在插件商店中搜索Dart进行插件安装。</p><h2 id="测试环境" tabindex="-1"><a class="header-anchor" href="#测试环境"><span>测试环境</span></a></h2><p>在VSCode中新建一个<code>test.dart</code>文件，编写如下代码</p><div class="language-dart" data-highlighter="prismjs" data-ext="dart" data-title="dart"><pre><code><span class="line"><span class="token keyword">void</span>  <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span></span>
<span class="line">    <span class="token function">print</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">&quot;hello world!&quot;</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre></div><p>运行后成功在控制台输出<code>hello world!</code></p><h1 id="基础语法" tabindex="-1"><a class="header-anchor" href="#基础语法"><span>基础语法</span></a></h1><h2 id="代码注释" tabindex="-1"><a class="header-anchor" href="#代码注释"><span>代码注释</span></a></h2><p>Dart中的代码注释基本与Java语言相同</p><div class="language-dart" data-highlighter="prismjs" data-ext="dart" data-title="dart"><pre><code><span class="line"><span class="token comment">// 单行注释</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">/*</span>
<span class="line"> * 多行注释</span>
<span class="line"> */</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">/**</span>
<span class="line"> * 文档注释</span>
<span class="line"> */</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">/// 使用三个斜杠开头</span></span>
<span class="line"><span class="token comment">/// 这是Dart特有的文档注释</span></span>
<span class="line"></span></code></pre></div><h2 id="内置数据类型" tabindex="-1"><a class="header-anchor" href="#内置数据类型"><span>内置数据类型</span></a></h2><p><img src="`+e+`" alt="a287c6f600"></p><blockquote><p>在Dart中，所有能够使用变量引用的都是对象，每个对象都是一个类的实例。数字、函数和 <code>null</code> 也都是对象。所有的对象都继承于Object类。</p></blockquote><p>要注意，没有初始化的变量默认值为 <code>null</code>。数值类型变量的默认值也是 <code>null</code>。</p><p>数值类型<code>num</code>有两个具体子类，分别为<code>int</code>和<code>double</code>，其中<code>int</code>为整数值，范围是<code>-2^53</code>至<code>2^53</code>之间；<code>double</code>则是64位的双精度浮点数。</p><h2 id="变量与常量" tabindex="-1"><a class="header-anchor" href="#变量与常量"><span>变量与常量</span></a></h2><h3 id="定义变量" tabindex="-1"><a class="header-anchor" href="#定义变量"><span>定义变量</span></a></h3><p>Dart中定义变量有两种方式，一种是静态类型语言常用的方式，显式指定变量类型，另一种则是动态语言的常用方式，不指定类型，由vm自动推断。</p><div class="language-dart" data-highlighter="prismjs" data-ext="dart" data-title="dart"><pre><code><span class="line"><span class="token comment">// 1.通过显式指定类型来定义变量</span></span>
<span class="line"><span class="token class-name">String</span> name <span class="token operator">=</span> <span class="token string-literal"><span class="token string">&quot;张三&quot;</span></span><span class="token punctuation">;</span></span>
<span class="line">num age <span class="token operator">=</span> <span class="token number">18</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">// 2.使用关键字var，不指定类型</span></span>
<span class="line"><span class="token keyword">var</span> address <span class="token operator">=</span> <span class="token string-literal"><span class="token string">&quot;深南大道&quot;</span></span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">var</span> id <span class="token operator">=</span> <span class="token number">100</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">/* 使用var定义变量，即使未显式指定类型，一旦赋值后类型就被固定</span>
<span class="line"> * 因此使用var定义的变量不能改变数据类型</span>
<span class="line"> */</span></span>
<span class="line"><span class="token keyword">var</span> number <span class="token operator">=</span> <span class="token number">19</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token comment">// 以下代码错误，无法运行，number变量已确定为int类型</span></span>
<span class="line">number <span class="token operator">=</span> <span class="token string-literal"><span class="token string">&quot;2019&quot;</span></span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre></div><p>如想动态改变变量的数据类型，应当使用<code>dynamic</code>或<code>Object</code>来定义变量。</p><div class="language-dart" data-highlighter="prismjs" data-ext="dart" data-title="dart"><pre><code><span class="line"><span class="token comment">// dynamic声明变量</span></span>
<span class="line"><span class="token keyword">dynamic</span> var1 <span class="token operator">=</span> <span class="token string-literal"><span class="token string">&quot;hello&quot;</span></span><span class="token punctuation">;</span></span>
<span class="line">var1 <span class="token operator">=</span> <span class="token number">19</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token function">print</span><span class="token punctuation">(</span>var1<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// 19</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">// Object声明变量</span></span>
<span class="line"><span class="token class-name">Object</span> var2 <span class="token operator">=</span> <span class="token number">20</span><span class="token punctuation">;</span></span>
<span class="line">var2 <span class="token operator">=</span> <span class="token string-literal"><span class="token string">&quot;Alice&quot;</span></span><span class="token punctuation">;</span></span>
<span class="line"><span class="token function">print</span><span class="token punctuation">(</span>var2<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// Alice</span></span>
<span class="line"></span></code></pre></div><p>建议在编写代码时，尽可能显式指定变量类型，这样可以提升代码可读性与调试的便利性。</p><h3 id="定义常量" tabindex="-1"><a class="header-anchor" href="#定义常量"><span>定义常量</span></a></h3><p>Dart中定义常量也有两种方式，一种使用<code>final</code>关键字，同Java中的用法， 一个 final 变量只能赋值一次；另一种是Dart的方式，使用<code>const</code>关键字定义。</p><div class="language-dart" data-highlighter="prismjs" data-ext="dart" data-title="dart"><pre><code><span class="line"><span class="token comment">// 1.使用final关键字定义常量</span></span>
<span class="line"><span class="token keyword">final</span> height <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">// 2.使用const关键字定义常量</span></span>
<span class="line"><span class="token keyword">const</span> pi <span class="token operator">=</span> <span class="token number">3.14</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre></div><p>需要注意，<code>final</code>定义的常量是运行时常量，而<code>const</code>常量则是编译时常量，也就是说<code>final</code>定义常量时，其值可以是一个变量，而<code>const</code>定义的常量，其值必须是一个字面常量值。</p><div class="language-dart" data-highlighter="prismjs" data-ext="dart" data-title="dart"><pre><code><span class="line"><span class="token keyword">final</span> time <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">DateTime</span><span class="token punctuation">.</span><span class="token function">now</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 正确</span></span>
<span class="line"><span class="token keyword">const</span> time <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">DateTime</span><span class="token punctuation">.</span><span class="token function">now</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 错误</span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"><span class="token keyword">const</span> list <span class="token operator">=</span> <span class="token keyword">const</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">;</span>       <span class="token comment">// 正确</span></span>
<span class="line"><span class="token keyword">const</span> list <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">;</span>            <span class="token comment">// 错误</span></span>
<span class="line"></span></code></pre></div><h2 id="内置类型的常用操作" tabindex="-1"><a class="header-anchor" href="#内置类型的常用操作"><span>内置类型的常用操作</span></a></h2><h3 id="数值类型" tabindex="-1"><a class="header-anchor" href="#数值类型"><span>数值类型</span></a></h3><div class="language-dart line-numbers-mode" data-highlighter="prismjs" data-ext="dart" data-title="dart"><pre><code><span class="line"><span class="token comment">// String 转 int</span></span>
<span class="line"><span class="token keyword">var</span> one <span class="token operator">=</span> int<span class="token punctuation">.</span><span class="token function">parse</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">&#39;1&#39;</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">// String 转 double</span></span>
<span class="line"><span class="token keyword">var</span> onePointOne <span class="token operator">=</span> double<span class="token punctuation">.</span><span class="token function">parse</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">&#39;1.1&#39;</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">// int 转 String</span></span>
<span class="line"><span class="token class-name">String</span> oneAsStr <span class="token operator">=</span> <span class="token number">1.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">// double 转 String</span></span>
<span class="line"><span class="token class-name">String</span> piAsStr <span class="token operator">=</span> <span class="token number">3.14159</span><span class="token punctuation">.</span><span class="token function">toStringAsFixed</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 保留两位 &#39;3.14&#39;</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">// Dart也支持整数位操作，&lt;&lt;、 &gt;&gt;、&amp;、|</span></span>
<span class="line"><span class="token function">print</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token number">3</span> <span class="token operator">&lt;&lt;</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">6</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// 0011 &lt;&lt; 1 == 0110</span></span>
<span class="line"><span class="token function">print</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token number">3</span> <span class="token operator">&gt;&gt;</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// 0011 &gt;&gt; 1 == 0001</span></span>
<span class="line"><span class="token function">print</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token number">3</span> <span class="token operator">|</span> <span class="token number">4</span><span class="token punctuation">)</span>  <span class="token operator">==</span> <span class="token number">7</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// 0011 | 0100 == 0111</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="字符串" tabindex="-1"><a class="header-anchor" href="#字符串"><span>字符串</span></a></h3><blockquote><p>值得一提的是，Dart中提供的字符串<code>插值表达式</code>使字符串格式化变得异常方便。</p></blockquote><div class="language-dart line-numbers-mode" data-highlighter="prismjs" data-ext="dart" data-title="dart"><pre><code><span class="line"><span class="token comment">// 1.Dart可以使用单引号或双引号来创建字符串</span></span>
<span class="line"><span class="token keyword">var</span> s1 <span class="token operator">=</span> <span class="token string-literal"><span class="token string">&quot;hello&quot;</span></span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">var</span> s2 <span class="token operator">=</span> <span class="token string-literal"><span class="token string">&#39;world&#39;</span></span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">// 2.类似Python，Dart可以使用三引号来创建包含多行的字符串</span></span>
<span class="line"><span class="token keyword">var</span> multiLine1 <span class="token operator">=</span> <span class="token string-literal"><span class="token string">&quot;&quot;&quot;你可以像这样，创建一个</span>
<span class="line">包含了多行的字符串内容</span>
<span class="line">&quot;&quot;&quot;</span></span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">var</span> multiLine2 <span class="token operator">=</span> <span class="token string-literal"><span class="token string">&#39;&#39;&#39;你也可以使用三个单引号，创建一个</span>
<span class="line">包含了多行的字符串内容</span>
<span class="line">&#39;&#39;&#39;</span></span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">// 3.类似Python，还可以在字符串字面值的前面加上\`r\`来创建原始字符串，则该字符串中特殊字符可以不用转义</span></span>
<span class="line"><span class="token keyword">var</span> path <span class="token operator">=</span> <span class="token string-literal"><span class="token string">r&#39;D:\\workspace\\code&#39;</span></span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">// 4.Dart支持使用&quot;+&quot;操作符拼接字符串</span></span>
<span class="line"><span class="token keyword">var</span> greet <span class="token operator">=</span> <span class="token string-literal"><span class="token string">&quot;hello&quot;</span></span> <span class="token operator">+</span> <span class="token string-literal"><span class="token string">&quot; world&quot;</span></span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">// 5.Dart提供了插值表达式&quot;\${}&quot;，也可以用于拼接字符串</span></span>
<span class="line"><span class="token keyword">var</span> name <span class="token operator">=</span> <span class="token string-literal"><span class="token string">&quot;王五&quot;</span></span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">var</span> aStr <span class="token operator">=</span> <span class="token string-literal"><span class="token string">&quot;hello,</span><span class="token interpolation"><span class="token punctuation">\${</span><span class="token expression">name</span><span class="token punctuation">}</span></span><span class="token string">&quot;</span></span><span class="token punctuation">;</span></span>
<span class="line"><span class="token function">print</span><span class="token punctuation">(</span>aStr<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// hello,王五</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">// 当仅取变量值时，可以省略花括号</span></span>
<span class="line"><span class="token keyword">var</span> aStr2 <span class="token operator">=</span> <span class="token string-literal"><span class="token string">&quot;hello,</span><span class="token interpolation"><span class="token punctuation">$</span><span class="token expression">name</span></span><span class="token string">&quot;</span></span><span class="token punctuation">;</span> <span class="token comment">// hello,王五</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">// 当拼接的是一个表达式时，则不能省略花括号</span></span>
<span class="line"><span class="token keyword">var</span> str1 <span class="token operator">=</span> <span class="token string-literal"><span class="token string">&quot;link&quot;</span></span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">var</span> str2 <span class="token operator">=</span> <span class="token string-literal"><span class="token string">&quot;click </span><span class="token interpolation"><span class="token punctuation">\${</span><span class="token expression">str1<span class="token punctuation">.</span><span class="token function">toUpperCase</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span><span class="token punctuation">}</span></span><span class="token string">&quot;</span></span><span class="token punctuation">;</span></span>
<span class="line"><span class="token function">print</span><span class="token punctuation">(</span>str2<span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment">// click LINK</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">// 6. 与Java不同，Dart使用&quot;==&quot;来比较字符串的内容</span></span>
<span class="line"><span class="token function">print</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">&quot;hello&quot;</span></span> <span class="token operator">==</span> <span class="token string-literal"><span class="token string">&quot;world&quot;</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="布尔类型" tabindex="-1"><a class="header-anchor" href="#布尔类型"><span>布尔类型</span></a></h3><blockquote><p>Dart中的布尔类型用法同Java，仅有<code>false</code>、<code>true</code>两个值，不能使用0、非0或者<code>null</code>、非<code>null</code>来表达<code>false</code>和<code>true</code>。与Java不同的是，布尔类型的默认值为<code>null</code></p></blockquote><div class="language-dart" data-highlighter="prismjs" data-ext="dart" data-title="dart"><pre><code><span class="line">bool flags<span class="token punctuation">;</span></span>
<span class="line"><span class="token function">print</span><span class="token punctuation">(</span>flags<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// null</span></span>
<span class="line"></span></code></pre></div><h3 id="列表" tabindex="-1"><a class="header-anchor" href="#列表"><span>列表</span></a></h3><p>Dart中列表操作与JavaScript中的数组相似。</p><div class="language-dart" data-highlighter="prismjs" data-ext="dart" data-title="dart"><pre><code><span class="line"><span class="token comment">// 创建列表</span></span>
<span class="line"><span class="token keyword">var</span> list <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token comment">// 下标从0开始。使用length可以访问list的长度</span></span>
<span class="line"><span class="token function">print</span><span class="token punctuation">(</span>list<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token function">print</span><span class="token punctuation">(</span>list<span class="token punctuation">.</span>length<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">// 可以使用add添加元素</span></span>
<span class="line">list<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">// 可在list字面量前添加const关键字，定义一个不可改变的 列表（编译时常量）</span></span>
<span class="line"><span class="token keyword">var</span> constantList <span class="token operator">=</span> <span class="token keyword">const</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">;</span></span>
<span class="line">constantList<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>     <span class="token comment">// 报错</span></span>
<span class="line"></span></code></pre></div><h3 id="映射" tabindex="-1"><a class="header-anchor" href="#映射"><span>映射</span></a></h3><p>又称为关联数组，相当于Java中的<code>HashMap</code></p><div class="language-dart line-numbers-mode" data-highlighter="prismjs" data-ext="dart" data-title="dart"><pre><code><span class="line"><span class="token comment">// 1.通过字面量创建Map</span></span>
<span class="line"><span class="token keyword">var</span> gifts <span class="token operator">=</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token string-literal"><span class="token string">&#39;first&#39;</span></span> <span class="token punctuation">:</span> <span class="token string-literal"><span class="token string">&#39;partridge&#39;</span></span><span class="token punctuation">,</span></span>
<span class="line">  <span class="token string-literal"><span class="token string">&#39;second&#39;</span></span><span class="token punctuation">:</span> <span class="token string-literal"><span class="token string">&#39;turtledoves&#39;</span></span><span class="token punctuation">,</span></span>
<span class="line">  <span class="token string-literal"><span class="token string">&#39;fifth&#39;</span></span> <span class="token punctuation">:</span> <span class="token string-literal"><span class="token string">&#39;golden rings&#39;</span></span></span>
<span class="line"><span class="token punctuation">}</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">// 2.使用Map类的构造函数创建对象</span></span>
<span class="line"><span class="token keyword">var</span> pic <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Map</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token comment">// 往Map中添加键值对</span></span>
<span class="line">pic<span class="token punctuation">[</span><span class="token string-literal"><span class="token string">&#39;first&#39;</span></span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string-literal"><span class="token string">&#39;partridge&#39;</span></span><span class="token punctuation">;</span></span>
<span class="line">pic<span class="token punctuation">[</span><span class="token string-literal"><span class="token string">&#39;second&#39;</span></span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string-literal"><span class="token string">&#39;turtledoves&#39;</span></span><span class="token punctuation">;</span></span>
<span class="line">pic<span class="token punctuation">[</span><span class="token string-literal"><span class="token string">&#39;fifth&#39;</span></span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string-literal"><span class="token string">&#39;golden rings&#39;</span></span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">// 3.获取Map的长度</span></span>
<span class="line"><span class="token function">print</span><span class="token punctuation">(</span>pic<span class="token punctuation">.</span>length<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">// 4.查找Map</span></span>
<span class="line"><span class="token function">pirnt</span><span class="token punctuation">(</span>pic<span class="token punctuation">[</span><span class="token string-literal"><span class="token string">&quot;first&quot;</span></span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token function">print</span><span class="token punctuation">(</span>pic<span class="token punctuation">[</span><span class="token string-literal"><span class="token string">&quot;four&quot;</span></span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// 键不存在则返回 null</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="函数" tabindex="-1"><a class="header-anchor" href="#函数"><span>函数</span></a></h2><blockquote><p>在Dart中，函数（或方法） 也是对象，它的类型是 <code>Function</code>。 这意味着，函数可以赋值给变量，也可以当做其他函数的参数。</p></blockquote><h3 id="定义函数" tabindex="-1"><a class="header-anchor" href="#定义函数"><span>定义函数</span></a></h3><p>Dart中定义函数，基本上与Java类似</p><div class="language-dart" data-highlighter="prismjs" data-ext="dart" data-title="dart"><pre><code><span class="line"><span class="token class-name">String</span> <span class="token function">greet</span><span class="token punctuation">(</span><span class="token class-name">String</span> name<span class="token punctuation">)</span><span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">return</span> <span class="token string-literal"><span class="token string">&quot;hello,</span><span class="token interpolation"><span class="token punctuation">$</span><span class="token expression">name</span></span><span class="token string">&quot;</span></span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre></div><p>在Dart中，类型是可选，可以省略显式的类型，但仍然建议显式指定类型。</p><div class="language-dart" data-highlighter="prismjs" data-ext="dart" data-title="dart"><pre><code><span class="line"><span class="token function">greet</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">return</span> <span class="token string-literal"><span class="token string">&quot;hello,</span><span class="token interpolation"><span class="token punctuation">$</span><span class="token expression">name</span></span><span class="token string">&quot;</span></span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre></div><p>要注意，函数也是对象，所有函数都有返回值。当没有指定返回值的时候，函数会返回<code>null</code>。当然，如果你强行使用<code>void</code>来修饰函数，则函数真的没有返回值，这种情况就另当别论了。</p><h3 id="函数的参数" tabindex="-1"><a class="header-anchor" href="#函数的参数"><span>函数的参数</span></a></h3><p>Dart中支持两种可选参数</p><ul><li>命名可选参数</li><li>位置可选参数</li></ul><p>在Java中通常使用方法重载来实现同名方法的不同参数调用，Dart中则可以通过可选参数来实现相同效果。</p><h4 id="命名可选参数" tabindex="-1"><a class="header-anchor" href="#命名可选参数"><span>命名可选参数</span></a></h4><p>先来看一下<code>命名参数</code>，它使用花括号来定义参数列表</p><div class="language-dart" data-highlighter="prismjs" data-ext="dart" data-title="dart"><pre><code><span class="line"><span class="token comment">// 定义一个函数，参数列表用花括号包裹</span></span>
<span class="line"><span class="token function">enableFlags</span><span class="token punctuation">(</span><span class="token punctuation">{</span>bool bold<span class="token punctuation">,</span> bool hidden<span class="token punctuation">}</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token comment">// do something</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">// 调用方式，传参时使用&quot;参数名:值&quot;的形式</span></span>
<span class="line"><span class="token function">enableFlags</span><span class="token punctuation">(</span>hidden<span class="token punctuation">:</span><span class="token boolean">true</span><span class="token punctuation">,</span>bold<span class="token punctuation">:</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre></div><p>如果在定义函数时，给参数列表中的参数设置默认值，则该参数就是可选的，函数调用时可以忽略该参数，使用默认的值。</p><div class="language-dart" data-highlighter="prismjs" data-ext="dart" data-title="dart"><pre><code><span class="line"><span class="token comment">// 定义add函数</span></span>
<span class="line"><span class="token function">add</span><span class="token punctuation">(</span><span class="token punctuation">{</span>int x<span class="token punctuation">,</span> int y<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">,</span> int z<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">{</span></span>
<span class="line">    <span class="token function">print</span><span class="token punctuation">(</span>x <span class="token operator">+</span> y <span class="token operator">+</span> z<span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">// 调用</span></span>
<span class="line"><span class="token function">add</span><span class="token punctuation">(</span>x<span class="token punctuation">:</span><span class="token number">18</span><span class="token punctuation">)</span><span class="token punctuation">;</span>              <span class="token comment">// 19</span></span>
<span class="line"><span class="token function">add</span><span class="token punctuation">(</span>x<span class="token punctuation">:</span><span class="token number">18</span><span class="token punctuation">,</span> y<span class="token punctuation">:</span><span class="token number">2</span><span class="token punctuation">,</span> z<span class="token punctuation">:</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment">// 30</span></span>
<span class="line"></span></code></pre></div><p>这里需要注意一下，SDK 1.21之前的版本中，命名参数不能使用<code>=</code>号来设置默认值，而SDK 1.21之后，只能使用<code>=</code>号来设置默认值。因此，请检查并升级SDK版本。</p><h4 id="位置可选参数" tabindex="-1"><a class="header-anchor" href="#位置可选参数"><span>位置可选参数</span></a></h4><p><code>位置可选参数</code>使用中括号来定义参数列表，中括号中的参数是可选的</p><div class="language-dart line-numbers-mode" data-highlighter="prismjs" data-ext="dart" data-title="dart"><pre><code><span class="line"><span class="token comment">// 定义add函数</span></span>
<span class="line"><span class="token function">add</span><span class="token punctuation">(</span>int x<span class="token punctuation">,</span> <span class="token punctuation">[</span>int y<span class="token punctuation">,</span> int z<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">{</span></span>
<span class="line">    int result <span class="token operator">=</span> x<span class="token punctuation">;</span></span>
<span class="line">    <span class="token keyword">if</span> <span class="token punctuation">(</span>y <span class="token operator">!=</span>  <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">{</span></span>
<span class="line">        result <span class="token operator">=</span> result <span class="token operator">+</span> y<span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">    <span class="token keyword">if</span> <span class="token punctuation">(</span>z <span class="token operator">!=</span>  <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">{</span></span>
<span class="line">        result <span class="token operator">=</span> result <span class="token operator">+</span> z<span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line">    <span class="token function">print</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">// 调用</span></span>
<span class="line"><span class="token function">add</span><span class="token punctuation">(</span><span class="token number">18</span><span class="token punctuation">)</span><span class="token punctuation">;</span>           <span class="token comment">// 18</span></span>
<span class="line"><span class="token function">add</span><span class="token punctuation">(</span><span class="token number">18</span><span class="token punctuation">,</span><span class="token number">12</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// 30</span></span>
<span class="line"><span class="token function">add</span><span class="token punctuation">(</span><span class="token number">18</span><span class="token punctuation">,</span> <span class="token number">12</span><span class="token punctuation">,</span> <span class="token number">15</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment">// 45</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>给<code>位置可选参数</code>设置默认值</p><div class="language-dart" data-highlighter="prismjs" data-ext="dart" data-title="dart"><pre><code><span class="line"><span class="token comment">// 定义add函数</span></span>
<span class="line"><span class="token function">add</span><span class="token punctuation">(</span>int x<span class="token punctuation">,</span> <span class="token punctuation">[</span>int y<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">,</span> int z<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">{</span></span>
<span class="line">    <span class="token function">print</span><span class="token punctuation">(</span>x <span class="token operator">+</span>ｙ＋ｚ<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre></div><p>最后需要注意一下<code>命名可选参数</code>与<code>位置可选参数</code>的区别，前者中的参数与顺序无关，无需按顺序传参，且传参数时需使用冒号；后者与顺序相关，传参必须依照顺序。</p><h3 id="匿名函数" tabindex="-1"><a class="header-anchor" href="#匿名函数"><span>匿名函数</span></a></h3><blockquote><p>大部分函数都有名字，但我们也可以创建没有名字的函数，称为匿名函数，也被称为lambda表达式或者闭包。</p></blockquote><div class="language-dart" data-highlighter="prismjs" data-ext="dart" data-title="dart"><pre><code><span class="line"><span class="token comment">// 定义匿名函数，并将其赋值给一个变量func，注意，函数体最后的花括号处必须有分号结束。</span></span>
<span class="line"><span class="token keyword">var</span> func <span class="token operator">=</span> <span class="token punctuation">(</span>x<span class="token punctuation">,</span>y<span class="token punctuation">)</span><span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">return</span> x <span class="token operator">+</span> y<span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token function">print</span><span class="token punctuation">(</span><span class="token function">func</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">,</span><span class="token number">11</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// 21</span></span>
<span class="line"></span></code></pre></div><p>注意，匿名函数与普通函数基本相同，也有参数列表，函数体，只是省去了函数名而已。</p><h3 id="箭头函数" tabindex="-1"><a class="header-anchor" href="#箭头函数"><span>箭头函数</span></a></h3><blockquote><p>Dart中的箭头函数与JavaScript中的基本相同。当函数体中只包含一个语句时，我们就可以使用<code>=&gt;</code>箭头语法进行缩写。注意，箭头函数仅仅只是一个简洁表达的语法糖。</p></blockquote><p>普通函数</p><div class="language-dart" data-highlighter="prismjs" data-ext="dart" data-title="dart"><pre><code><span class="line"><span class="token function">add</span><span class="token punctuation">(</span>num x<span class="token punctuation">,</span> num y<span class="token punctuation">)</span><span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">return</span> x <span class="token operator">+</span> y<span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token function">print</span><span class="token punctuation">(</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token number">18</span><span class="token punctuation">,</span><span class="token number">12</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// 30</span></span>
<span class="line"></span></code></pre></div><p>箭头函数</p><div class="language-dart" data-highlighter="prismjs" data-ext="dart" data-title="dart"><pre><code><span class="line"><span class="token comment">// 与上面的普通函数完全等价</span></span>
<span class="line"><span class="token function">add</span><span class="token punctuation">(</span>num x<span class="token punctuation">,</span> num y<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">&gt;</span> x <span class="token operator">+</span> y<span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token function">print</span><span class="token punctuation">(</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token number">18</span><span class="token punctuation">,</span><span class="token number">12</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// 30</span></span>
<span class="line"></span></code></pre></div><p>箭头函数省略了花括号的表达，箭头后面跟一个表达式，函数的返回值也就是这个表达式的值。另外，箭头函数也可以与匿名函数结合，形成匿名箭头函数。</p><div class="language-dart" data-highlighter="prismjs" data-ext="dart" data-title="dart"><pre><code><span class="line"><span class="token keyword">var</span> func <span class="token operator">=</span> <span class="token punctuation">(</span>num x<span class="token punctuation">,</span> num y<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">&gt;</span> x <span class="token operator">+</span> y<span class="token punctuation">;</span></span>
<span class="line"></span></code></pre></div><h2 id="运算符" tabindex="-1"><a class="header-anchor" href="#运算符"><span>运算符</span></a></h2><p>Dart语言中的运算符与Java中的绝大多数相同。</p><h3 id="算术运算符" tabindex="-1"><a class="header-anchor" href="#算术运算符"><span>算术运算符</span></a></h3><p><code>+</code>、<code>-</code>、<code>*</code>、<code>/</code>、<code>%</code>同Java语言</p><p>Dart中又多出了一个整除运算符<code>~/</code>，与普通除号的区别是将相除后的结果取整返回。</p><h3 id="类型判定运算符" tabindex="-1"><a class="header-anchor" href="#类型判定运算符"><span>类型判定运算符</span></a></h3><p>以下是Dart增加的类型相关的运算符。</p><table><thead><tr><th>操作符</th><th>解释</th></tr></thead><tbody><tr><td><code>as</code></td><td>用于类型转换</td></tr><tr><td><code>is</code></td><td>如果对象是指定的类型就返回 True</td></tr><tr><td><code>is!</code></td><td>如果对象不是指定的类型返回 True</td></tr></tbody></table><p>当 <code>obj</code> 实现了 <code>T</code> 的接口时， <code>obj is T</code> 才是 true。类似于Java中的<code>instanceof</code>。</p><p>Dart中使用 <code>as</code> 操作符把对象转换为特定的类型，如无法转换则会抛出异常，因此在转换前最好使用<code>is</code>运算符进行检测。</p><div class="language-dart" data-highlighter="prismjs" data-ext="dart" data-title="dart"><pre><code><span class="line"><span class="token comment">// 将p转换为Person类型再操作</span></span>
<span class="line"><span class="token punctuation">(</span>p <span class="token operator">as</span> <span class="token class-name">Person</span><span class="token punctuation">)</span><span class="token punctuation">.</span>name <span class="token operator">=</span> <span class="token string-literal"><span class="token string">&#39;Bruce&#39;</span></span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre></div><h3 id="条件表达式" tabindex="-1"><a class="header-anchor" href="#条件表达式"><span>条件表达式</span></a></h3><p>Dart中也支持三目表达式 <code>condition ? expr1 : expr2</code></p><p>除此外，Dart还增加了非空条件判断符<code>??</code><code>expr1 ?? expr2</code> 上述运算表示，如果expr1的值不等于<code>null</code>，则返回其值； 否则执行表达式expr2并返回其结果。</p><div class="language-dart" data-highlighter="prismjs" data-ext="dart" data-title="dart"><pre><code><span class="line"><span class="token keyword">var</span> str1 <span class="token operator">=</span>  <span class="token string-literal"><span class="token string">&quot;Hello&quot;</span></span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">var</span> str2 <span class="token operator">=</span>  <span class="token string-literal"><span class="token string">&quot;world&quot;</span></span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">var</span> result <span class="token operator">=</span> str1 <span class="token operator">?</span><span class="token operator">?</span> str2<span class="token punctuation">.</span><span class="token function">toUpperCase</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre></div><h3 id="级联运算符" tabindex="-1"><a class="header-anchor" href="#级联运算符"><span>级联运算符</span></a></h3><blockquote><p>我们通常使用<code>.</code>操作符调用对象的方法，这在Dart中也是支持的，但是Dart另外增加了一种级联运算符<code>..</code>，用两个点表示。</p></blockquote><p><code>级联运算符</code>可以在同一个对象上连续调用多个方法以及访问成员变量。 使用它可以避免创建临时变量， 写出更流畅的代码。</p><p>假如类Person有三个方法，<code>setName</code>、<code>setAge</code>、<code>save</code>，则可如下调用</p><div class="language-dart" data-highlighter="prismjs" data-ext="dart" data-title="dart"><pre><code><span class="line"><span class="token keyword">new</span> <span class="token class-name">Person</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token function">setName</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">&quot;Bob&quot;</span></span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token function">setAge</span><span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token function">save</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre></div><p>使用<code>级联运算符</code>调用方法，无需该方法返回对象本身即可连续的流式的调用该对象的其他方法。</p><h3 id="条件成员访问符" tabindex="-1"><a class="header-anchor" href="#条件成员访问符"><span>条件成员访问符</span></a></h3><blockquote><p>在Java中很容易碰到恼人的空指针错误，因此在方法调用前需要进行对象的非空判断，这样的判断语句使代码变得冗长，可读性差，不整洁。Dart中则发明了一个新的运算符用于处理此类情况。</p></blockquote><p>条件成员访问符<code>?.</code>，它和<code>.</code>类似，但是运算符左边的对象不能为<code>null</code>，否则返回<code>null</code>，若对象不为<code>null</code>，则返回对象本身。</p><div class="language-dart" data-highlighter="prismjs" data-ext="dart" data-title="dart"><pre><code><span class="line"><span class="token comment">// list1默认值为null</span></span>
<span class="line"><span class="token class-name">List</span> list1<span class="token punctuation">;</span></span>
<span class="line"><span class="token function">print</span><span class="token punctuation">(</span>list1<span class="token operator">?</span><span class="token punctuation">.</span>length<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// null</span></span>
<span class="line"></span>
<span class="line"><span class="token class-name">List</span> list2 <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token function">print</span><span class="token punctuation">(</span>list2<span class="token operator">?</span><span class="token punctuation">.</span>length<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// 0</span></span>
<span class="line"></span></code></pre></div><h2 id="分支与循环" tabindex="-1"><a class="header-anchor" href="#分支与循环"><span>分支与循环</span></a></h2><h3 id="条件分支" tabindex="-1"><a class="header-anchor" href="#条件分支"><span>条件分支</span></a></h3><p>Dart中的条件分支基本与Java相同</p><p><code>if</code>条件分支</p><div class="language-dart" data-highlighter="prismjs" data-ext="dart" data-title="dart"><pre><code><span class="line"><span class="token keyword">if</span><span class="token punctuation">(</span>i <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">{</span></span>
<span class="line">  <span class="token function">print</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">&#39;i &lt; 0&#39;</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span><span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>i <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">{</span></span>
<span class="line">  <span class="token function">print</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">&#39;i = 0&#39;</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token function">print</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">&#39;i &gt; 0&#39;</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre></div><p><code>switch</code>条件分支</p><div class="language-dart" data-highlighter="prismjs" data-ext="dart" data-title="dart"><pre><code><span class="line"><span class="token comment">// 在switch的case中可以使用整数、字符串、枚举类型和编译时常量</span></span>
<span class="line"><span class="token class-name">String</span> command <span class="token operator">=</span> <span class="token string-literal"><span class="token string">&#39;OPEN&#39;</span></span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">switch</span> <span class="token punctuation">(</span>command<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token keyword">case</span> <span class="token string-literal"><span class="token string">&#39;CLOSED&#39;</span></span><span class="token punctuation">:</span></span>
<span class="line">    <span class="token keyword">break</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token keyword">case</span> <span class="token string-literal"><span class="token string">&#39;OPEN&#39;</span></span><span class="token punctuation">:</span></span>
<span class="line">    <span class="token keyword">break</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token keyword">default</span><span class="token punctuation">:</span></span>
<span class="line">    <span class="token function">print</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">&#39;Default&#39;</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre></div><h3 id="循环语句" tabindex="-1"><a class="header-anchor" href="#循环语句"><span>循环语句</span></a></h3><h4 id="基本循环" tabindex="-1"><a class="header-anchor" href="#基本循环"><span>基本循环</span></a></h4><p>Dart中的基本循环语句与Java相同</p><div class="language-dart" data-highlighter="prismjs" data-ext="dart" data-title="dart"><pre><code><span class="line"><span class="token comment">// for循环</span></span>
<span class="line"><span class="token keyword">for</span><span class="token punctuation">(</span>int i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">9</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token function">print</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">// while循环</span></span>
<span class="line"><span class="token keyword">while</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">{</span></span>
<span class="line">  <span class="token comment">//do something</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">// do-while循环</span></span>
<span class="line"><span class="token keyword">do</span><span class="token punctuation">{</span></span>
<span class="line">  <span class="token comment">//do something</span></span>
<span class="line"><span class="token punctuation">}</span> <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre></div><h4 id="特有循环" tabindex="-1"><a class="header-anchor" href="#特有循环"><span>特有循环</span></a></h4><div class="language-dart" data-highlighter="prismjs" data-ext="dart" data-title="dart"><pre><code><span class="line"><span class="token keyword">var</span> myList <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string-literal"><span class="token string">&#39;Java&#39;</span></span><span class="token punctuation">,</span><span class="token string-literal"><span class="token string">&#39;JavaScript&#39;</span></span><span class="token punctuation">,</span><span class="token string-literal"><span class="token string">&#39;Dart&#39;</span></span><span class="token punctuation">]</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">// for...in...循环，类似Java中的增强for</span></span>
<span class="line"><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">var</span> it <span class="token keyword">in</span> myList <span class="token punctuation">)</span><span class="token punctuation">{</span></span>
<span class="line">    <span class="token function">print</span><span class="token punctuation">(</span>it<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">// forEach循环。其参数为一个Function对象，这里传入一个匿名函数</span></span>
<span class="line">myList<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">var</span> it<span class="token punctuation">)</span><span class="token punctuation">{</span></span>
<span class="line">    <span class="token function">print</span><span class="token punctuation">(</span>it<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">// 可以使用匿名箭头函数简写</span></span>
<span class="line">myList<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token punctuation">(</span>it<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">&gt;</span> <span class="token function">print</span><span class="token punctuation">(</span>it<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre></div><p>使用循环遍历Map</p><div class="language-dart" data-highlighter="prismjs" data-ext="dart" data-title="dart"><pre><code><span class="line"><span class="token keyword">var</span> myMap <span class="token operator">=</span> <span class="token punctuation">{</span></span>
<span class="line"><span class="token string-literal"><span class="token string">&#39;zhangsan&#39;</span></span><span class="token punctuation">:</span><span class="token string-literal"><span class="token string">&#39;201901&#39;</span></span><span class="token punctuation">,</span></span>
<span class="line"><span class="token string-literal"><span class="token string">&#39;lisi&#39;</span></span><span class="token punctuation">:</span><span class="token string-literal"><span class="token string">&#39;201902&#39;</span></span><span class="token punctuation">,</span></span>
<span class="line"><span class="token string-literal"><span class="token string">&#39;wangwu&#39;</span></span><span class="token punctuation">:</span><span class="token string-literal"><span class="token string">&#39;201902&#39;</span></span></span>
<span class="line"><span class="token punctuation">}</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">// forEach遍历Map</span></span>
<span class="line">myMap<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token punctuation">(</span>k<span class="token punctuation">,</span> v<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">&gt;</span>  <span class="token function">print</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">&quot;</span><span class="token interpolation"><span class="token punctuation">$</span><span class="token expression">k</span></span><span class="token string"> : </span><span class="token interpolation"><span class="token punctuation">$</span><span class="token expression">v</span></span><span class="token string">&quot;</span></span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">// 根据键获取值来遍历。通过keys返回Map中所有键的集合</span></span>
<span class="line"><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">var</span> k <span class="token keyword">in</span> myMap<span class="token punctuation">.</span>keys<span class="token punctuation">)</span><span class="token punctuation">{</span></span>
<span class="line">    <span class="token function">print</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">&quot;</span><span class="token interpolation"><span class="token punctuation">$</span><span class="token expression">k</span></span><span class="token string"> : </span><span class="token interpolation"><span class="token punctuation">\${</span><span class="token expression">myMap<span class="token punctuation">[</span>k<span class="token punctuation">]</span></span><span class="token punctuation">}</span></span><span class="token string">&quot;</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre></div>`,130)]))}const u=s(l,[["render",c]]),r=JSON.parse('{"path":"/flutter-tutor/dart/dart-vars.html","title":"dart基础1","lang":"zh-CN","frontmatter":{"order":1,"description":"dart基础1 前言 谷歌推出Flutter跨平台UI框架后，对移动端的开发又产生了新的影响，Flutter采用Dart语言开发，而Flutter为什么选择Dart语言作为唯一的开发语言呢？总的来说，其拥有如下优势 Dart可基于AOT（Ahead Of Time）编译，即编译成平台的本地代码，运行性能高。 Dart也可基于JIT（Just In Ti...","head":[["meta",{"property":"og:url","content":"https://yzqdev.github.io/cs-guide/cs-guide/flutter-tutor/dart/dart-vars.html"}],["meta",{"property":"og:site_name","content":"cs-guide"}],["meta",{"property":"og:title","content":"dart基础1"}],["meta",{"property":"og:description","content":"dart基础1 前言 谷歌推出Flutter跨平台UI框架后，对移动端的开发又产生了新的影响，Flutter采用Dart语言开发，而Flutter为什么选择Dart语言作为唯一的开发语言呢？总的来说，其拥有如下优势 Dart可基于AOT（Ahead Of Time）编译，即编译成平台的本地代码，运行性能高。 Dart也可基于JIT（Just In Ti..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2023-06-25T05:00:38.000Z"}],["meta",{"property":"article:modified_time","content":"2023-06-25T05:00:38.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"dart基础1\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2023-06-25T05:00:38.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"yzqdev\\",\\"url\\":\\"http://www.yzqdev.top\\"}]}"]]},"headers":[{"level":2,"title":"前言","slug":"前言","link":"#前言","children":[]},{"level":2,"title":"安装Dart SDK","slug":"安装dart-sdk","link":"#安装dart-sdk","children":[]},{"level":2,"title":"配置环境变量","slug":"配置环境变量","link":"#配置环境变量","children":[]},{"level":2,"title":"配置 VSCode 编辑器","slug":"配置-vscode-编辑器","link":"#配置-vscode-编辑器","children":[]},{"level":2,"title":"测试环境","slug":"测试环境","link":"#测试环境","children":[]},{"level":2,"title":"代码注释","slug":"代码注释","link":"#代码注释","children":[]},{"level":2,"title":"内置数据类型","slug":"内置数据类型","link":"#内置数据类型","children":[]},{"level":2,"title":"变量与常量","slug":"变量与常量","link":"#变量与常量","children":[{"level":3,"title":"定义变量","slug":"定义变量","link":"#定义变量","children":[]},{"level":3,"title":"定义常量","slug":"定义常量","link":"#定义常量","children":[]}]},{"level":2,"title":"内置类型的常用操作","slug":"内置类型的常用操作","link":"#内置类型的常用操作","children":[{"level":3,"title":"数值类型","slug":"数值类型","link":"#数值类型","children":[]},{"level":3,"title":"字符串","slug":"字符串","link":"#字符串","children":[]},{"level":3,"title":"布尔类型","slug":"布尔类型","link":"#布尔类型","children":[]},{"level":3,"title":"列表","slug":"列表","link":"#列表","children":[]},{"level":3,"title":"映射","slug":"映射","link":"#映射","children":[]}]},{"level":2,"title":"函数","slug":"函数","link":"#函数","children":[{"level":3,"title":"定义函数","slug":"定义函数","link":"#定义函数","children":[]},{"level":3,"title":"函数的参数","slug":"函数的参数","link":"#函数的参数","children":[{"level":4,"title":"命名可选参数","slug":"命名可选参数","link":"#命名可选参数","children":[]},{"level":4,"title":"位置可选参数","slug":"位置可选参数","link":"#位置可选参数","children":[]}]},{"level":3,"title":"匿名函数","slug":"匿名函数","link":"#匿名函数","children":[]},{"level":3,"title":"箭头函数","slug":"箭头函数","link":"#箭头函数","children":[]}]},{"level":2,"title":"运算符","slug":"运算符","link":"#运算符","children":[{"level":3,"title":"算术运算符","slug":"算术运算符","link":"#算术运算符","children":[]},{"level":3,"title":"类型判定运算符","slug":"类型判定运算符","link":"#类型判定运算符","children":[]},{"level":3,"title":"条件表达式","slug":"条件表达式","link":"#条件表达式","children":[]},{"level":3,"title":"级联运算符","slug":"级联运算符","link":"#级联运算符","children":[]},{"level":3,"title":"条件成员访问符","slug":"条件成员访问符","link":"#条件成员访问符","children":[]}]},{"level":2,"title":"分支与循环","slug":"分支与循环","link":"#分支与循环","children":[{"level":3,"title":"条件分支","slug":"条件分支","link":"#条件分支","children":[]},{"level":3,"title":"循环语句","slug":"循环语句","link":"#循环语句","children":[{"level":4,"title":"基本循环","slug":"基本循环","link":"#基本循环","children":[]},{"level":4,"title":"特有循环","slug":"特有循环","link":"#特有循环","children":[]}]}]}],"git":{"createdTime":1684738995000,"updatedTime":1687669238000,"contributors":[{"name":"yzqdev","username":"yzqdev","email":"yzqdev@outlook.com","commits":2,"url":"https://github.com/yzqdev"}]},"readingTime":{"minutes":12.53,"words":3758},"filePathRelative":"flutter-tutor/dart/dart-vars.md","localizedDate":"2023年5月22日","autoDesc":true}');export{u as comp,r as data};
