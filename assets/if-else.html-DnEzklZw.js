import{_ as n,c as a,a as p,o as e}from"./app-C8DxhDIZ.js";const t={};function l(o,s){return e(),a("div",null,s[0]||(s[0]=[p(`<h1 id="条件语句" tabindex="-1"><a class="header-anchor" href="#条件语句"><span>条件语句</span></a></h1><p>通常都听到别人说，计算机很牛逼，很聪明，其实计算机一点都不聪明，光是你要跟他沟通，都会气 shi 你，聪明的是在写程序的你。</p><p>写程序就是跟计算机沟通，告诉它要做什么。</p><p>竟然是这样，那么肯定缺少不了一些沟通逻辑。比如你要告诉计算机在什么情况下做什么？或者在哪个时间点做什么？</p><p>这都需要用到逻辑判断。这一章节，主要就是说这个。</p><h1 id="目录" tabindex="-1"><a class="header-anchor" href="#目录"><span>目录</span></a></h1><p><img src="http://twowaterimage.oss-cn-beijing.aliyuncs.com/2019-09-09-条件语句和循环语句.png" alt=""></p><h1 id="一、条件语句" tabindex="-1"><a class="header-anchor" href="#一、条件语句"><span>一、条件语句</span></a></h1><h2 id="_1、什么是条件语句" tabindex="-1"><a class="header-anchor" href="#_1、什么是条件语句"><span>1、什么是条件语句</span></a></h2><p>Python 条件语句跟其他语言基本一致的，都是通过一条或多条语句的执行结果（ True 或者 False ）来决定执行的代码块。</p><p>Python 程序语言指定任何非 0 和非空（null）值为 True，0 或者 null 为 False。</p><p>执行的流程图如下：</p><p><img src="http://upload-images.jianshu.io/upload_images/2136918-4ee2486190450a1a?imageMogr2/auto-orient/strip|imageView2/2/w/1240" alt="if语句流程图"></p><h2 id="_2、if-语句的基本形式" tabindex="-1"><a class="header-anchor" href="#_2、if-语句的基本形式"><span>2、if 语句的基本形式</span></a></h2><p>Python 中，if 语句的基本形式如下：</p><div class="language-python" data-highlighter="prismjs" data-ext="py" data-title="py"><pre><code><span class="line"><span class="token keyword">if</span> 判断条件：</span>
<span class="line">    执行语句……</span>
<span class="line"><span class="token keyword">else</span>：</span>
<span class="line">    执行语句……</span>
<span class="line"></span></code></pre></div><p>之前的章节也提到过，Python 语言有着严格的缩进要求，因此这里也需要注意缩进，也不要少写了冒号 <code>:</code> 。</p><p>if 语句的判断条件可以用&gt;（大于）、&lt;(小于)、==（等于）、&gt;=（大于等于）、&lt;=（小于等于）来表示其关系。</p><p>例如：</p><div class="language-python" data-highlighter="prismjs" data-ext="py" data-title="py"><pre><code><span class="line"><span class="token comment"># -*-coding:utf-8-*-</span></span>
<span class="line"></span>
<span class="line">results<span class="token operator">=</span><span class="token number">59</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">if</span> results<span class="token operator">&gt;=</span><span class="token number">60</span><span class="token punctuation">:</span></span>
<span class="line">    <span class="token keyword">print</span> <span class="token punctuation">(</span><span class="token string">&#39;及格&#39;</span><span class="token punctuation">)</span></span>
<span class="line"><span class="token keyword">else</span> <span class="token punctuation">:</span></span>
<span class="line">    <span class="token keyword">print</span> <span class="token punctuation">(</span><span class="token string">&#39;不及格&#39;</span><span class="token punctuation">)</span></span>
<span class="line"></span>
<span class="line"></span></code></pre></div><p>输出的结果为：</p><div class="language-txt" data-highlighter="prismjs" data-ext="txt" data-title="txt"><pre><code><span class="line">不及格</span>
<span class="line"></span></code></pre></div><p>上面也说到，非零数值、非空字符串、非空 list 等，判断为 True，否则为 False。因此也可以这样写：</p><div class="language-python" data-highlighter="prismjs" data-ext="py" data-title="py"><pre><code><span class="line">num <span class="token operator">=</span> <span class="token number">6</span></span>
<span class="line"><span class="token keyword">if</span> num <span class="token punctuation">:</span></span>
<span class="line">    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&#39;Hello Python&#39;</span><span class="token punctuation">)</span></span>
<span class="line"></span></code></pre></div><p>输出的结果如下：</p><p><img src="http://twowaterimage.oss-cn-beijing.aliyuncs.com/2019-09-07-072713.png" alt=""></p><p>可见，把结果打印出来了。</p><p>那如果我们把 <code>num</code> 改为空字符串呢？</p><p><img src="http://twowaterimage.oss-cn-beijing.aliyuncs.com/2019-09-07-072941.png" alt=""></p><p>很明显，空字符串是为 False 的，不符合条件语句，因此不会执行到 <code>print(&#39;Hello Python&#39;)</code> 这段代码。</p><p>还有再啰嗦一点，提醒一下，在条件判断代码中的冒号 <code>:</code> 后、下一行内容是一定要缩进的。不缩进是会报错的。</p><p><img src="http://twowaterimage.oss-cn-beijing.aliyuncs.com/2019-09-07-073432.png" alt=""></p><p>冒号和缩进是一种语法。它会帮助 Python 区分代码之间的层次，理解条件执行的逻辑及先后顺序。</p><h2 id="_3、if-语句多个判断条件的形式" tabindex="-1"><a class="header-anchor" href="#_3、if-语句多个判断条件的形式"><span>3、if 语句多个判断条件的形式</span></a></h2><p>有些时候，我们的判断语句不可能只有两个，有些时候需要多个，比如上面的例子中大于 60 的为及格，那我们还要判断大于 90 的为优秀，在 80 到 90 之间的良好呢？</p><p>这时候需要用到 if 语句多个判断条件，</p><p>用伪代码来表示：</p><div class="language-python" data-highlighter="prismjs" data-ext="py" data-title="py"><pre><code><span class="line"><span class="token keyword">if</span> 判断条件<span class="token number">1</span><span class="token punctuation">:</span></span>
<span class="line">    执行语句<span class="token number">1</span>……</span>
<span class="line"><span class="token keyword">elif</span> 判断条件<span class="token number">2</span><span class="token punctuation">:</span></span>
<span class="line">    执行语句<span class="token number">2</span>……</span>
<span class="line"><span class="token keyword">elif</span> 判断条件<span class="token number">3</span><span class="token punctuation">:</span></span>
<span class="line">    执行语句<span class="token number">3</span>……</span>
<span class="line"><span class="token keyword">else</span><span class="token punctuation">:</span></span>
<span class="line">    执行语句<span class="token number">4</span>……</span>
<span class="line"></span></code></pre></div><p>实例：</p><div class="language-python" data-highlighter="prismjs" data-ext="py" data-title="py"><pre><code><span class="line"><span class="token comment"># -*-coding:utf-8-*-</span></span>
<span class="line"></span>
<span class="line">results <span class="token operator">=</span> <span class="token number">89</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">if</span> results <span class="token operator">&gt;</span> <span class="token number">90</span><span class="token punctuation">:</span></span>
<span class="line">    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&#39;优秀&#39;</span><span class="token punctuation">)</span></span>
<span class="line"><span class="token keyword">elif</span> results <span class="token operator">&gt;</span> <span class="token number">80</span><span class="token punctuation">:</span></span>
<span class="line">    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&#39;良好&#39;</span><span class="token punctuation">)</span></span>
<span class="line"><span class="token keyword">elif</span> results <span class="token operator">&gt;</span> <span class="token number">60</span><span class="token punctuation">:</span></span>
<span class="line">    <span class="token keyword">print</span> <span class="token punctuation">(</span><span class="token string">&#39;及格&#39;</span><span class="token punctuation">)</span></span>
<span class="line"><span class="token keyword">else</span> <span class="token punctuation">:</span></span>
<span class="line">    <span class="token keyword">print</span> <span class="token punctuation">(</span><span class="token string">&#39;不及格&#39;</span><span class="token punctuation">)</span></span>
<span class="line"></span>
<span class="line"></span></code></pre></div><p>输出的结果：</p><div class="language-txt" data-highlighter="prismjs" data-ext="txt" data-title="txt"><pre><code><span class="line">良好</span>
<span class="line"></span></code></pre></div><h2 id="_4、if-语句多个条件同时判断" tabindex="-1"><a class="header-anchor" href="#_4、if-语句多个条件同时判断"><span>4、if 语句多个条件同时判断</span></a></h2><p>有时候我们会遇到多个条件的时候该怎么操作呢？</p><p>比如说要求 java 和 python 的考试成绩要大于 80 分的时候才算优秀，这时候该怎么做？</p><p>这时候我们可以结合 <code>or</code> 和 <code>and</code> 来使用。</p><p>or （或）表示两个条件有一个成立时判断条件成功</p><p>and （与）表示只有两个条件同时成立的情况下，判断条件才成功。</p><p>例如：</p><div class="language-python" data-highlighter="prismjs" data-ext="py" data-title="py"><pre><code><span class="line"><span class="token comment"># -*-coding:utf-8-*-</span></span>
<span class="line"></span>
<span class="line">java <span class="token operator">=</span> <span class="token number">86</span></span>
<span class="line">python <span class="token operator">=</span> <span class="token number">68</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">if</span> java <span class="token operator">&gt;</span> <span class="token number">80</span> <span class="token keyword">and</span>  python <span class="token operator">&gt;</span> <span class="token number">80</span><span class="token punctuation">:</span></span>
<span class="line">    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&#39;优秀&#39;</span><span class="token punctuation">)</span></span>
<span class="line"><span class="token keyword">else</span> <span class="token punctuation">:</span></span>
<span class="line">    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&#39;不优秀&#39;</span><span class="token punctuation">)</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">if</span> <span class="token punctuation">(</span> java <span class="token operator">&gt;=</span> <span class="token number">80</span>  <span class="token keyword">and</span> java <span class="token operator">&lt;</span> <span class="token number">90</span> <span class="token punctuation">)</span>  <span class="token keyword">or</span> <span class="token punctuation">(</span> python <span class="token operator">&gt;=</span> <span class="token number">80</span> <span class="token keyword">and</span> python <span class="token operator">&lt;</span> <span class="token number">90</span><span class="token punctuation">)</span><span class="token punctuation">:</span></span>
<span class="line">    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&#39;良好&#39;</span><span class="token punctuation">)</span></span>
<span class="line"></span>
<span class="line"></span></code></pre></div><p>输出结果：</p><div class="language-txt" data-highlighter="prismjs" data-ext="txt" data-title="txt"><pre><code><span class="line">不优秀</span>
<span class="line">良好</span>
<span class="line"></span></code></pre></div><p>注意：if 有多个条件时可使用括号来区分判断的先后顺序，括号中的判断优先执行，此外 and 和 or 的优先级低于 &gt;（大于）、&lt;（小于）等判断符号，即大于和小于在没有括号的情况下会比与或要优先判断。</p><h2 id="_5、if-嵌套" tabindex="-1"><a class="header-anchor" href="#_5、if-嵌套"><span>5、if 嵌套</span></a></h2><p>if 嵌套是指什么呢？</p><p>就跟字面意思差不多，指 if 语句中可以嵌套 if 语句。</p><p>比如上面说到的例子，也可以用 if 嵌套来写。</p><p><img src="http://twowaterimage.oss-cn-beijing.aliyuncs.com/2019-09-07-080557.png" alt=""></p><p>当然这只是为了说明 if 条件语句是可以嵌套的。如果是这个需求，我个人还是不太建议这样使用 if 嵌套的，因为这样代码量多了，而且嵌套太多，也不方便阅读代码。</p><h1 id="二、循环语句" tabindex="-1"><a class="header-anchor" href="#二、循环语句"><span>二、循环语句</span></a></h1><h2 id="_1、什么是循环语句" tabindex="-1"><a class="header-anchor" href="#_1、什么是循环语句"><span>1、什么是循环语句</span></a></h2><p>一般编程语言都有循环语句，为什么呢？</p><p>那就问一下自己，我们弄程序是为了干什么？</p><p>那肯定是为了方便我们工作，优化我们的工作效率啊。</p><p>而计算机和人类不同，计算机不怕苦也不怕累，也不需要休息，可以一直做。</p><p>你要知道，计算机最擅长就是做重复的事情。</p><p>所以这时候需要用到循环语句，循环语句允许我们执行一个语句或语句组多次。</p><p>循环语句的一般形式如下：</p><p><img src="http://upload-images.jianshu.io/upload_images/2136918-eaaae2fbfec3330f?imageMogr2/auto-orient/strip|imageView2/2/w/1240" alt="python循环语句"></p><p>在 Python 提供了 for 循环和 while 循环。</p><p>这里又有一个问题了，如果我想让他运行了一百次之后停止，那该怎么做呢？</p><p>这时候需要用到一些控制循环的语句：</p><table><thead><tr><th>循环控制语句</th><th>描述</th></tr></thead><tbody><tr><td>break</td><td>在语句块执行过程中终止循环，并且跳出整个循环</td></tr><tr><td>continue</td><td>在语句块执行过程中终止当前循环，跳出该次循环，执行下一次循环</td></tr><tr><td>pass</td><td>pass 是空语句，是为了保持程序结构的完整性</td></tr></tbody></table><p>这些控制语句是为了让我们告诉程序什么时候停止，什么时候不运行这次循环。</p><h2 id="_2、-for-循环语句" tabindex="-1"><a class="header-anchor" href="#_2、-for-循环语句"><span>2、 for 循环语句</span></a></h2><p>我们先来看下 for 循环语句。</p><p>它的流程图基本如下：</p><p><img src="http://upload-images.jianshu.io/upload_images/2136918-a0728c1c488238af?imageMogr2/auto-orient/strip|imageView2/2/w/1240" alt="for循环的流程图"></p><p>基本的语法格式：</p><div class="language-python" data-highlighter="prismjs" data-ext="py" data-title="py"><pre><code><span class="line"><span class="token keyword">for</span> iterating_var <span class="token keyword">in</span> sequence<span class="token punctuation">:</span></span>
<span class="line">   statements<span class="token punctuation">(</span>s<span class="token punctuation">)</span></span>
<span class="line"></span></code></pre></div><p>那么我们根据他的基本语法格式，随便写个例子测试一下：</p><div class="language-python" data-highlighter="prismjs" data-ext="py" data-title="py"><pre><code><span class="line"><span class="token keyword">for</span> letter <span class="token keyword">in</span> <span class="token string">&#39;Hello 两点水&#39;</span><span class="token punctuation">:</span></span>
<span class="line">    <span class="token keyword">print</span><span class="token punctuation">(</span>letter<span class="token punctuation">)</span></span>
<span class="line"></span></code></pre></div><p>输出的结果如下：</p><div class="language-txt" data-highlighter="prismjs" data-ext="txt" data-title="txt"><pre><code><span class="line">H</span>
<span class="line">e</span>
<span class="line">l</span>
<span class="line">l</span>
<span class="line">o</span>
<span class="line"></span>
<span class="line">两</span>
<span class="line">点</span>
<span class="line">水</span>
<span class="line"></span></code></pre></div><p>从打印结果来看，它就是把字符串 <code>Hello 两点水</code> 一个一个字符的打印出来。</p><p>那如果我们把字符串换为字典 dict 呢？</p><p><img src="http://twowaterimage.oss-cn-beijing.aliyuncs.com/2019-09-07-094741.png" alt=""></p><p>你会发现只打印了字典 dict 中的每一个 key 值。</p><p>很多时候，我都是建议大家学到一个新的知识点，都多去尝试。</p><p>你尝试一遍，自己观察出来的结论，好过别人说十遍。</p><p>如果你不知道怎么去试？</p><p>可以根据我们的例子举一反三，比如上面的 for 循环，试了字符串，字典，那我们之前学的基本数据类型还有什么呢？</p><p>不记得可以再返回去看看，可以把所有的基本类型都拿去尝试一下。</p><p>比如，你试了之后，会发现整数和浮点数是不可以直接放在 for 循环里面的。</p><p><img src="http://twowaterimage.oss-cn-beijing.aliyuncs.com/2019-09-07-095313.png" alt=""></p><h2 id="_3、-range-函数" tabindex="-1"><a class="header-anchor" href="#_3、-range-函数"><span>3、 range() 函数</span></a></h2><p>for 循环还常常和 range() 函数搭配使用的。</p><p>如果不知道 range() 函数 , 我们直接通过一段程序来理解。</p><div class="language-python" data-highlighter="prismjs" data-ext="py" data-title="py"><pre><code><span class="line"><span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">:</span></span>
<span class="line">    <span class="token keyword">print</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span></span>
<span class="line"></span></code></pre></div><p>打印的结果为：</p><div class="language-text" data-highlighter="prismjs" data-ext="text" data-title="text"><pre><code><span class="line">0</span>
<span class="line">1</span>
<span class="line">2</span>
<span class="line"></span></code></pre></div><p>可见，打印了 0 到 3 。</p><p>使用 range(x) 函数，就可以生成一个从 0 到 x-1 的整数序列。</p><p>如果是 <code>range(a,b)</code> 函数，你可以生成了一个左闭右开的整数序列。</p><p>其实例子中的 <code>range(3)</code> 可以写成 <code>range(0,3)</code>, 结果是一样的。</p><p>其实使用 range() 函数，我们更多是为了把一段代码重复运行 n 次。</p><p>这里提个问题，你仔细观察 range() 函数，上面说到的不管是 1 个参数的，还是 2 个参数的都有什么共同的特点？</p><p>不知道你们有没有发现，他都是每次递增 1 的。</p><p><code>range(3)</code> 就是 0 ，1，2 ，每次递增 1 。</p><p><code>range(3,6)</code> 就是 3 ，4 ，5 ，也是每次递增 1 的。</p><p>那能不能每次不递增 1 呢？</p><p>比如我想递增 2 呢？</p><p>在程序的编写中，肯定会遇到这样的需求的。而 python 发展至今，range 函数肯定也会有这种功能。</p><p>所以 range 函数还有一个三个参数的。</p><p>比如 <code>range(0,10,2)</code> , 它的意思是：从 0 数到 10（不取 10 ），每次间隔为 2 。</p><p><img src="http://twowaterimage.oss-cn-beijing.aliyuncs.com/2019-09-09-065854.png" alt=""></p><h2 id="_4、while-循环语句" tabindex="-1"><a class="header-anchor" href="#_4、while-循环语句"><span>4、While 循环语句</span></a></h2><p>While 循环和 for 循环的作用是一样的。</p><p>我们先来看看 While 循环语句的样子。</p><p><img src="http://twowaterimage.oss-cn-beijing.aliyuncs.com/2019-09-07-083137.png" alt=""></p><p>程序输出的结果是：</p><div class="language-txt" data-highlighter="prismjs" data-ext="txt" data-title="txt"><pre><code><span class="line">5050</span>
<span class="line"></span></code></pre></div><p>这个例子是计算 1 到 100 所有整数的和。</p><h2 id="_5、for-循环和-whlie-循环的区别" tabindex="-1"><a class="header-anchor" href="#_5、for-循环和-whlie-循环的区别"><span>5、for 循环和 whlie 循环的区别</span></a></h2><p>之前也提到过了，如果一种语法能表示一个功能，那没必要弄两种语法来表示。</p><p>竟然都是循环，for 循环和 while 循环肯定有他们的区别的。</p><p>那什么时候才使用 for 循环和 while 循环呢？</p><ul><li><p>for 循环主要用在迭代可迭代对象的情况。</p></li><li><p>while 循环主要用在需要满足一定条件为真，反复执行的情况。 （死循环+break 退出等情况。）</p></li><li><p>部分情况下，for 循环和 while 循环可以互换使用。</p></li></ul><p>例如：</p><div class="language-python" data-highlighter="prismjs" data-ext="py" data-title="py"><pre><code><span class="line"><span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">:</span></span>
<span class="line">    <span class="token keyword">print</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line">i <span class="token operator">=</span> <span class="token number">0</span></span>
<span class="line"><span class="token keyword">while</span> i <span class="token operator">&lt;</span> <span class="token number">10</span><span class="token punctuation">:</span></span>
<span class="line">    <span class="token keyword">print</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span></span>
<span class="line">    i <span class="token operator">=</span> i <span class="token operator">+</span> <span class="token number">1</span></span>
<span class="line"></span></code></pre></div><p>虽然打印的结果是一样的，但是细细品味你会发现，他们执行的顺序和知道的条件是不同的。</p><h2 id="_6、嵌套循环" tabindex="-1"><a class="header-anchor" href="#_6、嵌套循环"><span>6、嵌套循环</span></a></h2><p>循环语句和条件语句一样，都是可以嵌套的。</p><p>具体的语法如下：</p><p><strong>for 循环嵌套语法</strong></p><div class="language-python" data-highlighter="prismjs" data-ext="py" data-title="py"><pre><code><span class="line"><span class="token keyword">for</span> iterating_var <span class="token keyword">in</span> sequence<span class="token punctuation">:</span></span>
<span class="line">   <span class="token keyword">for</span> iterating_var <span class="token keyword">in</span> sequence<span class="token punctuation">:</span></span>
<span class="line">      statements<span class="token punctuation">(</span>s<span class="token punctuation">)</span></span>
<span class="line">   statements<span class="token punctuation">(</span>s<span class="token punctuation">)</span></span>
<span class="line"></span></code></pre></div><p><strong>while 循环嵌套语法</strong></p><div class="language-python" data-highlighter="prismjs" data-ext="py" data-title="py"><pre><code><span class="line"><span class="token keyword">while</span> expression<span class="token punctuation">:</span></span>
<span class="line">   <span class="token keyword">while</span> expression<span class="token punctuation">:</span></span>
<span class="line">      statement<span class="token punctuation">(</span>s<span class="token punctuation">)</span></span>
<span class="line">   statement<span class="token punctuation">(</span>s<span class="token punctuation">)</span></span>
<span class="line"></span></code></pre></div><p>除此之外，你也可以在循环体内嵌入其他的循环体，如在 while 循环中可以嵌入 for 循环， 反之，你可以在 for 循环中嵌入 while 循环</p><p>比如：</p><p>当我们需要判断 sum 大于 1000 的时候，不在相加时，可以用到 break ，退出整个循环。</p><div class="language-python" data-highlighter="prismjs" data-ext="py" data-title="py"><pre><code><span class="line">count <span class="token operator">=</span> <span class="token number">1</span></span>
<span class="line"><span class="token builtin">sum</span> <span class="token operator">=</span> <span class="token number">0</span></span>
<span class="line"><span class="token keyword">while</span> <span class="token punctuation">(</span>count <span class="token operator">&lt;=</span> <span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">:</span></span>
<span class="line">    <span class="token builtin">sum</span> <span class="token operator">=</span> <span class="token builtin">sum</span> <span class="token operator">+</span> count</span>
<span class="line">    <span class="token keyword">if</span> <span class="token punctuation">(</span> <span class="token builtin">sum</span> <span class="token operator">&gt;</span> <span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">:</span>  <span class="token comment">#当 sum 大于 1000 的时候退出循环</span></span>
<span class="line">        <span class="token keyword">break</span></span>
<span class="line">    count <span class="token operator">=</span> count <span class="token operator">+</span> <span class="token number">1</span></span>
<span class="line"><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token builtin">sum</span><span class="token punctuation">)</span></span>
<span class="line"></span></code></pre></div><p>输出的结果：</p><div class="language-txt" data-highlighter="prismjs" data-ext="txt" data-title="txt"><pre><code><span class="line">1035</span>
<span class="line"></span></code></pre></div><p>有时候，我们只想统计 1 到 100 之间的奇数和，那么也就是说当 count 是偶数，也就是双数的时候，我们需要跳出当次的循环，不想加，这时候可以用到 break</p><div class="language-python" data-highlighter="prismjs" data-ext="py" data-title="py"><pre><code><span class="line">count <span class="token operator">=</span> <span class="token number">1</span></span>
<span class="line"><span class="token builtin">sum</span> <span class="token operator">=</span> <span class="token number">0</span></span>
<span class="line"><span class="token keyword">while</span> <span class="token punctuation">(</span>count <span class="token operator">&lt;=</span> <span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">:</span></span>
<span class="line">    <span class="token keyword">if</span> <span class="token punctuation">(</span> count <span class="token operator">%</span> <span class="token number">2</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">:</span>  <span class="token comment"># 双数时跳过输出</span></span>
<span class="line">        count <span class="token operator">=</span> count <span class="token operator">+</span> <span class="token number">1</span></span>
<span class="line">        <span class="token keyword">continue</span></span>
<span class="line">    <span class="token builtin">sum</span> <span class="token operator">=</span> <span class="token builtin">sum</span> <span class="token operator">+</span> count</span>
<span class="line">    count <span class="token operator">=</span> count <span class="token operator">+</span> <span class="token number">1</span></span>
<span class="line"><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token builtin">sum</span><span class="token punctuation">)</span></span>
<span class="line"></span></code></pre></div><p>输出的语句：</p><div class="language-txt" data-highlighter="prismjs" data-ext="txt" data-title="txt"><pre><code><span class="line">2500</span>
<span class="line"></span></code></pre></div><p>还有：</p><div class="language-python" data-highlighter="prismjs" data-ext="py" data-title="py"><pre><code><span class="line"><span class="token keyword">for</span> num <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">,</span><span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">:</span>  <span class="token comment"># 迭代 10 到 20 之间的数字</span></span>
<span class="line">   <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span>num<span class="token punctuation">)</span><span class="token punctuation">:</span> <span class="token comment"># 根据因子迭代</span></span>
<span class="line">      <span class="token keyword">if</span> num<span class="token operator">%</span>i <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">:</span>      <span class="token comment"># 确定第一个因子</span></span>
<span class="line">         j<span class="token operator">=</span>num<span class="token operator">/</span>i          <span class="token comment"># 计算第二个因子</span></span>
<span class="line">         <span class="token keyword">print</span> <span class="token punctuation">(</span><span class="token string">&#39;%d 是一个合数&#39;</span> <span class="token operator">%</span> num<span class="token punctuation">)</span></span>
<span class="line">         <span class="token keyword">break</span>            <span class="token comment"># 跳出当前循环</span></span>
<span class="line">   <span class="token keyword">else</span><span class="token punctuation">:</span>                  <span class="token comment"># 循环的 else 部分</span></span>
<span class="line">      <span class="token keyword">print</span> <span class="token punctuation">(</span><span class="token string">&#39;%d 是一个质数&#39;</span> <span class="token operator">%</span> num<span class="token punctuation">)</span></span>
<span class="line"></span></code></pre></div><p>输出的结果：</p><div class="language-txt" data-highlighter="prismjs" data-ext="txt" data-title="txt"><pre><code><span class="line">10 是一个合数</span>
<span class="line">11 是一个质数</span>
<span class="line">12 是一个合数</span>
<span class="line">13 是一个质数</span>
<span class="line">14 是一个合数</span>
<span class="line">15 是一个合数</span>
<span class="line">16 是一个合数</span>
<span class="line">17 是一个质数</span>
<span class="line">18 是一个合数</span>
<span class="line">19 是一个质数</span>
<span class="line"></span></code></pre></div><p>当然，这里还用到了 <code>for … else</code> 语句。</p><p>其实 for 循环中的语句和普通的没有区别，else 中的语句会在循环正常执行完（即 for 不是通过 break 跳出而中断的）的情况下执行。</p><p>当然有 <code>for … else</code> ，也会有 <code>while … else</code> 。他们的意思都是一样的。</p><h1 id="三、条件语句和循环语句综合实例" tabindex="-1"><a class="header-anchor" href="#三、条件语句和循环语句综合实例"><span>三、条件语句和循环语句综合实例</span></a></h1><h2 id="_1、打印九九乘法表" tabindex="-1"><a class="header-anchor" href="#_1、打印九九乘法表"><span>1、打印九九乘法表</span></a></h2><div class="language-python" data-highlighter="prismjs" data-ext="py" data-title="py"><pre><code><span class="line"><span class="token comment"># -*- coding: UTF-8 -*-</span></span>
<span class="line"></span>
<span class="line"><span class="token comment"># 打印九九乘法表</span></span>
<span class="line"><span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">:</span></span>
<span class="line">        <span class="token keyword">for</span> j <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">:</span></span>
<span class="line">            <span class="token comment"># 打印语句中，大括号及其里面的字符 (称作格式化字段) 将会被 .format() 中的参数替换,注意有个点的</span></span>
<span class="line">            <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&#39;{}x{}={}\\t&#39;</span><span class="token punctuation">.</span><span class="token builtin">format</span><span class="token punctuation">(</span>i<span class="token punctuation">,</span> j<span class="token punctuation">,</span> i<span class="token operator">*</span>j<span class="token punctuation">)</span><span class="token punctuation">,</span> end<span class="token operator">=</span><span class="token string">&#39;&#39;</span><span class="token punctuation">)</span>  </span>
<span class="line">        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line"></span></code></pre></div><p>输出的结果:</p><div class="language-txt" data-highlighter="prismjs" data-ext="txt" data-title="txt"><pre><code><span class="line">1x1=1   </span>
<span class="line">2x1=2   2x2=4   </span>
<span class="line">3x1=3   3x2=6   3x3=9   </span>
<span class="line">4x1=4   4x2=8   4x3=12  4x4=16  </span>
<span class="line">5x1=5   5x2=10  5x3=15  5x4=20  5x5=25  </span>
<span class="line">6x1=6   6x2=12  6x3=18  6x4=24  6x5=30  6x6=36  </span>
<span class="line">7x1=7   7x2=14  7x3=21  7x4=28  7x5=35  7x6=42  7x7=49  </span>
<span class="line">8x1=8   8x2=16  8x3=24  8x4=32  8x5=40  8x6=48  8x7=56  8x8=64  </span>
<span class="line">9x1=9   9x2=18  9x3=27  9x4=36  9x5=45  9x6=54  9x7=63  9x8=72  9x9=81 </span>
<span class="line"></span></code></pre></div><h2 id="_2、判断是否是闰年" tabindex="-1"><a class="header-anchor" href="#_2、判断是否是闰年"><span>2、判断是否是闰年</span></a></h2><div class="language-python" data-highlighter="prismjs" data-ext="py" data-title="py"><pre><code><span class="line"></span>
<span class="line"><span class="token comment"># 判断是否是闰年</span></span>
<span class="line"></span>
<span class="line">year <span class="token operator">=</span> <span class="token builtin">int</span><span class="token punctuation">(</span><span class="token builtin">input</span><span class="token punctuation">(</span><span class="token string">&quot;请输入一个年份: &quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span></span>
<span class="line"><span class="token keyword">if</span> <span class="token punctuation">(</span>year <span class="token operator">%</span> <span class="token number">4</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span> <span class="token keyword">and</span> <span class="token punctuation">(</span>year <span class="token operator">%</span> <span class="token number">100</span><span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token number">0</span> <span class="token keyword">or</span> <span class="token punctuation">(</span>year <span class="token operator">%</span> <span class="token number">400</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">:</span></span>
<span class="line">    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&#39;{0} 是闰年&#39;</span> <span class="token punctuation">.</span><span class="token builtin">format</span><span class="token punctuation">(</span>year<span class="token punctuation">)</span><span class="token punctuation">)</span></span>
<span class="line"><span class="token keyword">else</span><span class="token punctuation">:</span></span>
<span class="line">     <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&#39;{0} 不是闰年&#39;</span> <span class="token punctuation">.</span><span class="token builtin">format</span><span class="token punctuation">(</span>year<span class="token punctuation">)</span><span class="token punctuation">)</span></span>
<span class="line"></span>
<span class="line"></span></code></pre></div>`,162)]))}const i=n(t,[["render",l]]),r=JSON.parse('{"path":"/python-tutor/basics/if-else.html","title":"条件语句","lang":"zh-CN","frontmatter":{"description":"条件语句 通常都听到别人说，计算机很牛逼，很聪明，其实计算机一点都不聪明，光是你要跟他沟通，都会气 shi 你，聪明的是在写程序的你。 写程序就是跟计算机沟通，告诉它要做什么。 竟然是这样，那么肯定缺少不了一些沟通逻辑。比如你要告诉计算机在什么情况下做什么？或者在哪个时间点做什么？ 这都需要用到逻辑判断。这一章节，主要就是说这个。 目录 一、条件语句 ...","head":[["meta",{"property":"og:url","content":"https://yzqdev.github.io/cs-guide/cs-guide/python-tutor/basics/if-else.html"}],["meta",{"property":"og:site_name","content":"cs-guide"}],["meta",{"property":"og:title","content":"条件语句"}],["meta",{"property":"og:description","content":"条件语句 通常都听到别人说，计算机很牛逼，很聪明，其实计算机一点都不聪明，光是你要跟他沟通，都会气 shi 你，聪明的是在写程序的你。 写程序就是跟计算机沟通，告诉它要做什么。 竟然是这样，那么肯定缺少不了一些沟通逻辑。比如你要告诉计算机在什么情况下做什么？或者在哪个时间点做什么？ 这都需要用到逻辑判断。这一章节，主要就是说这个。 目录 一、条件语句 ..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:image","content":"http://twowaterimage.oss-cn-beijing.aliyuncs.com/2019-09-09-%E6%9D%A1%E4%BB%B6%E8%AF%AD%E5%8F%A5%E5%92%8C%E5%BE%AA%E7%8E%AF%E8%AF%AD%E5%8F%A5.png"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2022-05-26T11:39:36.000Z"}],["meta",{"property":"article:modified_time","content":"2022-05-26T11:39:36.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"条件语句\\",\\"image\\":[\\"http://twowaterimage.oss-cn-beijing.aliyuncs.com/2019-09-09-%E6%9D%A1%E4%BB%B6%E8%AF%AD%E5%8F%A5%E5%92%8C%E5%BE%AA%E7%8E%AF%E8%AF%AD%E5%8F%A5.png\\",\\"http://upload-images.jianshu.io/upload_images/2136918-4ee2486190450a1a?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\\",\\"http://twowaterimage.oss-cn-beijing.aliyuncs.com/2019-09-07-072713.png\\",\\"http://twowaterimage.oss-cn-beijing.aliyuncs.com/2019-09-07-072941.png\\",\\"http://twowaterimage.oss-cn-beijing.aliyuncs.com/2019-09-07-073432.png\\",\\"http://twowaterimage.oss-cn-beijing.aliyuncs.com/2019-09-07-080557.png\\",\\"http://upload-images.jianshu.io/upload_images/2136918-eaaae2fbfec3330f?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\\",\\"http://upload-images.jianshu.io/upload_images/2136918-a0728c1c488238af?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\\",\\"http://twowaterimage.oss-cn-beijing.aliyuncs.com/2019-09-07-094741.png\\",\\"http://twowaterimage.oss-cn-beijing.aliyuncs.com/2019-09-07-095313.png\\",\\"http://twowaterimage.oss-cn-beijing.aliyuncs.com/2019-09-09-065854.png\\",\\"http://twowaterimage.oss-cn-beijing.aliyuncs.com/2019-09-07-083137.png\\"],\\"dateModified\\":\\"2022-05-26T11:39:36.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"yzqdev\\",\\"url\\":\\"http://www.yzqdev.top\\"}]}"]]},"headers":[{"level":2,"title":"1、什么是条件语句","slug":"_1、什么是条件语句","link":"#_1、什么是条件语句","children":[]},{"level":2,"title":"2、if 语句的基本形式","slug":"_2、if-语句的基本形式","link":"#_2、if-语句的基本形式","children":[]},{"level":2,"title":"3、if 语句多个判断条件的形式","slug":"_3、if-语句多个判断条件的形式","link":"#_3、if-语句多个判断条件的形式","children":[]},{"level":2,"title":"4、if 语句多个条件同时判断","slug":"_4、if-语句多个条件同时判断","link":"#_4、if-语句多个条件同时判断","children":[]},{"level":2,"title":"5、if 嵌套","slug":"_5、if-嵌套","link":"#_5、if-嵌套","children":[]},{"level":2,"title":"1、什么是循环语句","slug":"_1、什么是循环语句","link":"#_1、什么是循环语句","children":[]},{"level":2,"title":"2、 for 循环语句","slug":"_2、-for-循环语句","link":"#_2、-for-循环语句","children":[]},{"level":2,"title":"3、 range() 函数","slug":"_3、-range-函数","link":"#_3、-range-函数","children":[]},{"level":2,"title":"4、While 循环语句","slug":"_4、while-循环语句","link":"#_4、while-循环语句","children":[]},{"level":2,"title":"5、for 循环和 whlie 循环的区别","slug":"_5、for-循环和-whlie-循环的区别","link":"#_5、for-循环和-whlie-循环的区别","children":[]},{"level":2,"title":"6、嵌套循环","slug":"_6、嵌套循环","link":"#_6、嵌套循环","children":[]},{"level":2,"title":"1、打印九九乘法表","slug":"_1、打印九九乘法表","link":"#_1、打印九九乘法表","children":[]},{"level":2,"title":"2、判断是否是闰年","slug":"_2、判断是否是闰年","link":"#_2、判断是否是闰年","children":[]}],"git":{"createdTime":1653497324000,"updatedTime":1653565176000,"contributors":[{"name":"yzqdev","username":"yzqdev","email":"yzqdev@outlook.com","commits":2,"url":"https://github.com/yzqdev"}]},"readingTime":{"minutes":10.82,"words":3245},"filePathRelative":"python-tutor/basics/if-else.md","localizedDate":"2022年5月25日","autoDesc":true}');export{i as comp,r as data};
