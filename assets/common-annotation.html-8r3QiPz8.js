import{_ as a,c as s,a as e,o}from"./app-C8DxhDIZ.js";const t={};function c(p,n){return o(),s("div",null,n[0]||(n[0]=[e(`<h1 id="常用注解解析" tabindex="-1"><a class="header-anchor" href="#常用注解解析"><span>常用注解解析</span></a></h1><p>每个bean都对应着一个class，可能是controller，可能是service，可能是dao，xml配置文件就是告诉Spring，我这里有哪些bean，他们都叫啥名字（例如helloworld），他们的class文件在哪（com.test.spring.beans.HelloWorld），他们都有哪些属性。这样，当项目启动时，Spring就回去管理这些类了。</p><h2 id="_2-进入-configuration时代" tabindex="-1"><a class="header-anchor" href="#_2-进入-configuration时代"><span>2. 进入@Configuration时代</span></a></h2><p>你现在使用<code>@Service</code>、<code>@Repository</code>、<code>@Component</code>这些注解放在java的类上用来告诉Spring：“我标注的这些类请你来管理”。在以前就是要在xml配置文件里写上面这样的bean，有一个类写一个bean <strong>总结一下：</strong></p><ul><li><code>@Configuration</code>注解就相当于xml配置文件，告诉Spring我这里有好多bean要交给你管理</li><li><code>@Bean</code>注解就相当于xml配置文件里面的bean，告诉Spring这个被注解的类就交给你管理了</li></ul><h2 id="_3-component粉墨登场" tabindex="-1"><a class="header-anchor" href="#_3-component粉墨登场"><span>3. @Component粉墨登场</span></a></h2><p>无名子曰过，偷懒是人类创造力的源泉。我都把class类写好了，还要再写个<code>@Configuration</code>注解的class去告诉Spring（除了通知Spring，这个class不产生其他价值），虽然这个class相比于xml配置文件写起来方便又好阅读，但是，这个时候总有但是，我为啥不直接就告诉Spring呢？？？   <code>@Controller</code>、<code>@Service</code>、<code>@Repository</code>都是<code>@Component</code>的更具体一点的实现（这里如果说错了，求大佬轻喷）。写完class加上这些注解，其实就是加上<code>@Component</code>注解，Spring就懂了，奥奥，你小子太懒了，这么多类全部是让我来管理的，不过话说回来谁让我是你baba呢！   是不是这就完事了呢，是的，没有但是，真的就完事了。</p><h2 id="_4-但是-又回来了" tabindex="-1"><a class="header-anchor" href="#_4-但是-又回来了"><span>4. “但是”又回来了</span></a></h2><p>是的，这里又有但是了。可能有人想到了，既然<code>@Component</code>跟Spring已经把问题解决了，那，<code>@Bean</code>这个注解为啥还没退休啊，还在这站着地儿，咋不见新版Spring给加个<code>@Deprecated</code>？？？   年轻人，有想法！！！   假设这么一种情况，有几个class，我自己也不是不能写，但是写了周末就没时间去外滩闲逛了，就在这个时候，我发现alimama的老铁们已经写好了同样功能的class，我在maven里import一下就完了，开心三秒，又有问题了，他们写的时候没用Spring：</p><ul><li>1）打好的jar包，我不能在class上面加<code>@Component</code>注解；</li><li>2）我没有他们的源码，也不能把他们的代码复制过来，假装自己重写了一遍QQQ</li></ul><p>这时候<code>@Bean</code>的作用就体现出来了，请看：</p><div class="language-java" data-highlighter="prismjs" data-ext="java" data-title="java"><pre><code><span class="line"><span class="token annotation punctuation">@Configuration</span></span>
<span class="line"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MyClass</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token comment">// class1和class2就是jar包里写好的</span></span>
<span class="line">  <span class="token annotation punctuation">@Bean</span></span>
<span class="line">  <span class="token keyword">public</span> <span class="token class-name">Class1</span> <span class="token function">getClass1</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Class1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token punctuation">}</span></span>
<span class="line">  <span class="token annotation punctuation">@Bean</span></span>
<span class="line">  <span class="token keyword">public</span> <span class="token class-name">Class2</span> <span class="token function">getClass1</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Class2</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token punctuation">}</span></span>
<span class="line">  <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre></div><p>虽然又回到了<code>@Component出场</code>之前的<code>@Configuration</code>时代。但是你也不需要经常使用这个对吧</p><h2 id="_4-让我们以一点小干货结束今天的故事" tabindex="-1"><a class="header-anchor" href="#_4-让我们以一点小干货结束今天的故事"><span>4. 让我们以一点小干货结束今天的故事</span></a></h2><p>Spring管理的Bean我们需要通过<code>@Autowired</code>或者<code>@Resource</code>导入来使用，这两的区别啥的你可以自己去搜索一下，这里只说一个问题。<code>@Autowired</code>是按照类型装配的，<code>@Resource</code>是按照名称装配的，如果同一类型有多个bean，只是名字不一样，<code>@Autowired</code>直接导入会报错。这时候课题通过<code>@Resource(name=&quot;name&quot;)</code>或者<code>@Autowired@Qualifier(&quot;name&quot;)</code>来按名称装配，解决问题。</p>`,15)]))}const i=a(t,[["render",c]]),r=JSON.parse('{"path":"/java-tutor/springboot/common-annotation.html","title":"常用注解解析","lang":"zh-CN","frontmatter":{"description":"常用注解解析 每个bean都对应着一个class，可能是controller，可能是service，可能是dao，xml配置文件就是告诉Spring，我这里有哪些bean，他们都叫啥名字（例如helloworld），他们的class文件在哪（com.test.spring.beans.HelloWorld），他们都有哪些属性。这样，当项目启动时，Spr...","head":[["meta",{"property":"og:url","content":"https://yzqdev.github.io/cs-guide/cs-guide/java-tutor/springboot/common-annotation.html"}],["meta",{"property":"og:site_name","content":"cs-guide"}],["meta",{"property":"og:title","content":"常用注解解析"}],["meta",{"property":"og:description","content":"常用注解解析 每个bean都对应着一个class，可能是controller，可能是service，可能是dao，xml配置文件就是告诉Spring，我这里有哪些bean，他们都叫啥名字（例如helloworld），他们的class文件在哪（com.test.spring.beans.HelloWorld），他们都有哪些属性。这样，当项目启动时，Spr..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-03-24T12:34:23.000Z"}],["meta",{"property":"article:modified_time","content":"2024-03-24T12:34:23.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"常用注解解析\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2024-03-24T12:34:23.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"yzqdev\\",\\"url\\":\\"http://www.yzqdev.top\\"}]}"]]},"headers":[{"level":2,"title":"2. 进入@Configuration时代","slug":"_2-进入-configuration时代","link":"#_2-进入-configuration时代","children":[]},{"level":2,"title":"3. @Component粉墨登场","slug":"_3-component粉墨登场","link":"#_3-component粉墨登场","children":[]},{"level":2,"title":"4. “但是”又回来了","slug":"_4-但是-又回来了","link":"#_4-但是-又回来了","children":[]},{"level":2,"title":"4. 让我们以一点小干货结束今天的故事","slug":"_4-让我们以一点小干货结束今天的故事","link":"#_4-让我们以一点小干货结束今天的故事","children":[]}],"git":{"createdTime":1647861419000,"updatedTime":1711283663000,"contributors":[{"name":"yzqdev","username":"yzqdev","email":"yzqdev@outlook.com","commits":5,"url":"https://github.com/yzqdev"}]},"readingTime":{"minutes":2.82,"words":847},"filePathRelative":"java-tutor/springboot/common-annotation.md","localizedDate":"2022年3月21日","autoDesc":true}');export{i as comp,r as data};
