import{_ as s,c as a,a as e,o as p}from"./app-C8DxhDIZ.js";const t={};function o(c,n){return p(),a("div",null,n[0]||(n[0]=[e(`<h1 id="使用vue开发浏览器插件" tabindex="-1"><a class="header-anchor" href="#使用vue开发浏览器插件"><span>使用Vue开发浏览器插件</span></a></h1><div class="hint-container tip"><p class="hint-container-title">提示</p><p>推荐使用antfu大佬的模板<a href="https://github.com/antfu/vitesse-webext" target="_blank" rel="noopener noreferrer">https://github.com/antfu/vitesse-webext</a></p></div><h2 id="前言" tabindex="-1"><a class="header-anchor" href="#前言"><span>前言</span></a></h2><p>浏览器插件是前端领域比较小众的应用范畴，我们所说的浏览器插件指的就是<code>Chrome 插件</code>。在<a href="https://chrome.google.com/webstore/category/extensions?hl=zh-CN" target="_blank" rel="noopener noreferrer">Chrome 插件市场</a>上有非常多<code>有趣</code>又<code>实用</code>的<code>Chrome 插件</code>，比如<a href="https://chrome.google.com/webstore/detail/octotree/bkhaagjahfmjljalopjnoealnfndnagc" target="_blank" rel="noopener noreferrer">octotree</a>(显示github代码树)、<a href="https://chrome.google.com/webstore/detail/adblock-plus/cfhdojbkjhnklbpkdaibdccddilifddb" target="_blank" rel="noopener noreferrer">Adblock Plus</a>(拦截广告)等。</p><p>目前笔者接触<code>Chrome 插件</code>开发也有一年时间，最初团队中使用<code>原生js+jquery</code>的方式开发插件，后来考虑使用Vue重构插件，主要原因在于:</p><ul><li>插件的功能日益增多</li><li>原生开发效率低下</li><li>没有模块，不易维护</li><li>团队技术栈偏Vue</li></ul><p>因此本篇文章旨在分享笔者在<code>基于vue-cli开发浏览器插件</code>的工程化实践经验以及<code>部分功能的思考与实现</code>，在整理<code>Vue开发插件的有关知识</code>的同时提供给<code>想尝试浏览器插件开发</code>的开发者<code>Vue开发插件</code>的一点思路。如果你还未熟悉<code>浏览器插件开发</code>，请先借助<a href="https://www.cnblogs.com/liuxianan/p/chrome-plugin-develop.html#%E5%86%99%E5%9C%A8%E5%89%8D%E9%9D%A2" target="_blank" rel="noopener noreferrer">这篇文章</a>了解插件开发的基础知识(本篇文章默认你已认真读完)，再进行Vue开发插件的实践。</p><h2 id="项目工程化" tabindex="-1"><a class="header-anchor" href="#项目工程化"><span>项目工程化</span></a></h2><h3 id="改造vue-config-js" tabindex="-1"><a class="header-anchor" href="#改造vue-config-js"><span>改造vue.config.js</span></a></h3><p>插件中必不可少的文件是<code>manifest.json</code>(必须放在项目根目录)，我们知道<code>package.json</code>是项目的基本配置文件，那<code>manifest.json</code>就是<code>chrome 插件</code>中最重要的配置文件。这个文件记录插件里<code>background</code>、<code>content_scripts</code>、<code>browser_action</code>等配置的相关规则和文件摆放位置。</p><p>假如有这样一个<code>manifest.json</code>文件:</p><div class="language-json line-numbers-mode" data-highlighter="prismjs" data-ext="json" data-title="json"><pre><code><span class="line"><span class="token punctuation">{</span></span>
<span class="line">  <span class="token property">&quot;manifest_version&quot;</span><span class="token operator">:</span> <span class="token number">2</span><span class="token punctuation">,</span></span>
<span class="line">  <span class="token property">&quot;name&quot;</span><span class="token operator">:</span> <span class="token string">&quot;vue-chrome-extension&quot;</span><span class="token punctuation">,</span></span>
<span class="line">  <span class="token property">&quot;description&quot;</span><span class="token operator">:</span> <span class="token string">&quot;基于vue的chrome插件&quot;</span><span class="token punctuation">,</span></span>
<span class="line">  <span class="token property">&quot;version&quot;</span><span class="token operator">:</span> <span class="token string">&quot;1.0.0&quot;</span><span class="token punctuation">,</span></span>
<span class="line">  <span class="token property">&quot;browser_action&quot;</span><span class="token operator">:</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token property">&quot;default_title&quot;</span><span class="token operator">:</span> <span class="token string">&quot;vue-chrome-extension&quot;</span><span class="token punctuation">,</span></span>
<span class="line">    <span class="token property">&quot;default_icon&quot;</span><span class="token operator">:</span> <span class="token string">&quot;assets/logo.png&quot;</span><span class="token punctuation">,</span></span>
<span class="line">    <span class="token property">&quot;default_popup&quot;</span><span class="token operator">:</span> <span class="token string">&quot;popup.html&quot;</span></span>
<span class="line">  <span class="token punctuation">}</span><span class="token punctuation">,</span></span>
<span class="line">  <span class="token property">&quot;permissions&quot;</span><span class="token operator">:</span> <span class="token punctuation">[</span></span>
<span class="line">    <span class="token string">&quot;webRequestBlocking&quot;</span><span class="token punctuation">,</span></span>
<span class="line">    <span class="token string">&quot;notifications&quot;</span><span class="token punctuation">,</span></span>
<span class="line">    <span class="token string">&quot;tabs&quot;</span><span class="token punctuation">,</span></span>
<span class="line">    <span class="token string">&quot;webRequest&quot;</span><span class="token punctuation">,</span></span>
<span class="line">    <span class="token string">&quot;http://*/&quot;</span><span class="token punctuation">,</span></span>
<span class="line">    <span class="token string">&quot;https://*/&quot;</span><span class="token punctuation">,</span></span>
<span class="line">    <span class="token string">&quot;&lt;all_urls&gt;&quot;</span><span class="token punctuation">,</span></span>
<span class="line">    <span class="token string">&quot;storage&quot;</span><span class="token punctuation">,</span></span>
<span class="line">    <span class="token string">&quot;activeTab&quot;</span></span>
<span class="line">  <span class="token punctuation">]</span><span class="token punctuation">,</span></span>
<span class="line">  <span class="token property">&quot;background&quot;</span><span class="token operator">:</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token property">&quot;scripts&quot;</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">&quot;js/background.js&quot;</span><span class="token punctuation">]</span></span>
<span class="line">  <span class="token punctuation">}</span><span class="token punctuation">,</span></span>
<span class="line">  <span class="token property">&quot;icons&quot;</span><span class="token operator">:</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token property">&quot;16&quot;</span><span class="token operator">:</span> <span class="token string">&quot;assets/logo.png&quot;</span><span class="token punctuation">,</span></span>
<span class="line">    <span class="token property">&quot;48&quot;</span><span class="token operator">:</span> <span class="token string">&quot;assets/logo.png&quot;</span><span class="token punctuation">,</span></span>
<span class="line">    <span class="token property">&quot;128&quot;</span><span class="token operator">:</span> <span class="token string">&quot;assets/logo.png&quot;</span></span>
<span class="line">  <span class="token punctuation">}</span><span class="token punctuation">,</span></span>
<span class="line">  <span class="token property">&quot;content_security_policy&quot;</span><span class="token operator">:</span> <span class="token string">&quot;script-src &#39;self&#39; &#39;unsafe-eval&#39;; object-src &#39;self&#39;&quot;</span><span class="token punctuation">,</span></span>
<span class="line">  <span class="token property">&quot;content_scripts&quot;</span><span class="token operator">:</span> <span class="token punctuation">[</span></span>
<span class="line">    <span class="token punctuation">{</span></span>
<span class="line">      <span class="token property">&quot;matches&quot;</span><span class="token operator">:</span> <span class="token punctuation">[</span></span>
<span class="line">        <span class="token string">&quot;https://*.baidu.com/*&quot;</span></span>
<span class="line">      <span class="token punctuation">]</span><span class="token punctuation">,</span></span>
<span class="line">      <span class="token property">&quot;css&quot;</span><span class="token operator">:</span> <span class="token punctuation">[</span></span>
<span class="line">        <span class="token string">&quot;css/content.css&quot;</span></span>
<span class="line">      <span class="token punctuation">]</span><span class="token punctuation">,</span></span>
<span class="line">      <span class="token property">&quot;js&quot;</span><span class="token operator">:</span> <span class="token punctuation">[</span></span>
<span class="line">        <span class="token string">&quot;js/content.js&quot;</span></span>
<span class="line">      <span class="token punctuation">]</span><span class="token punctuation">,</span></span>
<span class="line">      <span class="token property">&quot;run_at&quot;</span><span class="token operator">:</span> <span class="token string">&quot;document_end&quot;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line">  <span class="token punctuation">]</span><span class="token punctuation">,</span></span>
<span class="line">  <span class="token property">&quot;web_accessible_resources&quot;</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">&quot;fonts/*&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;inject.js&quot;</span><span class="token punctuation">]</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><code>manifest.json</code>定义了插件的目录文件结构，上面配置对应这样的结构:</p><div class="language-text" data-highlighter="prismjs" data-ext="text" data-title="text"><pre><code><span class="line">.</span>
<span class="line">├── assets</span>
<span class="line">│   └── logo.png</span>
<span class="line">├── css</span>
<span class="line">│   └── content.css</span>
<span class="line">├── inject.js</span>
<span class="line">├── js</span>
<span class="line">│   ├── background.js</span>
<span class="line">│   └── content.js</span>
<span class="line">├── manifest.json</span>
<span class="line">└── popup.html</span>
<span class="line"></span>
<span class="line"></span></code></pre></div><p>因此我们必须改造<code>vue.config.js</code>文件，让<code>Vue-cli</code>(也可以是webpack)打包后的文件结构与上面结构一致，我们这样定义<code>vue.config.js</code>：</p><p>配置好<code>vue.config.js</code>后再<code>package.json</code>加入脚本:</p><div class="language-javascript" data-highlighter="prismjs" data-ext="js" data-title="js"><pre><code><span class="line"><span class="token string-property property">&quot;scripts&quot;</span><span class="token operator">:</span> <span class="token punctuation">{</span></span>
<span class="line"> <span class="token string-property property">&quot;serve&quot;</span><span class="token operator">:</span> <span class="token string">&quot;vue-cli-service build --watch&quot;</span><span class="token punctuation">,</span></span>
<span class="line">    <span class="token string-property property">&quot;build&quot;</span><span class="token operator">:</span> <span class="token string">&quot;vue-cli-service build&quot;</span></span>
<span class="line"><span class="token punctuation">}</span><span class="token punctuation">,</span>  </span>
<span class="line"></span>
<span class="line"></span></code></pre></div><p>到这里就可以进行插件的开发工作了，<code>npm run serve</code>和<code>npm run build</code> 分别提供了<code>开发</code>和<code>生产</code>的命令。</p><h3 id="热刷新" tabindex="-1"><a class="header-anchor" href="#热刷新"><span>热刷新</span></a></h3><p><code>vue</code>和<code>react</code>都提供了<code>模块热替换(hmr)</code>的功能，这大大的提高我们开发调试代码的效率。那我们调试插件需要这样操作:</p><ol><li>打开谷歌浏览器的<code>扩展程序</code>页面</li><li>开启开发者模式，选择<code>加载已解压的扩展程序</code>，加入插件文件，插件就开始运行了</li><li>改动代码后保存</li><li>回到插件面板刷新改插件，加载最新代码</li><li>到目标页刷新页面(<code>content scripts</code>需要这样操作)，查看改动</li></ol><p>可以看到整个调试过程比较繁琐且重复，笔者使用了<a href="https://github.com/xpl/crx-hotreload" target="_blank" rel="noopener noreferrer">github</a>上热刷新的解决方案(如果有更好的方案请告知)，之所以称它为<code>热刷新</code>，是因为它会强制刷新页面，并不是真正意义上的<code>热替换</code>(不刷新页面)，使用它后我们的调试过程是这样:</p><ol><li>打开谷歌浏览器的<code>扩展程序</code>页面</li><li>开启开发者模式，选择<code>加载已解压的扩展程序</code>，加入插件文件，插件就开始运行了</li><li>改动代码后保存</li><li>转到目标页，目标页自动刷新，刷新完成后查看改动</li></ol><p><code>热刷新</code>主要会帮我们做这几个工作:</p><ul><li>插件加载最新的代码</li><li>目标页自动强制刷新(对于<code>content scripts</code>)，应用最新代码</li></ul><p><code>热刷新</code>的实现也就50多行代码，其原理就是:</p><ol><li>在<code>background</code>加入代码逻辑(利用<code>background</code>能长时间活动在后台的特点)</li><li>通过<code>chrome.runtime.getPackageDirectoryEntry</code>获取插件的文件目录，监听文件变化</li><li>递归整理出所有文件，再将这些文件的文件名加上上次修改时间组成数组返回</li><li>根据<code>文件名加上上次修改时间</code>的变化来决定是否刷新页面，再通过<code>setTimeout</code>间歇性递归监听文件变化的方法</li><li>刷新的机制是通过<code>chrome.tabs.query</code>找到当前页(当前活动标签页)，执行<code>chrome.tabs.reload</code>强制刷新页面</li></ol><p><code>热刷新</code>缺陷：</p><ul><li>自动刷新当前浏览器活动页，如果当前活动页不是你的目标刷新页面，则还需要到目标页面手动刷新</li><li>改动代码后长时间没打开浏览器，可能没有加载最新代码，需要手动加载插件并刷新页面</li></ul><h3 id="插件打包" tabindex="-1"><a class="header-anchor" href="#插件打包"><span>插件打包</span></a></h3><p>打开<code>谷歌扩展程序页面</code>将<code>vue-cli</code>打包后的文件打包，第一次打包会在项目根目录生成一个<code>插件私钥</code>(用于区分插件)和<code>crx</code>文件(插件生产环境的文件格式，本质是ZIP文件，只是谷歌插入了自定义的私有字段，如，插件描述，插件ID，密钥等)---<a href="https://blog.csdn.net/wanwuguicang/article/details/79742017" target="_blank" rel="noopener noreferrer">插件私钥和crx参考</a>，我们可以使用<a href="https://github.com/oncletom/crx" target="_blank" rel="noopener noreferrer">crx</a>(打包成crx的npm包)配合<code>插件私钥</code>可以将插件打包成<code>crx</code>文件。我们在项目中加入这样一个脚本:</p><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js" data-title="js"><pre><code><span class="line"><span class="token comment">// src/scripts/crx.js</span></span>
<span class="line"><span class="token keyword">const</span> fs <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&quot;fs&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">const</span> path <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&quot;path&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">const</span> manifest <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span>path<span class="token punctuation">.</span><span class="token function">resolve</span><span class="token punctuation">(</span>__dirname<span class="token punctuation">,</span> <span class="token string">&quot;../chrome/manifest.json&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">const</span> ChromeExtension <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&quot;crx&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">const</span> crxName <span class="token operator">=</span> <span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>manifest<span class="token punctuation">.</span>name<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">-v</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>manifest<span class="token punctuation">.</span>version<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">.crx</span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">const</span> crx <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ChromeExtension</span><span class="token punctuation">(</span><span class="token punctuation">{</span></span>
<span class="line">  <span class="token literal-property property">privateKey</span><span class="token operator">:</span> fs<span class="token punctuation">.</span><span class="token function">readFileSync</span><span class="token punctuation">(</span>path<span class="token punctuation">.</span><span class="token function">resolve</span><span class="token punctuation">(</span>__dirname<span class="token punctuation">,</span> <span class="token string">&quot;../../dist.pem&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">crx</span>
<span class="line">  <span class="token punctuation">.</span><span class="token function">load</span><span class="token punctuation">(</span>path<span class="token punctuation">.</span><span class="token function">resolve</span><span class="token punctuation">(</span>__dirname<span class="token punctuation">,</span> <span class="token string">&quot;../../dist&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span></span>
<span class="line">  <span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token parameter">crx</span> <span class="token operator">=&gt;</span> crx<span class="token punctuation">.</span><span class="token function">pack</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span></span>
<span class="line">  <span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token parameter">crxBuffer</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span></span>
<span class="line">    fs<span class="token punctuation">.</span><span class="token function">writeFile</span><span class="token punctuation">(</span>crxName<span class="token punctuation">,</span> crxBuffer<span class="token punctuation">,</span> <span class="token parameter">err</span> <span class="token operator">=&gt;</span></span>
<span class="line">      err</span>
<span class="line">        <span class="token operator">?</span> console<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span></span>
<span class="line">        <span class="token operator">:</span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">&gt;&gt;&gt;&gt;&gt;&gt;&gt;  </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>crxName<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">  &lt;&lt;&lt;&lt;&lt;&lt;&lt; 已打包完成</span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">)</span></span>
<span class="line">    <span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token punctuation">}</span><span class="token punctuation">)</span></span>
<span class="line">  <span class="token punctuation">.</span><span class="token function">catch</span><span class="token punctuation">(</span><span class="token parameter">err</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span></span>
<span class="line">    console<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在<code>package.json</code>加入我们添加的脚本:<code>&quot;build:crx&quot;: &quot;npm run build &amp;&amp; node src/scripts/crx.js&quot;</code></p><p>使用<code>build:crx</code>命令能把<code>vue-cli</code>打包后的文件再打包成一个<code>crx</code>文件，提高了打包的效率。</p><h2 id="添加基础功能" tabindex="-1"><a class="header-anchor" href="#添加基础功能"><span>添加基础功能</span></a></h2><p>上面主要围绕<code>修改Vue-cli项目</code>、<code>热刷新调试</code>、<code>自动打包</code>等工程化的几个方面展开阐述，接下来主要分享下项目中几个通用的解决方案。</p><h3 id="插入方法" tabindex="-1"><a class="header-anchor" href="#插入方法"><span>插入方法</span></a></h3><p><code>content scripts</code>主要往目标页面插入我们的js，这些脚本通常是插入我们的dom。例如:</p><p>![img](data:image/svg+xml;utf8,)</p><p>这是某网盘的插件(该插件目前已失效，这里只是展示)，该插件在页面上插入黑框标注的按钮，这就是<code>content scripts</code>的作用。</p><p>回到<code>vue</code>项目中笔者封装了一个通用的<code>将Vue组件转为真实dom</code>的插入方法</p><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js" data-title="js"><pre><code><span class="line"><span class="token keyword">import</span> Vue <span class="token keyword">from</span> <span class="token string">&quot;vue&quot;</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">function</span> <span class="token function">insert</span><span class="token punctuation">(</span>component<span class="token punctuation">,</span> insertSelector <span class="token operator">=</span> <span class="token string">&quot;body&quot;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token function">insertDomFactory</span><span class="token punctuation">(</span>component<span class="token punctuation">,</span> insertSelector<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"><span class="token keyword">function</span> <span class="token function">insertDomFactory</span><span class="token punctuation">(</span><span class="token parameter">component<span class="token punctuation">,</span> insertSelector</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token keyword">const</span> vm <span class="token operator">=</span> <span class="token function">generateVueInstance</span><span class="token punctuation">(</span>component<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">  <span class="token function">generateInsertDom</span><span class="token punctuation">(</span>insertSelector<span class="token punctuation">,</span> vm<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">// 将createElement生成的元素插入到目标dom中，再将vue实例挂载到上面</span></span>
<span class="line"><span class="token keyword">function</span> <span class="token function">generateInsertDom</span><span class="token punctuation">(</span><span class="token parameter">insertSelector<span class="token punctuation">,</span> vm</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token comment">// 待插入的dom</span></span>
<span class="line">  <span class="token keyword">const</span> insertDom <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">querySelectorAll</span><span class="token punctuation">(</span>insertSelector<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">  insertDom<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token parameter">item</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">const</span> insert <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">createElement</span><span class="token punctuation">(</span><span class="token string">&quot;div&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    insert<span class="token punctuation">.</span>id <span class="token operator">=</span> <span class="token string">&quot;insert-item&quot;</span><span class="token punctuation">;</span></span>
<span class="line">    item<span class="token punctuation">.</span><span class="token function">appendChild</span><span class="token punctuation">(</span>insert<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    vm<span class="token punctuation">.</span><span class="token function">$mount</span><span class="token punctuation">(</span><span class="token string">&quot;#insert-item&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">// 生成Vue实例</span></span>
<span class="line"><span class="token keyword">function</span> <span class="token function">generateVueInstance</span><span class="token punctuation">(</span><span class="token parameter">component</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token keyword">const</span> insertCon <span class="token operator">=</span> Vue<span class="token punctuation">.</span><span class="token function">extend</span><span class="token punctuation">(</span>component<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">  <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">insertCon</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">export</span> <span class="token keyword">default</span> insert<span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>插入步骤为:</p><ol><li>用传入的组件通过<code>extend</code>生成构造器，将实例化后的的<code>vm</code>返回</li><li>遍历目标选择器dom</li><li>通过<code>createElement</code> 生成一个<code>div</code>插入到目标dom上</li><li>调用<code>vm</code>实例<code>$mount</code>挂载目标dom</li></ol><p>接下来把我们的组件插入到页面上:</p><div class="language-javascript" data-highlighter="prismjs" data-ext="js" data-title="js"><pre><code><span class="line"><span class="token keyword">import</span> App <span class="token keyword">from</span> <span class="token string">&quot;./App/App.vue&quot;</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">import</span> insert <span class="token keyword">from</span> <span class="token string">&quot;@/utils/insert&quot;</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token function">insert</span><span class="token punctuation">(</span>App<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"></span></code></pre></div><p>上面的插入方法都是通过<code>new Vue</code>的方式生成，那页面上可能会存在多个Vue根实例，组件(除非父子组件)间就不能用<code>props/$emit</code>通信，我们可以引入<code>mixin</code>，配合<code>vuex</code>将<code>store</code>混合到全局<code>Vue</code>上(当然还可以使用<code>event bus</code>)</p><div class="language-javascript" data-highlighter="prismjs" data-ext="js" data-title="js"><pre><code><span class="line"><span class="token comment">// store mixin</span></span>
<span class="line"><span class="token keyword">import</span> store <span class="token keyword">from</span> <span class="token string">&quot;@/store&quot;</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token function">beforeCreate</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">this</span><span class="token punctuation">.</span>$store <span class="token operator">=</span> store<span class="token punctuation">;</span></span>
<span class="line">  <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"></span></code></pre></div><p>全局混合</p><div class="language-javascript" data-highlighter="prismjs" data-ext="js" data-title="js"><pre><code><span class="line"><span class="token keyword">import</span> Vue <span class="token keyword">from</span> <span class="token string">&quot;vue&quot;</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">Vue<span class="token punctuation">.</span><span class="token function">mixin</span><span class="token punctuation">(</span>stroe<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"></span></code></pre></div><p>现在每个<code>Vue</code>组件都有了访问<code>store</code>的能力，可以基于<code>vuex</code>进行通信。</p><h3 id="请求获取" tabindex="-1"><a class="header-anchor" href="#请求获取"><span>请求获取</span></a></h3><p>笔者的插件项目中某个需求需要获取到原页面上某接口返回的数据，类似抓取数据的功能，提供三种解决方案：</p><ul><li>devtools <code>devtools</code>的权限非常大，只有<code>devtools</code>可以访问<code>chrome.devtools api</code>，开启<code>devtools</code>可以监听网页中接口的请求，<a href="https://chrome.google.com/webstore/detail/nhdogjmejiglipccpnnnanhbledajbpd" target="_blank" rel="noopener noreferrer">vue-devtools</a>插件就是通过该方式开发 我们这样开启<code>devtools</code>:</li></ul><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js" data-title="js"><pre><code><span class="line"><span class="token comment">// 创建一个Panel</span></span>
<span class="line"><span class="token comment">// 这里配置F12面板里的标签页</span></span>
<span class="line">chrome<span class="token punctuation">.</span>devtools<span class="token punctuation">.</span>panels<span class="token punctuation">.</span><span class="token function">create</span><span class="token punctuation">(</span></span>
<span class="line"><span class="token comment">// title</span></span>
<span class="line"><span class="token string">&quot;vue-chrome-extension&quot;</span><span class="token punctuation">,</span></span>
<span class="line"><span class="token comment">// iconPath</span></span>
<span class="line"><span class="token keyword">null</span><span class="token punctuation">,</span></span>
<span class="line"><span class="token comment">// pagePath</span></span>
<span class="line"><span class="token string">&quot;panel.html&quot;</span></span>
<span class="line">  <span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">  </span>
<span class="line">  <span class="token comment">// 打印错误日志</span></span>
<span class="line"><span class="token keyword">const</span> <span class="token function-variable function">log</span> <span class="token operator">=</span> <span class="token parameter">args</span> <span class="token operator">=&gt;</span></span>
<span class="line">  chrome<span class="token punctuation">.</span>devtools<span class="token punctuation">.</span>inspectedWindow<span class="token punctuation">.</span><span class="token function">eval</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string"></span>
<span class="line">      console.log(</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span><span class="token constant">JSON</span><span class="token punctuation">.</span><span class="token function">stringify</span><span class="token punctuation">(</span>args<span class="token punctuation">)</span><span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">);</span>
<span class="line">  </span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">// 注册回调，每一个http请求响应后，都触发该回调</span></span>
<span class="line">chrome<span class="token punctuation">.</span>devtools<span class="token punctuation">.</span>network<span class="token punctuation">.</span>onRequestFinished<span class="token punctuation">.</span><span class="token function">addListener</span><span class="token punctuation">(</span><span class="token keyword">async</span> <span class="token punctuation">(</span><span class="token parameter"><span class="token operator">...</span>args</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token keyword">try</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">const</span> <span class="token punctuation">[</span></span>
<span class="line">      <span class="token punctuation">{</span></span>
<span class="line">        <span class="token comment">// 请求的类型，查询参数，以及url</span></span>
<span class="line">        <span class="token literal-property property">request</span><span class="token operator">:</span> <span class="token punctuation">{</span> url <span class="token punctuation">}</span><span class="token punctuation">,</span></span>
<span class="line">        <span class="token comment">// 该方法可用于获取响应体</span></span>
<span class="line">        getContent</span>
<span class="line">      <span class="token punctuation">}</span></span>
<span class="line">    <span class="token punctuation">]</span> <span class="token operator">=</span> args<span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">    <span class="token keyword">if</span> <span class="token punctuation">(</span>url<span class="token punctuation">.</span><span class="token function">indexOf</span><span class="token punctuation">(</span><span class="token string">&quot;xxxx&quot;</span><span class="token punctuation">)</span> <span class="token operator">===</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">      <span class="token keyword">const</span> content <span class="token operator">=</span> <span class="token keyword">await</span> <span class="token keyword">new</span> <span class="token class-name">Promise</span><span class="token punctuation">(</span><span class="token parameter">res</span> <span class="token operator">=&gt;</span> <span class="token function">getContent</span><span class="token punctuation">(</span>res<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">      <span class="token comment">// 发送请求内容</span></span>
<span class="line">      chrome<span class="token punctuation">.</span>runtime<span class="token punctuation">.</span><span class="token function">sendMessage</span><span class="token punctuation">(</span><span class="token punctuation">{</span> content <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line">  <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span>err<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token function">log</span><span class="token punctuation">(</span>err<span class="token punctuation">.</span>stack <span class="token operator">||</span> err<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li><code>devtools</code>页面中获取到接口响应实体后再将内容发送出去，具体的模块通信可以看<a href="https://www.cnblogs.com/liuxianan/p/chrome-plugin-develop.html#%E6%B6%88%E6%81%AF%E9%80%9A%E4%BF%A1" target="_blank" rel="noopener noreferrer">这里</a>。 缺点:需要开启<code>F12</code></li><li>重发请求 因为使用插件的用户在目标页处在登录状态，我们就可以利用登录状态(<code>cookie</code>)来拷贝目标接口地址，再通过请求重发获取响应内容，我们可以这样实现:</li></ul><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js" data-title="js"><pre><code><span class="line"><span class="token keyword">import</span> axios <span class="token keyword">from</span> <span class="token string">&quot;@/utils/axios&quot;</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">// 根据自定义请求头判断是否需要重发</span></span>
<span class="line"><span class="token keyword">function</span> <span class="token function">isRequestSelf</span><span class="token punctuation">(</span><span class="token parameter">headers</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token keyword">return</span> headers<span class="token punctuation">.</span><span class="token function">some</span><span class="token punctuation">(</span><span class="token parameter">header</span> <span class="token operator">=&gt;</span> header<span class="token punctuation">.</span>name <span class="token operator">===</span> <span class="token string">&quot;X-No-Rerequest&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">// 使用后台请求</span></span>
<span class="line"><span class="token keyword">const</span> <span class="token function-variable function">installRequest</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span></span>
<span class="line">  chrome<span class="token punctuation">.</span>webRequest<span class="token punctuation">.</span>onBeforeSendHeaders<span class="token punctuation">.</span><span class="token function">addListener</span><span class="token punctuation">(</span></span>
<span class="line">    <span class="token keyword">async</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">details</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">      <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">isRequestSelf</span><span class="token punctuation">(</span>details<span class="token punctuation">.</span>requestHeaders<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token keyword">const</span> res <span class="token operator">=</span> <span class="token keyword">await</span> axios<span class="token punctuation">.</span><span class="token function">request</span><span class="token punctuation">(</span><span class="token punctuation">{</span></span>
<span class="line">          <span class="token literal-property property">method</span><span class="token operator">:</span> details<span class="token punctuation">.</span>method<span class="token punctuation">,</span></span>
<span class="line">          <span class="token literal-property property">url</span><span class="token operator">:</span> details<span class="token punctuation">.</span>url<span class="token punctuation">,</span></span>
<span class="line">          <span class="token comment">// 添加自定义请求头，区分页面和插件请求，防止循环请求</span></span>
<span class="line">          <span class="token literal-property property">headers</span><span class="token operator">:</span> <span class="token punctuation">{</span></span>
<span class="line">            <span class="token string-property property">&quot;X-No-Rerequest&quot;</span><span class="token operator">:</span> <span class="token string">&quot;true&quot;</span></span>
<span class="line">          <span class="token punctuation">}</span></span>
<span class="line">        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token comment">// 后续可以将响应实体转发出去，与其他模块进行通信</span></span>
<span class="line">      <span class="token punctuation">}</span></span>
<span class="line">    <span class="token punctuation">}</span><span class="token punctuation">,</span></span>
<span class="line">    <span class="token punctuation">{</span> <span class="token literal-property property">urls</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">&quot;https://www.baidu.com/*&quot;</span><span class="token punctuation">]</span> <span class="token punctuation">}</span><span class="token punctuation">,</span></span>
<span class="line">    <span class="token punctuation">[</span><span class="token string">&quot;blocking&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;requestHeaders&quot;</span><span class="token punctuation">]</span></span>
<span class="line">  <span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">export</span> <span class="token keyword">default</span> installRequest<span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>缺点:重发请求需要消耗性能</li><li>注入js，替换ajax对象(<strong>推荐</strong>) 笔者遇到的情况非常严苛: <ul><li>插件项目是基于<code>content scripts</code>，<code>devtools</code>方式要打开F12，用户是开发者也许能够理解，但对普通用户肯定会影响到插件使用体验</li><li>使用<code>重发请求</code>方式，但目标网站中的目标接口安全措施做的非常完美：请求url中有一个随机参数，这个参数由<code>鼠标位置</code>、<code>时间戳</code>、<code>页面高度</code>等参数合成，可以说独一无二。虽然在网上找了解出该参数的方法，但重发请求后，返回的内容与原请求响应内容不一致(也就是说该接口的内容是随机返回的)。</li></ul></li></ul><p>前两种方式对笔者的实际情况不适用，笔者从<code>请求拦截</code>到<code>请求替换</code>的思路中找到最终的解决方案。我们可以这样实现:</p><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js" data-title="js"><pre><code><span class="line"><span class="token comment">// inject.js</span></span>
<span class="line"><span class="token keyword">let</span> oldXHR <span class="token operator">=</span> window<span class="token punctuation">.</span>XMLHttpRequest<span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">function</span> <span class="token function">filterUrl</span><span class="token punctuation">(</span><span class="token parameter">url</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token keyword">return</span> url<span class="token punctuation">.</span><span class="token function">indexOf</span><span class="token punctuation">(</span><span class="token string">&quot;baidu.com&quot;</span><span class="token punctuation">)</span> <span class="token operator">!==</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">function</span> <span class="token function">newXHR</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token keyword">let</span> realXHR <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">oldXHR</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">  realXHR<span class="token punctuation">.</span><span class="token function-variable function">onload</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token comment">// 发送搜索列表页数据</span></span>
<span class="line">    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">filterUrl</span><span class="token punctuation">(</span>realXHR<span class="token punctuation">.</span>responseURL<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">      window<span class="token punctuation">.</span><span class="token function">postMessage</span><span class="token punctuation">(</span><span class="token punctuation">{</span> <span class="token literal-property property">data</span><span class="token operator">:</span> realXHR<span class="token punctuation">.</span>responseText <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token string">&quot;*&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">      console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">这是onload函数请求的文本:</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>realXHR<span class="token punctuation">.</span>responseText<span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line">  <span class="token punctuation">}</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">  <span class="token keyword">return</span> realXHR<span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">window<span class="token punctuation">.</span>XMLHttpRequest <span class="token operator">=</span> newXHR<span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这种方式是使用<code>injected-script</code>，原理是先缓存页面中原<code>ajax</code>请求对象，在原<code>ajax</code>对象上添加<code>onload</code>方法，监听请求完成的回调，再将目标接口的响应实体通过相应的通信方法发送出去。 在<code>content scripts</code>中将<code>injected-script</code>插入到页面上</p><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js" data-title="js"><pre><code><span class="line"><span class="token comment">// content.js</span></span>
<span class="line"><span class="token function">injectJS</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">function</span> <span class="token function">injectJS</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">  document<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">&quot;readystatechange&quot;</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">const</span> injectPath <span class="token operator">=</span> <span class="token string">&quot;inject.js&quot;</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token keyword">const</span> temp <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">createElement</span><span class="token punctuation">(</span><span class="token string">&quot;script&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">    temp<span class="token punctuation">.</span><span class="token function">setAttribute</span><span class="token punctuation">(</span><span class="token string">&quot;type&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;text/javascript&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token comment">// 获得的地址类似：chrome-extension://ihcokhadfjfchaeagdoclpnjdiokfakg/js/inject.js</span></span>
<span class="line">    temp<span class="token punctuation">.</span>src <span class="token operator">=</span> chrome<span class="token punctuation">.</span>extension<span class="token punctuation">.</span><span class="token function">getURL</span><span class="token punctuation">(</span>injectPath<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    document<span class="token punctuation">.</span>body<span class="token punctuation">.</span><span class="token function">appendChild</span><span class="token punctuation">(</span>temp<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>为什么不用<code>content scripts</code>？请看<a href="https://www.cnblogs.com/liuxianan/p/chrome-plugin-develop.html#injected-script" target="_blank" rel="noopener noreferrer">这里</a>了解<code>content scripts</code>与<code>injected-script</code>的区别 虽然最终的实现方式只有寥寥几行代码，但提供的功能非常强大。 这样的方式也有缺点，就是只能适用于<code>ajax</code>请求的目标页面，若目标页面使用<a href="https://developer.mozilla.org/zh-CN/docs/Web/API/Fetch_API/Using_Fetch" target="_blank" rel="noopener noreferrer">fetch</a>请求，这种方式则无效。可以通过开启<a href="https://developer.mozilla.org/zh-CN/docs/Web/API/Service_Worker_API" target="_blank" rel="noopener noreferrer">service worker</a>方式实现<code>fetch</code>请求监听(笔者没有尝试过)。</p><h2 id="结束" tabindex="-1"><a class="header-anchor" href="#结束"><span>结束</span></a></h2><p>插件拥有的权限非常多，开发者可以利用这些特性提供丰富的功能。笔者将Vue开发插件的模板放到了<a href="https://github.com/Jcanno/vue-chrome-extension" target="_blank" rel="noopener noreferrer">github</a>上，若对你有帮助，欢迎<strong>star</strong>✨</p>`,65)]))}const i=s(t,[["render",o]]),u=JSON.parse('{"path":"/frontend/chrome-plugins/vue-to-chromeplugin.html","title":"使用Vue开发浏览器插件","lang":"zh-CN","frontmatter":{"description":"使用Vue开发浏览器插件 提示 推荐使用antfu大佬的模板https://github.com/antfu/vitesse-webext 前言 浏览器插件是前端领域比较小众的应用范畴，我们所说的浏览器插件指的就是Chrome 插件。在Chrome 插件市场上有非常多有趣又实用的Chrome 插件，比如octotree(显示github代码树)、Adb...","head":[["meta",{"property":"og:url","content":"https://yzqdev.github.io/cs-guide/cs-guide/frontend/chrome-plugins/vue-to-chromeplugin.html"}],["meta",{"property":"og:site_name","content":"cs-guide"}],["meta",{"property":"og:title","content":"使用Vue开发浏览器插件"}],["meta",{"property":"og:description","content":"使用Vue开发浏览器插件 提示 推荐使用antfu大佬的模板https://github.com/antfu/vitesse-webext 前言 浏览器插件是前端领域比较小众的应用范畴，我们所说的浏览器插件指的就是Chrome 插件。在Chrome 插件市场上有非常多有趣又实用的Chrome 插件，比如octotree(显示github代码树)、Adb..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:image","content":"data:image/svg+xml;utf8,"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2022-04-09T16:09:23.000Z"}],["meta",{"property":"article:modified_time","content":"2022-04-09T16:09:23.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"使用Vue开发浏览器插件\\",\\"image\\":[\\"data:image/svg+xml;utf8,\\"],\\"dateModified\\":\\"2022-04-09T16:09:23.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"yzqdev\\",\\"url\\":\\"http://www.yzqdev.top\\"}]}"]]},"headers":[{"level":2,"title":"前言","slug":"前言","link":"#前言","children":[]},{"level":2,"title":"项目工程化","slug":"项目工程化","link":"#项目工程化","children":[{"level":3,"title":"改造vue.config.js","slug":"改造vue-config-js","link":"#改造vue-config-js","children":[]},{"level":3,"title":"热刷新","slug":"热刷新","link":"#热刷新","children":[]},{"level":3,"title":"插件打包","slug":"插件打包","link":"#插件打包","children":[]}]},{"level":2,"title":"添加基础功能","slug":"添加基础功能","link":"#添加基础功能","children":[{"level":3,"title":"插入方法","slug":"插入方法","link":"#插入方法","children":[]},{"level":3,"title":"请求获取","slug":"请求获取","link":"#请求获取","children":[]}]},{"level":2,"title":"结束","slug":"结束","link":"#结束","children":[]}],"git":{"createdTime":1647861419000,"updatedTime":1649520563000,"contributors":[{"name":"yzqdev","username":"yzqdev","email":"yzqdev@outlook.com","commits":3,"url":"https://github.com/yzqdev"}]},"readingTime":{"minutes":10.37,"words":3111},"filePathRelative":"frontend/chrome-plugins/vue-to-chromeplugin.md","localizedDate":"2022年3月21日","autoDesc":true}');export{i as comp,u as data};
