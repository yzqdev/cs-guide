import{_ as n,c as s,a as t,o as a}from"./app-C8DxhDIZ.js";const p={};function i(o,e){return a(),s("div",null,e[0]||(e[0]=[t(`<h1 id="events" tabindex="-1"><a class="header-anchor" href="#events"><span>events</span></a></h1><p>events模块提供一个事件监听器,用来监听各种事件,ws就是用的events</p><div class="language-typescript" data-highlighter="prismjs" data-ext="ts" data-title="ts"><pre><code><span class="line"><span class="token keyword">import</span> EventEmitter <span class="token keyword">from</span> <span class="token string">&#39;events&#39;</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">const</span> door <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">EventEmitter</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre></div><p>他有两个内置的事件监听器</p><ul><li><code>newListener</code> 添加新的监听器</li><li><code>removeListener</code>移除一个监听器</li></ul><h2 id="emitter-addlistener" tabindex="-1"><a class="header-anchor" href="#emitter-addlistener"><span>emitter.addListener()</span></a></h2><p>是<code>emitter.on()</code>的缩写</p><h2 id="emitter-emit" tabindex="-1"><a class="header-anchor" href="#emitter-emit"><span>emitter.emit()</span></a></h2><p>触发事件</p><div class="language-typescript" data-highlighter="prismjs" data-ext="ts" data-title="ts"><pre><code><span class="line">door<span class="token punctuation">.</span><span class="token function">emit</span><span class="token punctuation">(</span><span class="token string">&#39;slam&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// emitting the event &quot;slam&quot;</span></span>
<span class="line"></span></code></pre></div><h2 id="emitter-eventnames" tabindex="-1"><a class="header-anchor" href="#emitter-eventnames"><span>emitter.eventNames()</span></a></h2><p>获取一个事件名的数组</p><h2 id="emitter-getmaxlisteners" tabindex="-1"><a class="header-anchor" href="#emitter-getmaxlisteners"><span>emitter.getMaxListeners()</span></a></h2><p>获取最多能添加的监听器数量,默认是10,可以用<code>setMaxListeners()</code>增加</p><h2 id="emitter-listenercount" tabindex="-1"><a class="header-anchor" href="#emitter-listenercount"><span>emitter.listenerCount()</span></a></h2><p>获取事件的参数个数</p><div class="language-typescript" data-highlighter="prismjs" data-ext="ts" data-title="ts"><pre><code><span class="line">door<span class="token punctuation">.</span><span class="token function">listenerCount</span><span class="token punctuation">(</span><span class="token string">&#39;open&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"></span></code></pre></div><h2 id="emitter-listeners" tabindex="-1"><a class="header-anchor" href="#emitter-listeners"><span>emitter.listeners()</span></a></h2><div class="language-typescript" data-highlighter="prismjs" data-ext="ts" data-title="ts"><pre><code><span class="line">door<span class="token punctuation">.</span><span class="token function">listeners</span><span class="token punctuation">(</span><span class="token string">&#39;open&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre></div><h2 id="emitter-off" tabindex="-1"><a class="header-anchor" href="#emitter-off"><span>emitter.off()</span></a></h2><p><code>emitter.removeListener()</code>的缩写</p><h2 id="emitter-on" tabindex="-1"><a class="header-anchor" href="#emitter-on"><span>emitter.on()</span></a></h2><p>触发一个事件,执行函数</p><div class="language-typescript" data-highlighter="prismjs" data-ext="ts" data-title="ts"><pre><code><span class="line">door<span class="token punctuation">.</span><span class="token function">on</span><span class="token punctuation">(</span><span class="token string">&#39;open&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;Door was opened&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre></div><h2 id="emitter-once" tabindex="-1"><a class="header-anchor" href="#emitter-once"><span>emitter.once()</span></a></h2><p>只执行一次回调函数</p><div class="language-typescript" data-highlighter="prismjs" data-ext="ts" data-title="ts"><pre><code><span class="line"><span class="token keyword">import</span> EventEmitter <span class="token keyword">from</span> <span class="token string">&#39;events&#39;</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">const</span> ee <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">EventEmitter</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">ee<span class="token punctuation">.</span><span class="token function">once</span><span class="token punctuation">(</span><span class="token string">&#39;my-event&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token comment">// call callback function once</span></span>
<span class="line"><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre></div><h2 id="emitter-prependlistener" tabindex="-1"><a class="header-anchor" href="#emitter-prependlistener"><span>emitter.prependListener()</span></a></h2><p>在事件列表最前面添加事件</p><h2 id="emitter-removealllisteners" tabindex="-1"><a class="header-anchor" href="#emitter-removealllisteners"><span>emitter.removeAllListeners()</span></a></h2><p>移除所有的事件</p><div class="language-typescript" data-highlighter="prismjs" data-ext="ts" data-title="ts"><pre><code><span class="line">door<span class="token punctuation">.</span><span class="token function">removeAllListeners</span><span class="token punctuation">(</span><span class="token string">&#39;open&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre></div><h2 id="emitter-removelistener" tabindex="-1"><a class="header-anchor" href="#emitter-removelistener"><span>emitter.removeListener()</span></a></h2><p>移除一个特定的事件</p><div class="language-typescript" data-highlighter="prismjs" data-ext="ts" data-title="ts"><pre><code><span class="line"><span class="token keyword">const</span> <span class="token function-variable function">doSomething</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span></span>
<span class="line">door<span class="token punctuation">.</span><span class="token function">on</span><span class="token punctuation">(</span><span class="token string">&#39;open&#39;</span><span class="token punctuation">,</span> doSomething<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">door<span class="token punctuation">.</span><span class="token function">removeListener</span><span class="token punctuation">(</span><span class="token string">&#39;open&#39;</span><span class="token punctuation">,</span> doSomething<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre></div><h2 id="emitter-setmaxlisteners" tabindex="-1"><a class="header-anchor" href="#emitter-setmaxlisteners"><span>emitter.setMaxListeners()</span></a></h2><p>设置最多的的监听器,默认是10</p>`,37)]))}const r=n(p,[["render",i]]),c=JSON.parse('{"path":"/node-tutor/apis/event.html","title":"events","lang":"zh-CN","frontmatter":{"description":"events events模块提供一个事件监听器,用来监听各种事件,ws就是用的events 他有两个内置的事件监听器 newListener 添加新的监听器 removeListener移除一个监听器 emitter.addListener() 是emitter.on()的缩写 emitter.emit() 触发事件 emitter.eventNam...","head":[["meta",{"property":"og:url","content":"https://yzqdev.github.io/cs-guide/cs-guide/node-tutor/apis/event.html"}],["meta",{"property":"og:site_name","content":"cs-guide"}],["meta",{"property":"og:title","content":"events"}],["meta",{"property":"og:description","content":"events events模块提供一个事件监听器,用来监听各种事件,ws就是用的events 他有两个内置的事件监听器 newListener 添加新的监听器 removeListener移除一个监听器 emitter.addListener() 是emitter.on()的缩写 emitter.emit() 触发事件 emitter.eventNam..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2023-06-25T05:00:38.000Z"}],["meta",{"property":"article:modified_time","content":"2023-06-25T05:00:38.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"events\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2023-06-25T05:00:38.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"yzqdev\\",\\"url\\":\\"http://www.yzqdev.top\\"}]}"]]},"headers":[{"level":2,"title":"emitter.addListener()","slug":"emitter-addlistener","link":"#emitter-addlistener","children":[]},{"level":2,"title":"emitter.emit()","slug":"emitter-emit","link":"#emitter-emit","children":[]},{"level":2,"title":"emitter.eventNames()","slug":"emitter-eventnames","link":"#emitter-eventnames","children":[]},{"level":2,"title":"emitter.getMaxListeners()","slug":"emitter-getmaxlisteners","link":"#emitter-getmaxlisteners","children":[]},{"level":2,"title":"emitter.listenerCount()","slug":"emitter-listenercount","link":"#emitter-listenercount","children":[]},{"level":2,"title":"emitter.listeners()","slug":"emitter-listeners","link":"#emitter-listeners","children":[]},{"level":2,"title":"emitter.off()","slug":"emitter-off","link":"#emitter-off","children":[]},{"level":2,"title":"emitter.on()","slug":"emitter-on","link":"#emitter-on","children":[]},{"level":2,"title":"emitter.once()","slug":"emitter-once","link":"#emitter-once","children":[]},{"level":2,"title":"emitter.prependListener()","slug":"emitter-prependlistener","link":"#emitter-prependlistener","children":[]},{"level":2,"title":"emitter.removeAllListeners()","slug":"emitter-removealllisteners","link":"#emitter-removealllisteners","children":[]},{"level":2,"title":"emitter.removeListener()","slug":"emitter-removelistener","link":"#emitter-removelistener","children":[]},{"level":2,"title":"emitter.setMaxListeners()","slug":"emitter-setmaxlisteners","link":"#emitter-setmaxlisteners","children":[]}],"git":{"createdTime":1687669238000,"updatedTime":1687669238000,"contributors":[{"name":"yzqdev","username":"yzqdev","email":"yzqdev@outlook.com","commits":1,"url":"https://github.com/yzqdev"}]},"readingTime":{"minutes":0.81,"words":242},"filePathRelative":"node-tutor/apis/event.md","localizedDate":"2023年6月25日","autoDesc":true}');export{r as comp,c as data};
