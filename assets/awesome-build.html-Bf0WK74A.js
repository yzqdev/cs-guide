import{_ as e,c as r,a as o,o as n}from"./app-C8DxhDIZ.js";const s={};function d(a,t){return n(),r("div",null,t[0]||(t[0]=[o('<h1 id="好用的打包工具" tabindex="-1"><a class="header-anchor" href="#好用的打包工具"><span>好用的打包工具</span></a></h1><p>原文：<a href="https://transitivebullsh.it/javascript-dev-tools-in-2022" target="_blank" rel="noopener noreferrer">https://transitivebullsh.it/javascript-dev-tools-in-2022</a></p><blockquote><p>在2022年，每一位 <strong>JS / TS</strong> 开发者都应该知道的最重要的开发工具的分类，包括最相关的权衡，以及一些个人建议。</p></blockquote><p>在软件工程的世界中，对所使用的工具有一个明确的了解非常重要。</p><p>但是 <strong>JS</strong> 工具总是在快速的变化着，2022年也不例外。</p><p>因此，我想把你在2022年应该知道的最重要的工具分解开来，它们最相关的权衡是什么，并提供一些个人建议。</p><p>我们将从最低级别的工具开始，然后从那里逐步升级到更高级别的工具。让我们开始💪。</p><h2 id="开发工具" tabindex="-1"><a class="header-anchor" href="#开发工具"><span>开发工具</span></a></h2><h3 id="编译器" tabindex="-1"><a class="header-anchor" href="#编译器"><span>编译器</span></a></h3><p>编译器负责将输入代码转换为某种目标输出格式。出于我们的目的，我们关注的是那些支持将现代 <strong>JavaScript</strong> 和<strong>TypeScript</strong> 转换成特定版本的 <strong>ECMAscript</strong> 的编译器，这些 <strong>ECMAscript</strong> 兼容浏览器和最新版本的 <strong>Node.js</strong>。</p><table><thead><tr><th>名称</th><th>描述</th><th>星数</th><th>语言</th><th>速度</th><th>成熟度</th><th>许可</th></tr></thead><tbody><tr><td><a href="https://www.typescriptlang.org/docs/handbook/compiler-options.html" target="_blank" rel="noopener noreferrer">tsc</a></td><td>TS官方编译器</td><td>79,300</td><td>TS</td><td>slow</td><td>非常成熟</td><td>Apache 2.0</td></tr><tr><td><a href="https://esbuild.github.io/" target="_blank" rel="noopener noreferrer">esbuild</a></td><td>快速JS/TS编译器</td><td>31,200</td><td>Go</td><td>fast</td><td>可以</td><td>MIT</td></tr><tr><td><a href="https://swc.rs/" target="_blank" rel="noopener noreferrer">swc</a></td><td>快速JS/TS编译器</td><td>21,300</td><td>Rust</td><td>fast</td><td>可以</td><td>Apache 2.0</td></tr><tr><td><a href="https://babeljs.io/" target="_blank" rel="noopener noreferrer">babel</a></td><td>JS编译器（TS 插件）</td><td>40,700</td><td>JS</td><td>slow</td><td>非常成熟</td><td>MIT</td></tr></tbody></table><p>关于这个领域最重要的一点是，它正在经历一个巨大的转变，从用高级解释语言编写的编译器 <strong>tsc</strong> 和 <strong>babel</strong>，到用更快的编译语言编写的编译器 <strong>swc</strong> 和 <strong>esbuild</strong>。</p><p>这种转变导致编译时间缩短了10-100倍，如下图所示： <img src="https://segmentfault.com/img/remote/1460000041651443" alt="1"> 如果你正在更新你的开发工具技术栈，或者在2022年开始一个新项目，那么你会想要考虑在底层使用这些下一代编译器之一。它们可能不像 <strong>TypeScript</strong> 官方编译器 <strong>tsc</strong> 和 <strong>babel</strong> 那样成熟，但构建速度快100倍的好处是不能低估的。</p><p>请注意，<strong>swc</strong>和<strong>esbuild</strong>都不进行类型检查。他们只是尽可能快速和有效地将代码转换成所需的输出格式。目前，如果你正在使用<strong>TypeScript</strong>，你几乎总是需要将官方的<strong>TypeScript</strong>编译器作为你的工具链的一部分，以保证你能最大限度地利用<strong>TypeScript</strong>的静态类型检查。值得一提的是，<strong>swc</strong>的作者 <strong>kdy1dev</strong> 正致力于将 <a href="https://kdy1.dev/posts/2022/1/tsc-go" target="_blank" rel="noopener noreferrer">tsc移植到Go中</a>，以消除在许多情况下对<strong>tsc</strong>的需求，因为<strong>tsc</strong>的编译速度往往是大多数工具链中的瓶颈。</p><h3 id="swc-vs-esbuild" tabindex="-1"><a class="header-anchor" href="#swc-vs-esbuild"><span>SWC vs esbuild</span></a></h3><p><strong>swc</strong>和<strong>esbuild</strong>都是非常优秀的、非常快的开源 <strong>JS / TS</strong> 编译器。它们的性能相当(<a href="https://datastation.multiprocess.io/blog/2021-11-13-benchmarking-esbuild-swc-typescript-babel.html" target="_blank" rel="noopener noreferrer">参考性能比较</a>)，并被一些世界上最大的公司经常用于生产环境。</p><p>在这两个编译器之间做出选择，更多地取决于构建在这些编译器之上的高级工具，而不是直接在它们之间做出选择。</p><p>使用 <strong>swc</strong> 值得注意的项目：</p><ul><li><a href="https://nextjs.org/docs/advanced-features/compiler" target="_blank" rel="noopener noreferrer">Vercel and Next.js</a></li><li><a href="https://github.com/denoland/deno_lint" target="_blank" rel="noopener noreferrer">Deno’s linter, formatter, and docs</a></li><li><a href="https://parceljs.org/" target="_blank" rel="noopener noreferrer">Parcel</a></li></ul><p>使用 <strong>esbuild</strong> 值得注意的项目：</p><ul><li><p><a href="https://vitejs.dev/" target="_blank" rel="noopener noreferrer">Vite</a></p></li><li><p><a href="https://nuxtjs.org/" target="_blank" rel="noopener noreferrer">Nuxt.js</a></p></li><li><p><a href="https://tsup.egoist.sh/" target="_blank" rel="noopener noreferrer">tsup</a></p><blockquote><p>在软件工程中，诸如“技术A比技术B更好”这样的简单叙述很少有太大的价值。相反，应该根据项目情况来决定使用哪个工具。在很多情况下，你最好使用官方的TypeScript编译器或babel。</p></blockquote></li></ul><blockquote><p>要成为一名更好的软件工程师，通常需要彻底理解这些类型的决策所涉及的权衡，并根据项目、团队和业务需求的特定约束来平衡这些权衡。</p></blockquote><h3 id="打包器-bundlers" tabindex="-1"><a class="header-anchor" href="#打包器-bundlers"><span>打包器(Bundlers)</span></a></h3><p><img src="https://segmentfault.com/img/remote/1460000041651444" alt=" title="> 打包器负责将所有的输入源文件打包成易于使用的输出格式。打包程序最常见的两个用例是为web应用打包资源和打包成库文件。</p><table><thead><tr><th>名称</th><th>描述</th><th>星数</th><th>优化了</th><th>许可</th></tr></thead><tbody><tr><td><a href="https://webpack.js.org/" target="_blank" rel="noopener noreferrer">Webpack</a></td><td>行业标准打包器</td><td>60,100</td><td>web应用、库</td><td>MIT</td></tr><tr><td><a href="https://rollupjs.org/guide/en/" target="_blank" rel="noopener noreferrer">Rollup</a></td><td>针对库打包器</td><td>21,400</td><td>库</td><td>MIT</td></tr><tr><td><a href="https://parceljs.org/" target="_blank" rel="noopener noreferrer">Parcel</a></td><td>零配置web构建工具</td><td>41,000</td><td>web应用、库</td><td>MIT</td></tr></tbody></table><p>像 <strong>webpack</strong> 和 <strong>rollup</strong> 这样的打包工具是现代 <strong>JS</strong> 工具链的 “瑞士军刀”。 它们都具有极强的可扩展性，具有维护良好的插件，覆盖了大多数主要用例。 例如，使用上面列出的任何一个流行的编译器，通过 <strong>webpack</strong> 或 <strong>rollup</strong> 转译 <strong>TS</strong> 代码，都是相对简单的。</p><p>另一方面，<strong>Parcel</strong> 提供了一种几乎为零配置的打包方法。它关注的是简单性而不是可扩展性，并在底层使用 <strong>esbuild</strong> 作为编译器。</p><p>请注意，<strong>swc</strong> 和<strong>esbuild</strong>也都提供了基本的打包功能，与这些打包器相比，它们的功能还不够全，不能包括在这个列表中。</p><p>要了解这些打包器的更详细的比较，请查看 <a href="https://bundlers.tooling.report/" target="_blank" rel="noopener noreferrer">tooling.report</a>。</p><h3 id="开发库" tabindex="-1"><a class="header-anchor" href="#开发库"><span>开发库</span></a></h3><p>这些工具旨在帮助库作者打包和发布现代的<strong>NPM</strong>包。</p><table><thead><tr><th>名称</th><th>描述</th><th>星数</th><th>编译器</th><th>打包器</th><th>许可</th></tr></thead><tbody><tr><td><a href="https://tsup.egoist.sh/" target="_blank" rel="noopener noreferrer">tsup</a></td><td>由esbuild支持的快速TS库打包器</td><td>1,800</td><td>esbuild</td><td>rollup</td><td>MIT</td></tr><tr><td><a href="https://tsdx.io/" target="_blank" rel="noopener noreferrer">tsdx</a></td><td>用于TS包开发的零配置CLI</td><td>9,500</td><td>babel</td><td>rollup</td><td>MIT</td></tr><tr><td><a href="https://github.com/developit/microbundle" target="_blank" rel="noopener noreferrer">microbundle</a></td><td>用于微小模块的零配置打包器</td><td>6,800</td><td>babel</td><td>rollup</td><td>MIT</td></tr><tr><td><a href="https://vitejs.dev" target="_blank" rel="noopener noreferrer">Vite</a></td><td>40,000</td><td>esbuild</td><td>rollup</td><td>MIT</td><td></td></tr><tr><td><a href="https://github.com/preconstruct/preconstruct" target="_blank" rel="noopener noreferrer">preconstruct</a></td><td>在 monorepos 中轻松开发和构建代码</td><td>720</td><td>babel</td><td>rollup</td><td>MIT</td></tr><tr><td><a href="https://github.com/unjs/unbuild" target="_blank" rel="noopener noreferrer">unbuild</a></td><td>统一的javascript构建系统</td><td>440</td><td>esbuild</td><td>rollup</td><td>MIT</td></tr></tbody></table><p>如果你在2022年开发一个新的库，你可能会想使用这些更高级的工具来简化你的工作流程。</p><ul><li>如果你有一个TS包，并且想利用 <strong>esbuild</strong> 提供的极快的构建速度，那么 <strong>tsupp</strong> 是一个很好的选择。</li><li>如果您有一个TS包，并且需要一些额外的功能，那么 <strong>tsdx</strong> 是一个很好的选择。</li><li>如果你有一个TS或JS包，那么<strong>microbundle</strong>也是一个不错的选择。</li><li><strong>Vite</strong>主要是一个构建前端web应用程序的工具，但它也是一个可靠的全方位选择，还包括对输出库的支持。</li></ul><p>我个人倾向于对所有新的TS包使用<strong>tsup</strong>，主要是因为一旦你体验了100倍的快速构建，就很难再考虑切换回其他版本了。</p><h4 id="更多资讯" tabindex="-1"><a class="header-anchor" href="#更多资讯"><span>更多资讯</span></a></h4><p>这些工具中的大多数目前没有为利用 <a href="https://www.typescriptlang.org/docs/handbook/project-references.html" target="_blank" rel="noopener noreferrer">composite project references</a> 的 <strong>TS monorepos</strong> 提供很好的支持。 目前，我对这种情况的建议是使用 <strong>tsc</strong> 进行类型检查和生成 <strong>.d.ts</strong> 类型（使用 <strong>emitDeclarationOnly: true</strong>）和 <strong>tsup</strong> 来编译每个子包中的代码。 有关此方法的示例，请查看 <a href="https://github.com/NotionX/react-notion-x" target="_blank" rel="noopener noreferrer">react-notion-x</a> monorepo项目（我的 OSS 项目之一）。</p><p>发布现代 <strong>NPM</strong> 包是一个微妙的话题，远远超出了本文的范围。 有关 ESM、commonjs、导出等的更多信息，请参阅：</p><ul><li><a href="https://www.the-guild.dev/blog/support-nodejs-esm" target="_blank" rel="noopener noreferrer">要支持 Node.js ESM 需要什么？</a></li><li><a href="https://github.com/sindresorhus/meta/discussions/15" target="_blank" rel="noopener noreferrer">发布</a>和<a href="https://gist.github.com/sindresorhus/a39789f98801d908bbc7ff3ecc99d99c" target="_blank" rel="noopener noreferrer">使用</a>点击预览 ESM 包</li></ul><h3 id="web-app-开发" tabindex="-1"><a class="header-anchor" href="#web-app-开发"><span>Web app 开发</span></a></h3><p>这些高级工具和框架旨在帮助开发人员构建现代web应用程序，而无需担心所有细节。</p><table><thead><tr><th>名称</th><th>描述</th><th>星数</th><th>编译器</th><th>打包器</th><th>框架</th></tr></thead><tbody><tr><td><a href="https://nextjs.org/" target="_blank" rel="noopener noreferrer">Next.js</a></td><td>用于生产的 React 框架</td><td>84,000</td><td>swc</td><td>webpack</td><td>react</td></tr><tr><td><a href="https://nuxtjs.org/" target="_blank" rel="noopener noreferrer">Nuxt.js</a></td><td>直观的 Vue 框架</td><td>39,000</td><td>esbuild</td><td>rollup</td><td>vue</td></tr><tr><td><a href="https://parceljs.org/" target="_blank" rel="noopener noreferrer">Parcel</a></td><td>零配置web构建工具</td><td>41,000</td><td>swc</td><td>custom</td><td>react vue</td></tr><tr><td><a href="https://vitejs.dev/" target="_blank" rel="noopener noreferrer">Vite</a></td><td>下一代前端工具</td><td>40,000</td><td>esbuild</td><td>rollup</td><td>react vue svelte</td></tr><tr><td><a href="https://www.snowpack.dev/" target="_blank" rel="noopener noreferrer">Snowpack</a></td><td>ESM 驱动的前端构建工具</td><td>20,000</td><td>esbuild</td><td>custom</td><td>react vue svelte</td></tr><tr><td><a href="https://create-react-app.dev/" target="_blank" rel="noopener noreferrer">Create React App</a></td><td>通过命令设置现代 Web 应用程序</td><td>94,000</td><td>babel</td><td>webpack</td><td>react</td></tr><tr><td><a href="https://kit.svelte.dev/" target="_blank" rel="noopener noreferrer">SvelteKit</a></td><td>构建 Svelte 应用程序的最快方法</td><td>7,700</td><td>esbuild</td><td>rollup</td><td>svelte</td></tr></tbody></table><p>使用<strong>swc</strong>和<strong>esbuild</strong>构建的项目数量大致相同。<strong>webpack</strong>和<strong>rollup</strong>的情况也是如此。</p><p>如果你打算在2022年使用<strong>React</strong>开发一个新的网页应用，那么我强烈推荐使用<a href="https://nextjs.org/" target="_blank" rel="noopener noreferrer"><strong>Next.js</strong></a>。它拥有最好的支持，最活跃的社区，并与世界领先的现代web应用部署平台<a href="https://vercel.com/login?next=%2Fdashboard" target="_blank" rel="noopener noreferrer">Vercel</a>紧密集成。</p><p>如果你正在使用<strong>Vue</strong>开发一个新的web应用程序，那么<a href="https://nuxtjs.org/" target="_blank" rel="noopener noreferrer">nuxt.js</a>和Vite都是很好的选择。</p><p>如果你想要更轻的东西，那就试一试 <a href="https://parceljs.org/" target="_blank" rel="noopener noreferrer">Parcel</a>。🤗</p><h2 id="总结" tabindex="-1"><a class="header-anchor" href="#总结"><span>总结</span></a></h2><p>在过去的10年里，现代web开发已经有了显著的发展。今天的开发人员很幸运，能够拥有如此广泛的令人惊叹的、维护良好的工具可供选择。</p><p>希望这篇文章能够帮助您分析当前 <strong>JS/TS</strong> 开发工具领域中最重要的方面，并帮助您做出更明智的决策。</p>',49)]))}const p=e(s,[["render",d]]),g=JSON.parse('{"path":"/frontend/framework/packaging-tool/awesome-build.html","title":"好用的打包工具","lang":"zh-CN","frontmatter":{"description":"好用的打包工具 原文：https://transitivebullsh.it/javascript-dev-tools-in-2022 在2022年，每一位 JS / TS 开发者都应该知道的最重要的开发工具的分类，包括最相关的权衡，以及一些个人建议。 在软件工程的世界中，对所使用的工具有一个明确的了解非常重要。 但是 JS 工具总是在快速的变化着，2...","head":[["meta",{"property":"og:url","content":"https://yzqdev.github.io/cs-guide/cs-guide/frontend/framework/packaging-tool/awesome-build.html"}],["meta",{"property":"og:site_name","content":"cs-guide"}],["meta",{"property":"og:title","content":"好用的打包工具"}],["meta",{"property":"og:description","content":"好用的打包工具 原文：https://transitivebullsh.it/javascript-dev-tools-in-2022 在2022年，每一位 JS / TS 开发者都应该知道的最重要的开发工具的分类，包括最相关的权衡，以及一些个人建议。 在软件工程的世界中，对所使用的工具有一个明确的了解非常重要。 但是 JS 工具总是在快速的变化着，2..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:image","content":"https://segmentfault.com/img/remote/1460000041651443"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2023-06-25T05:00:38.000Z"}],["meta",{"property":"article:modified_time","content":"2023-06-25T05:00:38.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"好用的打包工具\\",\\"image\\":[\\"https://segmentfault.com/img/remote/1460000041651443\\",\\"https://segmentfault.com/img/remote/1460000041651444\\"],\\"dateModified\\":\\"2023-06-25T05:00:38.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"yzqdev\\",\\"url\\":\\"http://www.yzqdev.top\\"}]}"]]},"headers":[{"level":2,"title":"开发工具","slug":"开发工具","link":"#开发工具","children":[{"level":3,"title":"编译器","slug":"编译器","link":"#编译器","children":[]},{"level":3,"title":"SWC vs esbuild","slug":"swc-vs-esbuild","link":"#swc-vs-esbuild","children":[]},{"level":3,"title":"打包器(Bundlers)","slug":"打包器-bundlers","link":"#打包器-bundlers","children":[]},{"level":3,"title":"开发库","slug":"开发库","link":"#开发库","children":[{"level":4,"title":"更多资讯","slug":"更多资讯","link":"#更多资讯","children":[]}]},{"level":3,"title":"Web app 开发","slug":"web-app-开发","link":"#web-app-开发","children":[]}]},{"level":2,"title":"总结","slug":"总结","link":"#总结","children":[]}],"git":{"createdTime":1656256352000,"updatedTime":1687669238000,"contributors":[{"name":"yzqdev","username":"yzqdev","email":"yzqdev@outlook.com","commits":3,"url":"https://github.com/yzqdev"}]},"readingTime":{"minutes":7.53,"words":2260},"filePathRelative":"frontend/framework/packaging-tool/awesome-build.md","localizedDate":"2022年6月26日","autoDesc":true}');export{p as comp,g as data};
