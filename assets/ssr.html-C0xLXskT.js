import{_ as a,c as o,a as t,b as r,e as s,d,r as i,o as l}from"./app-C8DxhDIZ.js";const c={};function p(u,e){const n=i("VPIcon");return l(),o("div",null,[e[2]||(e[2]=t(`<h1 id="ssr部署" tabindex="-1"><a class="header-anchor" href="#ssr部署"><span>ssr部署</span></a></h1><h2 id="astro" tabindex="-1"><a class="header-anchor" href="#astro"><span>astro</span></a></h2><p>三种模式 <code>output</code>设置为<code>&quot;hybrid&quot; | &quot;static&quot; | &quot;server&quot;</code></p><p>static是纯静态html 即为ssg模式,此时用不上ssr, 只需要<code>astro build</code>然后把dist目录扔到服务器用nginx代理一下就行(注意动态路由必须使用<code>getStaticPaths</code>)</p><p>hybrid指的是静态html和动态html混合的,此时需要ssr,同时动态页面需要设置prerender为false,不能使用<code>getStaticPaths</code>,部署就是<code>astro build</code>然后<code>node .\\dist\\server\\entry.mjs</code>就好了</p><p>server指的是纯ssr,没有html,部署就是<code>astro build</code>然后<code>node .\\dist\\server\\entry.mjs</code>就好了</p><h2 id="nuxt部署" tabindex="-1"><a class="header-anchor" href="#nuxt部署"><span>nuxt部署</span></a></h2><p>设置ssr为true即为服务端渲染,设置为false生成为spa格式</p><p><code>nuxt build</code>,这种需要<code>node .output/server/index.mjs</code>启动,注意不要在<code>onBeforeMounted</code>请求数据,不然无法渲染出请求数据的html,要使用<a href="https://nuxt.com/docs/getting-started/data-fetching" target="_blank" rel="noopener noreferrer">文档</a>里面的方法</p><p><code>nuxt generate</code>这是打包静态文件,把nuxt当做ssg来使用,把生成的html文件夹扔到服务器,用nginx代理即可</p><h2 id="next部署" tabindex="-1"><a class="header-anchor" href="#next部署"><span>next部署</span></a></h2><p><code>output: &#39;standalone&#39;</code>这种打包需要<code>node .\\.next\\standalone\\server.js</code>来运行,如果图片无法访问,需要把根目录的public和static复制到.next/standalone文件夹去, 服务器上只需要standalone文件夹即可,node standalone/server.js\`运行</p><div class="language-text" data-highlighter="prismjs" data-ext="text" data-title="text"><pre><code><span class="line">public -&gt; .next/standalone/public</span>
<span class="line">.next/static -&gt; .next/standalone/static//这个是为了防止_next找不到</span>
<span class="line"></span></code></pre></div><p>https://nextjs.org/docs/pages/api-reference/next-config-js/output</p>`,14)),r("p",null,[e[0]||(e[0]=s(":")),d(n,{icon:"This minimal server does not copy the `public` or `.next/static` folders by default as these should ideally be handled by a CDN instead, although these folders can be copied to the `standalone/public` and `standalone/.next/static` folders manually, after which `server.js` file will serve these automatically"}),e[1]||(e[1]=s(":"))]),e[3]||(e[3]=t(`<p><code>output: &#39;export&#39;</code>,这种就是把next当做ssg来用,打包静态html,用nginx代理一下就行</p><p><code>output: undefined</code>,不配置output,这种是传统模式,<code>next build</code>之后运行<code>next start</code>启动即可</p><p>推荐配置(next.config.mjs)</p><div class="language-text" data-highlighter="prismjs" data-ext="text" data-title="text"><pre><code><span class="line">/** @type {import(&#39;next&#39;).NextConfig} */</span>
<span class="line">const nextConfig = {</span>
<span class="line">  output: &quot;standalone&quot;,</span>
<span class="line">  assetPrefix: &#39;/&#39;,</span>
<span class="line">  reactStrictMode: true,</span>
<span class="line">};</span>
<span class="line"></span>
<span class="line">export default nextConfig;</span>
<span class="line"></span></code></pre></div>`,4))])}const m=a(c,[["render",p]]),x=JSON.parse('{"path":"/frontend/frontend-tips/ssr.html","title":"ssr部署","lang":"zh-CN","frontmatter":{"description":"ssr部署 astro 三种模式 output设置为\\"hybrid\\" | \\"static\\" | \\"server\\" static是纯静态html 即为ssg模式,此时用不上ssr, 只需要astro build然后把dist目录扔到服务器用nginx代理一下就行(注意动态路由必须使用getStaticPaths) hybrid指的是静态html和动态ht...","head":[["meta",{"property":"og:url","content":"https://yzqdev.github.io/cs-guide/cs-guide/frontend/frontend-tips/ssr.html"}],["meta",{"property":"og:site_name","content":"cs-guide"}],["meta",{"property":"og:title","content":"ssr部署"}],["meta",{"property":"og:description","content":"ssr部署 astro 三种模式 output设置为\\"hybrid\\" | \\"static\\" | \\"server\\" static是纯静态html 即为ssg模式,此时用不上ssr, 只需要astro build然后把dist目录扔到服务器用nginx代理一下就行(注意动态路由必须使用getStaticPaths) hybrid指的是静态html和动态ht..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-04-20T15:42:17.000Z"}],["meta",{"property":"article:modified_time","content":"2024-04-20T15:42:17.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"ssr部署\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2024-04-20T15:42:17.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"yzqdev\\",\\"url\\":\\"http://www.yzqdev.top\\"}]}"]]},"headers":[{"level":2,"title":"astro","slug":"astro","link":"#astro","children":[]},{"level":2,"title":"nuxt部署","slug":"nuxt部署","link":"#nuxt部署","children":[]},{"level":2,"title":"next部署","slug":"next部署","link":"#next部署","children":[]}],"git":{"createdTime":1713254027000,"updatedTime":1713627737000,"contributors":[{"name":"yzqdev","username":"yzqdev","email":"yzqdev@outlook.com","commits":2,"url":"https://github.com/yzqdev"}]},"readingTime":{"minutes":1.51,"words":453},"filePathRelative":"frontend/frontend-tips/ssr.md","localizedDate":"2024年4月16日","autoDesc":true}');export{m as comp,x as data};
