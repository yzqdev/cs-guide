import{_ as a,c as r,a as t,o}from"./app-C8DxhDIZ.js";const l={};function n(i,e){return o(),r("div",null,e[0]||(e[0]=[t('<h1 id="java-源码里的设计模式" tabindex="-1"><a class="header-anchor" href="#java-源码里的设计模式"><span>Java 源码里的设计模式</span></a></h1><p>从 <a href="https://en.wikipedia.org/wiki/Software_design_pattern#Classification_and_list" target="_blank" rel="noopener noreferrer">维基百科</a> 中,可以让你对大部分设计模式有一个概览,而且它也指出了哪些设计模式是 GoF 中规范.下面列出可以从 JavaSE 和 JavaEE API 中找到的设计模式:</p><h2 id="创建型模式" tabindex="-1"><a class="header-anchor" href="#创建型模式"><span><a href="https://en.wikipedia.org/wiki/Creational_pattern" target="_blank" rel="noopener noreferrer">创建型模式</a></span></a></h2><h3 id="抽象工厂" tabindex="-1"><a class="header-anchor" href="#抽象工厂"><span><a href="http://en.wikipedia.org/wiki/Abstract_factory_pattern" target="_blank" rel="noopener noreferrer">抽象工厂</a></span></a></h3><ul><li><a href="http://docs.oracle.com/javase/6/docs/api/javax/xml/parsers/DocumentBuilderFactory.html#newInstance%28%29" target="_blank" rel="noopener noreferrer">javax.xml.parsers.DocumentBuilderFactory#newInstance()</a></li><li><a href="http://docs.oracle.com/javase/6/docs/api/javax/xml/transform/TransformerFactory.html#newInstance%28%29" target="_blank" rel="noopener noreferrer">javax.xml.transform.TransformerFactory#newInstance()</a></li><li><a href="http://docs.oracle.com/javase/6/docs/api/javax/xml/xpath/XPathFactory.html#newInstance%28%29" target="_blank" rel="noopener noreferrer">javax.xml.xpath.XPathFactory#newInstance()</a></li></ul><h3 id="建造者模式" tabindex="-1"><a class="header-anchor" href="#建造者模式"><span><a href="http://en.wikipedia.org/wiki/Builder_pattern" target="_blank" rel="noopener noreferrer">建造者模式</a></span></a></h3><ul><li><a href="http://docs.oracle.com/javase/6/docs/api/java/lang/StringBuilder.html#append%28boolean%29" target="_blank" rel="noopener noreferrer">java.lang.StringBuilder#append()</a>(非同步)</li><li><a href="http://docs.oracle.com/javase/6/docs/api/java/lang/StringBuffer.html#append%28boolean%29" target="_blank" rel="noopener noreferrer">java.lang.StringBuffer#append()</a>(同步)</li><li><a href="http://docs.oracle.com/javase/6/docs/api/java/nio/ByteBuffer.html#put%28byte%29" target="_blank" rel="noopener noreferrer">java.nio.ByteBuffer#put()</a>(类似的还有, <a href="http://docs.oracle.com/javase/6/docs/api/java/nio/CharBuffer.html#put%28char%29" target="_blank" rel="noopener noreferrer">CharBuffer</a>, <a href="http://docs.oracle.com/javase/6/docs/api/java/nio/ShortBuffer.html#put%28short%29" target="_blank" rel="noopener noreferrer">ShortBuffer</a>, <a href="http://docs.oracle.com/javase/6/docs/api/java/nio/IntBuffer.html#put%28int%29" target="_blank" rel="noopener noreferrer">IntBuffer</a>, <a href="http://docs.oracle.com/javase/6/docs/api/java/nio/LongBuffer.html#put%28long%29" target="_blank" rel="noopener noreferrer">LongBuffer</a>, <a href="http://docs.oracle.com/javase/6/docs/api/java/nio/FloatBuffer.html#put%28float%29" target="_blank" rel="noopener noreferrer">FloatBuffer</a> 和 <a href="http://docs.oracle.com/javase/6/docs/api/java/nio/DoubleBuffer.html#put%28double%29" target="_blank" rel="noopener noreferrer">DoubleBuffer</a>)</li><li><a href="http://docs.oracle.com/javase/6/docs/api/javax/swing/GroupLayout.Group.html#addComponent%28java.awt.Component%29" target="_blank" rel="noopener noreferrer">javax.swing.GroupLayout.Group#addComponent()</a></li></ul><h3 id="工厂模式" tabindex="-1"><a class="header-anchor" href="#工厂模式"><span><a href="http://en.wikipedia.org/wiki/Factory_method_pattern" target="_blank" rel="noopener noreferrer">工厂模式</a></span></a></h3><ul><li><a href="http://docs.oracle.com/javase/6/docs/api/java/util/Calendar.html#getInstance%28%29" target="_blank" rel="noopener noreferrer">java.util.Calendar#getInstance()</a></li><li><a href="http://docs.oracle.com/javase/6/docs/api/java/util/ResourceBundle.html#getBundle%28java.lang.String%29" target="_blank" rel="noopener noreferrer">java.util.ResourceBundle#getBundle()</a></li><li><a href="http://docs.oracle.com/javase/6/docs/api/java/text/NumberFormat.html#getInstance%28%29" target="_blank" rel="noopener noreferrer">java.text.NumberFormat#getInstance()</a></li><li><a href="http://docs.oracle.com/javase/6/docs/api/java/nio/charset/Charset.html#forName%28java.lang.String%29" target="_blank" rel="noopener noreferrer">java.nio.charset.Charset#forName()</a></li><li><a href="http://docs.oracle.com/javase/6/docs/api/java/net/URLStreamHandlerFactory.html" target="_blank" rel="noopener noreferrer">java.net.URLStreamHandlerFactory#createURLStreamHandler(String)</a></li></ul><h3 id="原型模式" tabindex="-1"><a class="header-anchor" href="#原型模式"><span><a href="http://en.wikipedia.org/wiki/Prototype_pattern" target="_blank" rel="noopener noreferrer">原型模式</a></span></a></h3><ul><li><a href="http://docs.oracle.com/javase/6/docs/api/java/lang/Object.html#clone%28%29" target="_blank" rel="noopener noreferrer">java.lang.Object#clone()</a>(类需要实现 <a href="http://docs.oracle.com/javase/6/docs/api/java/lang/Cloneable.html" target="_blank" rel="noopener noreferrer">java.lang.Cloneable</a> 接口)</li></ul><h3 id="单例模式" tabindex="-1"><a class="header-anchor" href="#单例模式"><span><a href="http://en.wikipedia.org/wiki/Singleton_pattern" target="_blank" rel="noopener noreferrer">单例模式</a></span></a></h3><ul><li><a href="http://docs.oracle.com/javase/6/docs/api/java/lang/Runtime.html#getRuntime%28%29" target="_blank" rel="noopener noreferrer">java.lang.Runtime#getRuntime()</a></li><li><a href="http://docs.oracle.com/javase/6/docs/api/java/awt/Desktop.html#getDesktop%28%29" target="_blank" rel="noopener noreferrer">java.awt.Desktop#getDesktop()</a></li><li><a href="http://docs.oracle.com/javase/6/docs/api/java/lang/System.html#getSecurityManager%28%29" target="_blank" rel="noopener noreferrer">java.lang.System#getSecurityManager()</a></li></ul><h2 id="结构型模式" tabindex="-1"><a class="header-anchor" href="#结构型模式"><span><a href="http://en.wikipedia.org/wiki/Structural_pattern" target="_blank" rel="noopener noreferrer">结构型模式</a></span></a></h2><h3 id="适配器模式" tabindex="-1"><a class="header-anchor" href="#适配器模式"><span><a href="http://en.wikipedia.org/wiki/Adapter_pattern" target="_blank" rel="noopener noreferrer">适配器模式</a></span></a></h3><ul><li><a href="http://docs.oracle.com/javase/6/docs/api/java/util/Arrays.html#asList%28T...%29" target="_blank" rel="noopener noreferrer">java.util.Arrays#asList()</a></li><li><a href="http://docs.oracle.com/javase/6/docs/api/java/io/InputStreamReader.html#InputStreamReader%28java.io.InputStream%29" target="_blank" rel="noopener noreferrer">java.io.InputStreamReader(InputStream) </a>(返回 Reader)</li><li><a href="http://docs.oracle.com/javase/6/docs/api/java/io/OutputStreamWriter.html#OutputStreamWriter%28java.io.OutputStream%29" target="_blank" rel="noopener noreferrer">java.io.OutputStreamWriter(OutputStream)</a>(返回 Writer)</li><li><a href="http://docs.oracle.com/javase/6/docs/api/javax/xml/bind/annotation/adapters/XmlAdapter.html#marshal%28BoundType%29" target="_blank" rel="noopener noreferrer">javax.xml.bind.annotation.adapters.XmlAdapter#marshal()</a> 和 <a href="http://docs.oracle.com/javase/6/docs/api/javax/xml/bind/annotation/adapters/XmlAdapter.html#unmarshal%28ValueType%29" target="_blank" rel="noopener noreferrer">#unmarshal()</a></li></ul><h3 id="桥模式" tabindex="-1"><a class="header-anchor" href="#桥模式"><span><a href="http://en.wikipedia.org/wiki/Bridge_pattern" target="_blank" rel="noopener noreferrer">桥模式</a></span></a></h3><p>暂时没有发现</p><h3 id="合成模式" tabindex="-1"><a class="header-anchor" href="#合成模式"><span><a href="http://en.wikipedia.org/wiki/Composite_pattern" target="_blank" rel="noopener noreferrer">合成模式</a></span></a></h3><ul><li><a href="http://docs.oracle.com/javase/6/docs/api/java/awt/Container.html#add%28java.awt.Component%29" target="_blank" rel="noopener noreferrer">java.awt.Container#add(Component)</a>(Swing 中几乎所有类都使用)</li><li><a href="http://docs.oracle.com/javaee/6/api/javax/faces/component/UIComponent.html#getChildren%28%29" target="_blank" rel="noopener noreferrer">javax.faces.component.UIComponent#getChildren()</a>(JSF UI 中几乎所有类都使用)</li></ul><h3 id="装饰模式" tabindex="-1"><a class="header-anchor" href="#装饰模式"><span><a href="http://en.wikipedia.org/wiki/Decorator_pattern" target="_blank" rel="noopener noreferrer">装饰模式</a></span></a></h3><ul><li><a href="http://docs.oracle.com/javase/6/docs/api/java/io/InputStream.html" target="_blank" rel="noopener noreferrer">java.io.InputStream</a>, <a href="http://docs.oracle.com/javase/6/docs/api/java/io/OutputStream.html" target="_blank" rel="noopener noreferrer">OutputStream</a>, <a href="http://docs.oracle.com/javase/6/docs/api/java/io/Reader.html" target="_blank" rel="noopener noreferrer">Reader</a> 和 <a href="http://docs.oracle.com/javase/6/docs/api/java/io/Writer.html" target="_blank" rel="noopener noreferrer">Writer</a> 的所有子类都有一个使用 InputStream, OutputStream, Reader, Writer 的构造器</li><li><a href="http://docs.oracle.com/javase/6/docs/api/java/util/Collections.html" target="_blank" rel="noopener noreferrer">java.util.Collections</a> 中的 <a href="http://docs.oracle.com/javase/6/docs/api/java/util/Collections.html#checkedCollection%28java.util.Collection,%20java.lang.Class%29" target="_blank" rel="noopener noreferrer">checkedXXX()</a>, <a href="http://docs.oracle.com/javase/6/docs/api/java/util/Collections.html#synchronizedCollection%28java.util.Collection%29" target="_blank" rel="noopener noreferrer">synchronizedXXX()</a> 和 <a href="http://docs.oracle.com/javase/6/docs/api/java/util/Collections.html#unmodifiableCollection%28java.util.Collection%29" target="_blank" rel="noopener noreferrer">unmodifiableXXX()</a> 方法</li><li><a href="http://docs.oracle.com/javaee/6/api/javax/servlet/http/HttpServletRequestWrapper.html" target="_blank" rel="noopener noreferrer">javax.servlet.http.HttpServletRequestWrapper</a> 和 <a href="http://docs.oracle.com/javaee/6/api/javax/servlet/http/HttpServletResponseWrapper.html" target="_blank" rel="noopener noreferrer">HttpServletResponseWrapper</a></li></ul><h3 id="门面模式" tabindex="-1"><a class="header-anchor" href="#门面模式"><span><a href="http://en.wikipedia.org/wiki/Facade_pattern" target="_blank" rel="noopener noreferrer">门面模式</a></span></a></h3><p><a href="http://docs.oracle.com/javaee/6/api/javax/faces/context/FacesContext.html" target="_blank" rel="noopener noreferrer">javax.faces.context.FacesContext</a>,其内部使用了 <a href="http://docs.oracle.com/javaee/6/api/javax/faces/lifecycle/Lifecycle.html" target="_blank" rel="noopener noreferrer">LifeCycle</a>, <a href="http://docs.oracle.com/javaee/6/api/javax/faces/application/ViewHandler.html" target="_blank" rel="noopener noreferrer">ViewHandler</a>, <a href="http://docs.oracle.com/javaee/6/api/javax/faces/application/NavigationHandler.html" target="_blank" rel="noopener noreferrer">NavigationHandler</a> 等接口或抽象类，没有这一个门面类，终端就需要考虑如何去使用接口或抽象类（实际上不需要，因为门面类通过反射完成了） <a href="http://docs.oracle.com/javaee/6/api/javax/faces/context/ExternalContext.html" target="_blank" rel="noopener noreferrer">javax.faces.context.ExternalContext</a>, 其内部使用了 <a href="http://docs.oracle.com/javaee/6/api/javax/servlet/ServletContext.html" target="_blank" rel="noopener noreferrer">ServletContext</a>, <a href="http://docs.oracle.com/javaee/6/api/javax/servlet/http/HttpSession.html" target="_blank" rel="noopener noreferrer">HttpSession</a>, <a href="http://docs.oracle.com/javaee/6/api/javax/servlet/http/HttpServletRequest.html" target="_blank" rel="noopener noreferrer">HttpServletRequest</a>, <a href="http://docs.oracle.com/javaee/6/api/javax/servlet/http/HttpServletResponse.html" target="_blank" rel="noopener noreferrer">HttpServletResponse</a> 等</p><h3 id="享元模式" tabindex="-1"><a class="header-anchor" href="#享元模式"><span><a href="http://en.wikipedia.org/wiki/Flyweight_pattern" target="_blank" rel="noopener noreferrer">享元模式</a></span></a></h3><ul><li><a href="http://docs.oracle.com/javase/6/docs/api/java/lang/Integer.html#valueOf%28int%29" target="_blank" rel="noopener noreferrer">java.lang.Integer#valueOf(int)</a>，类似得还有 <a href="http://docs.oracle.com/javase/6/docs/api/java/lang/Boolean.html#valueOf%28boolean%29" target="_blank" rel="noopener noreferrer">Boolean</a>, <a href="http://docs.oracle.com/javase/6/docs/api/java/lang/Byte.html#valueOf%28byte%29" target="_blank" rel="noopener noreferrer">Byte</a>, <a href="http://docs.oracle.com/javase/6/docs/api/java/lang/Character.html#valueOf%28char%29" target="_blank" rel="noopener noreferrer">Character</a>, <a href="http://docs.oracle.com/javase/6/docs/api/java/lang/Short.html#valueOf%28short%29" target="_blank" rel="noopener noreferrer">Short</a> 和 <a href="http://docs.oracle.com/javase/6/docs/api/java/lang/Long.html#valueOf%28long%29" target="_blank" rel="noopener noreferrer">Long</a></li></ul><h3 id="代理模式" tabindex="-1"><a class="header-anchor" href="#代理模式"><span><a href="http://en.wikipedia.org/wiki/Proxy_pattern" target="_blank" rel="noopener noreferrer">代理模式</a></span></a></h3><ul><li><a href="http://docs.oracle.com/javase/6/docs/api/java/lang/reflect/Proxy.html" target="_blank" rel="noopener noreferrer">java.lang.reflect.Proxy</a></li><li><a href="http://docs.oracle.com/javase/6/docs/api/java/rmi/package-summary.html" target="_blank" rel="noopener noreferrer">java.rmi.*</a>(所有 api)</li></ul><h2 id="表现型模式" tabindex="-1"><a class="header-anchor" href="#表现型模式"><span><a href="http://en.wikipedia.org/wiki/Behavioral_pattern" target="_blank" rel="noopener noreferrer">表现型模式</a></span></a></h2><h3 id="责任链模式" tabindex="-1"><a class="header-anchor" href="#责任链模式"><span><a href="http://en.wikipedia.org/wiki/Chain_of_responsibility_pattern" target="_blank" rel="noopener noreferrer">责任链模式</a></span></a></h3><ul><li><a href="http://docs.oracle.com/javase/6/docs/api/java/util/logging/Logger.html#log%28java.util.logging.Level,%20java.lang.String%29" target="_blank" rel="noopener noreferrer">java.util.logging.Logger#log()</a></li><li><a href="http://docs.oracle.com/javaee/6/api/javax/servlet/Filter.html#doFilter%28javax.servlet.ServletRequest,%20javax.servlet.ServletResponse,%20javax.servlet.FilterChain%29" target="_blank" rel="noopener noreferrer">javax.servlet.Filter#doFilter()</a></li></ul><h3 id="命令模式" tabindex="-1"><a class="header-anchor" href="#命令模式"><span><a href="http://en.wikipedia.org/wiki/Command_pattern" target="_blank" rel="noopener noreferrer">命令模式</a></span></a></h3><ul><li><a href="http://docs.oracle.com/javase/6/docs/api/java/lang/Runnable.html" target="_blank" rel="noopener noreferrer">所有 java.lang.Runnable 的实现</a></li><li><a href="http://docs.oracle.com/javase/6/docs/api/javax/swing/Action.html" target="_blank" rel="noopener noreferrer">所有 javax.swing.Action 的实现</a></li></ul><h3 id="解释器模式" tabindex="-1"><a class="header-anchor" href="#解释器模式"><span><a href="http://en.wikipedia.org/wiki/Interpreter_pattern" target="_blank" rel="noopener noreferrer">解释器模式</a></span></a></h3><ul><li><a href="http://docs.oracle.com/javase/6/docs/api/java/util/regex/Pattern.html" target="_blank" rel="noopener noreferrer">java.util.Pattern</a></li><li><a href="http://docs.oracle.com/javase/6/docs/api/java/text/Normalizer.html" target="_blank" rel="noopener noreferrer">java.text.Normalizer</a></li><li><a href="http://docs.oracle.com/javase/6/docs/api/java/text/Format.html" target="_blank" rel="noopener noreferrer">所有 java.text.Format 的子类</a></li><li><a href="http://docs.oracle.com/javaee/6/api/javax/el/ELResolver.html" target="_blank" rel="noopener noreferrer">所有 javax.el.ELResolver 的子类</a></li></ul><h3 id="迭代模式" tabindex="-1"><a class="header-anchor" href="#迭代模式"><span><a href="http://en.wikipedia.org/wiki/Iterator_pattern" target="_blank" rel="noopener noreferrer">迭代模式</a></span></a></h3><ul><li><a href="http://docs.oracle.com/javase/6/docs/api/java/util/Iterator.html" target="_blank" rel="noopener noreferrer">所有 java.util.Iterator 的实现</a>(因此也包含了所有 <a href="http://docs.oracle.com/javase/6/docs/api/java/util/Scanner.html" target="_blank" rel="noopener noreferrer">java.util.Scanner</a> 的子类)</li><li><a href="http://docs.oracle.com/javase/6/docs/api/java/util/Enumeration.html" target="_blank" rel="noopener noreferrer">所有 java.util.Enumeration 的实现</a></li></ul><h3 id="中介模式" tabindex="-1"><a class="header-anchor" href="#中介模式"><span><a href="http://stackoverflow.com/questions/1673841/examples-of-gof-design-patterns-in-javas-core-libraries" target="_blank" rel="noopener noreferrer">中介模式</a></span></a></h3><ul><li><a href="http://docs.oracle.com/javase/6/docs/api/java/util/Timer.html" target="_blank" rel="noopener noreferrer">java.util.Timer 中的所有 scheduleXXX() 方法)</a></li><li><a href="http://docs.oracle.com/javase/6/docs/api/java/util/concurrent/Executor.html#execute%28java.lang.Runnable%29" target="_blank" rel="noopener noreferrer">java.util.concurrent.Executor#execute()</a></li><li><a href="http://docs.oracle.com/javase/6/docs/api/java/util/concurrent/ExecutorService.html" target="_blank" rel="noopener noreferrer">java.util.concurrent.ExecutorService 中的 invokeXXX() 和 submit() 方法</a></li><li><a href="http://docs.oracle.com/javase/6/docs/api/java/util/concurrent/ScheduledExecutorService.html" target="_blank" rel="noopener noreferrer">java.util.concurrent.ScheduledExecutorService 中的所有 scheduleXXX() 方法</a></li><li><a href="http://docs.oracle.com/javase/6/docs/api/java/lang/reflect/Method.html#invoke%28java.lang.Object,%20java.lang.Object...%29" target="_blank" rel="noopener noreferrer">java.lang.reflect.Method#invoke()</a></li></ul><h3 id="备忘录模式" tabindex="-1"><a class="header-anchor" href="#备忘录模式"><span><a href="http://en.wikipedia.org/wiki/Memento_pattern" target="_blank" rel="noopener noreferrer">备忘录模式</a></span></a></h3><p><a href="http://docs.oracle.com/javase/6/docs/api/java/util/Date.html" target="_blank" rel="noopener noreferrer">java.util.Date</a>(setXXX 方法更新的就是其内部的 Date 的值) <a href="http://docs.oracle.com/javase/6/docs/api/java/io/Serializable.html" target="_blank" rel="noopener noreferrer">java.io.Serializable 的所有实现</a><a href="http://docs.oracle.com/javaee/6/api/javax/faces/component/StateHolder.html" target="_blank" rel="noopener noreferrer">javax.faces.component.StateHolder 的所有实现</a></p><h3 id="观察者模式-订阅模式" tabindex="-1"><a class="header-anchor" href="#观察者模式-订阅模式"><span><a href="http://en.wikipedia.org/wiki/Observer_pattern" target="_blank" rel="noopener noreferrer">观察者模式（订阅模式)</a></span></a></h3><p><a href="http://docs.oracle.com/javase/6/docs/api/java/util/Observer.html" target="_blank" rel="noopener noreferrer">java.util.Observer</a>/<a href="http://docs.oracle.com/javase/6/docs/api/java/util/Observable.html" target="_blank" rel="noopener noreferrer">java.util.Observable</a>(实际应用中，很少会用到) <a href="http://docs.oracle.com/javase/6/docs/api/java/util/EventListener.html" target="_blank" rel="noopener noreferrer">java.util.EventListener 的所有实现</a>(几乎包含了所有 Swing 中使用到的类) <a href="http://docs.oracle.com/javaee/6/api/javax/servlet/http/HttpSessionBindingListener.html" target="_blank" rel="noopener noreferrer">javax.servlet.http.HttpSessionBindingListener</a><a href="http://docs.oracle.com/javaee/6/api/javax/servlet/http/HttpSessionAttributeListener.html" target="_blank" rel="noopener noreferrer">javax.servlet.http.HttpSessionAttributeListener</a><a href="http://docs.oracle.com/javaee/6/api/javax/faces/event/PhaseListener.html" target="_blank" rel="noopener noreferrer">javax.faces.event.PhaseListener</a></p><h3 id="状态模式" tabindex="-1"><a class="header-anchor" href="#状态模式"><span><a href="http://en.wikipedia.org/wiki/State_pattern" target="_blank" rel="noopener noreferrer">状态模式</a></span></a></h3><p><a href="http://docs.oracle.com/javaee/6/api/javax/faces/lifecycle/Lifecycle.html#execute%28javax.faces.context.FacesContext%29" target="_blank" rel="noopener noreferrer">javax.faces.lifecycle.LifeCycle#execute()</a>(由FacesServlet控制,行为是依赖于当前JSF生命周期阶段(状态))</p><h3 id="策略模式" tabindex="-1"><a class="header-anchor" href="#策略模式"><span><a href="http://en.wikipedia.org/wiki/Strategy_pattern" target="_blank" rel="noopener noreferrer">策略模式</a></span></a></h3><p><a href="http://docs.oracle.com/javase/6/docs/api/java/util/Comparator.html#compare%28T,%20T%29" target="_blank" rel="noopener noreferrer">java.util.Comparator#compare()</a>, 在 Collections#sort() 中会使用到. <a href="http://docs.oracle.com/javaee/6/api/javax/servlet/http/HttpServlet.html" target="_blank" rel="noopener noreferrer">javax.servlet.http.HttpServlet</a>,service() 和 所有 doXXX() 方法都以 HttpServletRequest 和 HttpServletResponse 作为参数，所有方法的实现都需要显式处理这两个参数(而不是持有这个变量。) <a href="http://docs.oracle.com/javaee/6/api/javax/servlet/Filter.html#doFilter%28javax.servlet.ServletRequest,%20javax.servlet.ServletResponse,%20javax.servlet.FilterChain%29" target="_blank" rel="noopener noreferrer">javax.servlet.Filter#doFilter()</a></p><h3 id="模板模式" tabindex="-1"><a class="header-anchor" href="#模板模式"><span><a href="http://en.wikipedia.org/wiki/Template_method_pattern" target="_blank" rel="noopener noreferrer">模板模式</a></span></a></h3><p><a href="http://docs.oracle.com/javase/6/docs/api/java/io/InputStream.html" target="_blank" rel="noopener noreferrer">java.io.InputStream</a>, <a href="http://docs.oracle.com/javase/6/docs/api/java/io/OutputStream.html" target="_blank" rel="noopener noreferrer">java.io.OutputStream</a>, <a href="http://docs.oracle.com/javase/6/docs/api/java/io/Reader.html" target="_blank" rel="noopener noreferrer">java.io.Reader</a> 和 <a href="http://docs.oracle.com/javase/6/docs/api/java/io/Writer.html" target="_blank" rel="noopener noreferrer">java.io.Writer</a> 的所有 非抽象 方法。 <a href="http://docs.oracle.com/javase/6/docs/api/java/util/AbstractList.html" target="_blank" rel="noopener noreferrer">java.util.AbstractList</a>, <a href="http://docs.oracle.com/javase/6/docs/api/java/util/AbstractSet.html" target="_blank" rel="noopener noreferrer">java.util.AbstractSet</a> 和 <a href="http://docs.oracle.com/javase/6/docs/api/java/util/AbstractMap.html" target="_blank" rel="noopener noreferrer">java.util.AbstractMap</a> 的所有 非抽象 方法。</p><p><a href="http://docs.oracle.com/javaee/6/api/javax/servlet/http/HttpServlet.html" target="_blank" rel="noopener noreferrer">javax.servlet.http.HttpServlet 中 doXXX() 方法</a>,这些方法默认返回 405 &quot;Method Not Allowed&quot; ，你可以自由地选择覆盖实现其中的一个或多个。</p><h3 id="访问者模式" tabindex="-1"><a class="header-anchor" href="#访问者模式"><span><a href="http://en.wikipedia.org/wiki/Visitor_pattern" target="_blank" rel="noopener noreferrer">访问者模式</a></span></a></h3><p><a href="http://docs.oracle.com/javase/6/docs/api/javax/lang/model/element/AnnotationValue.html" target="_blank" rel="noopener noreferrer">javax.lang.model.element.AnnotationValue</a> 和 <a href="http://docs.oracle.com/javase/6/docs/api/javax/lang/model/element/AnnotationValueVisitor.html" target="_blank" rel="noopener noreferrer">AnnotationValueVisitor</a><a href="http://docs.oracle.com/javase/6/docs/api/javax/lang/model/element/Element.html" target="_blank" rel="noopener noreferrer">javax.lang.model.element.Element</a> 和 <a href="http://docs.oracle.com/javase/6/docs/api/javax/lang/model/element/ElementVisitor.html" target="_blank" rel="noopener noreferrer">ElementVisitor</a><a href="http://docs.oracle.com/javase/6/docs/api/javax/lang/model/type/TypeMirror.html" target="_blank" rel="noopener noreferrer">javax.lang.model.type.TypeMirror</a> 和 <a href="http://docs.oracle.com/javase/6/docs/api/javax/lang/model/type/TypeVisitor.html" target="_blank" rel="noopener noreferrer">TypeVisitor</a><a href="http://docs.oracle.com/javase/7/docs/api/java/nio/file/FileVisitor.html" target="_blank" rel="noopener noreferrer">java.nio.file.FileVisitor</a> 和 <a href="http://docs.oracle.com/javase/7/docs/api/java/nio/file/SimpleFileVisitor.html" target="_blank" rel="noopener noreferrer">SimpleFileVisitor</a></p><p>附录拓展：</p><ul><li><p><a href="http://baike.baidu.com/link?url=_XNWwtm_SeObjikESBkyse_nfXm2HIOOkwJ1XwyVZALLU36AG36DhOMN0Utln5-nJBT6aAplJFOGXCdwQSsm3_" target="_blank" rel="noopener noreferrer">设计模式-百度百科</a></p></li><li><p>stackoverflow原址: http://stackoverflow.com/questions/1673841/examples-of-gof-design-patterns-in-javas-core-libraries</p></li></ul>',54)]))}const c=a(l,[["render",n]]),s=JSON.parse('{"path":"/cs-tips/java-tip/stackoverflow/examples-of-gof-design-patterns-in-javas-core-libraries.html","title":"Java 源码里的设计模式","lang":"zh-CN","frontmatter":{"description":"Java 源码里的设计模式 从 维基百科 中,可以让你对大部分设计模式有一个概览,而且它也指出了哪些设计模式是 GoF 中规范.下面列出可以从 JavaSE 和 JavaEE API 中找到的设计模式: 创建型模式 抽象工厂 javax.xml.parsers.DocumentBuilderFactory#newInstance() javax.xml...","head":[["meta",{"property":"og:url","content":"https://yzqdev.github.io/cs-guide/cs-guide/cs-tips/java-tip/stackoverflow/examples-of-gof-design-patterns-in-javas-core-libraries.html"}],["meta",{"property":"og:site_name","content":"cs-guide"}],["meta",{"property":"og:title","content":"Java 源码里的设计模式"}],["meta",{"property":"og:description","content":"Java 源码里的设计模式 从 维基百科 中,可以让你对大部分设计模式有一个概览,而且它也指出了哪些设计模式是 GoF 中规范.下面列出可以从 JavaSE 和 JavaEE API 中找到的设计模式: 创建型模式 抽象工厂 javax.xml.parsers.DocumentBuilderFactory#newInstance() javax.xml..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2023-05-25T04:34:06.000Z"}],["meta",{"property":"article:modified_time","content":"2023-05-25T04:34:06.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"Java 源码里的设计模式\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2023-05-25T04:34:06.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"yzqdev\\",\\"url\\":\\"http://www.yzqdev.top\\"}]}"]]},"headers":[{"level":2,"title":"创建型模式","slug":"创建型模式","link":"#创建型模式","children":[{"level":3,"title":"抽象工厂","slug":"抽象工厂","link":"#抽象工厂","children":[]},{"level":3,"title":"建造者模式","slug":"建造者模式","link":"#建造者模式","children":[]},{"level":3,"title":"工厂模式","slug":"工厂模式","link":"#工厂模式","children":[]},{"level":3,"title":"原型模式","slug":"原型模式","link":"#原型模式","children":[]},{"level":3,"title":"单例模式","slug":"单例模式","link":"#单例模式","children":[]}]},{"level":2,"title":"结构型模式","slug":"结构型模式","link":"#结构型模式","children":[{"level":3,"title":"适配器模式","slug":"适配器模式","link":"#适配器模式","children":[]},{"level":3,"title":"桥模式","slug":"桥模式","link":"#桥模式","children":[]},{"level":3,"title":"合成模式","slug":"合成模式","link":"#合成模式","children":[]},{"level":3,"title":"装饰模式","slug":"装饰模式","link":"#装饰模式","children":[]},{"level":3,"title":"门面模式","slug":"门面模式","link":"#门面模式","children":[]},{"level":3,"title":"享元模式","slug":"享元模式","link":"#享元模式","children":[]},{"level":3,"title":"代理模式","slug":"代理模式","link":"#代理模式","children":[]}]},{"level":2,"title":"表现型模式","slug":"表现型模式","link":"#表现型模式","children":[{"level":3,"title":"责任链模式","slug":"责任链模式","link":"#责任链模式","children":[]},{"level":3,"title":"命令模式","slug":"命令模式","link":"#命令模式","children":[]},{"level":3,"title":"解释器模式","slug":"解释器模式","link":"#解释器模式","children":[]},{"level":3,"title":"迭代模式","slug":"迭代模式","link":"#迭代模式","children":[]},{"level":3,"title":"中介模式","slug":"中介模式","link":"#中介模式","children":[]},{"level":3,"title":"备忘录模式","slug":"备忘录模式","link":"#备忘录模式","children":[]},{"level":3,"title":"观察者模式（订阅模式)","slug":"观察者模式-订阅模式","link":"#观察者模式-订阅模式","children":[]},{"level":3,"title":"状态模式","slug":"状态模式","link":"#状态模式","children":[]},{"level":3,"title":"策略模式","slug":"策略模式","link":"#策略模式","children":[]},{"level":3,"title":"模板模式","slug":"模板模式","link":"#模板模式","children":[]},{"level":3,"title":"访问者模式","slug":"访问者模式","link":"#访问者模式","children":[]}]}],"git":{"createdTime":1684989246000,"updatedTime":1684989246000,"contributors":[{"name":"yzqdev","username":"yzqdev","email":"yzqdev@outlook.com","commits":1,"url":"https://github.com/yzqdev"}]},"readingTime":{"minutes":3.87,"words":1160},"filePathRelative":"cs-tips/java-tip/stackoverflow/examples-of-gof-design-patterns-in-javas-core-libraries.md","localizedDate":"2023年5月25日","autoDesc":true}');export{c as comp,s as data};
