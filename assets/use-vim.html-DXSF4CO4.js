import{_ as e,c as n,a,o as i}from"./app-C8DxhDIZ.js";const t={};function s(o,p){return i(),n("div",null,p[0]||(p[0]=[a(`<h1 id="linux-vi-vim使用方法" tabindex="-1"><a class="header-anchor" href="#linux-vi-vim使用方法"><span>Linux vi/vim使用方法</span></a></h1><div class="hint-container tip"><p class="hint-container-title">提示</p><p>vi/vim 基本使用方法</p></div><p>vi编辑器是所有Unix及Linux系统下标准的编辑器，它的强大不逊色于任何最新的文本编辑器，这里只是简单地介绍一下它的用法和一小部分指令。</p><h2 id="vi的基本概念" tabindex="-1"><a class="header-anchor" href="#vi的基本概念"><span>vi的基本概念</span></a></h2><p>基本上vi可以分为三种状态，分别是命令模式（command mode）、插入模式（Insert mode）和底行模式（last line mode），各模式的功能区分如下：</p><ol><li><strong>命令行模式</strong>command mode）</li></ol><p>控制屏幕光标的移动，字符、字或行的删除，移动复制某区段及进入Insert mode下，或者到 last line mode。</p><ol start="2"><li><strong>插入模式</strong>（Insert mode）</li></ol><p>只有在Insert mode下，才可以做文字输入，按「ESC」键可回到命令行模式。</p><ol start="3"><li><strong>底行模式</strong>（last line mode）</li></ol><p>将文件保存或退出vi，也可以设置编辑环境，如寻找字符串、列出行号……等。</p><p>不过一般我们在使用时把vi简化成两个模式，就是将底行模式（last line mode）也算入命令行模式command mode）。</p><h2 id="vi的基本操作" tabindex="-1"><a class="header-anchor" href="#vi的基本操作"><span>vi的基本操作</span></a></h2><p>a) 进入vi</p><p>在系统提示符号输入vi及文件名称后，就进入vi全屏幕编辑画面：</p><div class="language-bash" data-highlighter="prismjs" data-ext="sh" data-title="sh"><pre><code><span class="line"> <span class="token function">vi</span> myfile </span>
<span class="line"></span></code></pre></div><p>不过有一点要特别注意，就是您进入vi之后，是处于「命令行模式（command mode）」，您要切换到「插入模式（Insert mode）」才能够输入文字。初次使用vi的人都会想先用上下左右键移动光标，结果电脑一直哔哔叫，把自己气个半死，所以进入vi后，先不要乱动，转换到「插入模式（Insert mode）」再说吧！</p><p>b) 切换至插入模式（Insert mode）编辑文件</p><p>在「命令行模式（command mode）」下**按一下字母「i」**就可以进入「插入模式（Insert mode）」，这时候你就可以开始输入文字了。</p><p>c) Insert 的切换</p><p>您目前处于「插入模式（Insert mode）」，您就只能一直输入文字，如果您发现输错了字！想用光标键往回移动，将该字删除，就要<strong>先按一下「ESC」键</strong>转到「命令行模式（command mode）」再删除文字。</p><p>d) 退出vi及保存文件</p><p>在「命令行模式（command mode）」下**，按一下「：」冒号**键进入「Last line mode」，例如：</p><div class="language-bash" data-highlighter="prismjs" data-ext="sh" data-title="sh"><pre><code><span class="line"><span class="token builtin class-name">:</span>  w filename  （输入 「w filename」将文章以指定的文件名filename保存）</span>
<span class="line"></span>
<span class="line"><span class="token builtin class-name">:</span>  wq <span class="token punctuation">(</span>输入「wq」，存盘并退出vi<span class="token punctuation">)</span></span>
<span class="line"></span>
<span class="line"><span class="token builtin class-name">:</span>  q<span class="token operator">!</span>  <span class="token punctuation">(</span>输入q<span class="token operator">!</span>， 不存盘强制退出vi<span class="token punctuation">)</span></span>
<span class="line"></span></code></pre></div><h2 id="命令行模式-command-mode-功能键" tabindex="-1"><a class="header-anchor" href="#命令行模式-command-mode-功能键"><span>命令行模式（command mode）功能键</span></a></h2><p>1）. 插入模式</p><p>按「i」切换进入插入模式「insert mode」，按“i”进入插入模式后是从光标当前位置开始输入文件；</p><p>按「a」进入插入模式后，是从目前光标所在位置的下一个位置开始输入文字；</p><p>按「o」进入插入模式后，是插入新的一行，从行首开始输入文字。</p><p>2）. 从插入模式切换为命令行模式</p><p>按「ESC」键。</p><p>3）. 移动光标</p><p>vi可以直接用键盘上的光标来上下左右移动，但正规的vi是用小写英文字母「h」、「j」、「k」、「l」，分别控制光标左、下、上、右移一格。</p><p>按「ctrl」+「b」：屏幕往“后”移动一页。</p><p>按「ctrl」+「f」：屏幕往“前”移动一页。</p><p>按「ctrl」+「u」：屏幕往“后”移动半页。</p><p>按「ctrl」+「d」：屏幕往“前”移动半页。</p><p>按数字「0」：移到文章的开头。</p><p>按「G」：移动到文章的最后。</p><p>按「$」：移动到光标所在行的“行尾”。</p><p>按「^」：移动到光标所在行的“行首”</p><p>按「w」：光标跳到下个字的开头</p><p>按「e」：光标跳到下个字的字尾</p><p>按「b」：光标回到上个字的开头</p><p>按「#l」：光标移到该行的第#个位置，如：5l,56l。</p><p>4）. 删除文字</p><p>「x」：每按一次，删除光标所在位置的“后面”一个字符。</p><p>「#x」：例如，「6x」表示删除光标所在位置的“后面”6个字符。</p><p>「X」：大写的X，每按一次，删除光标所在位置的“前面”一个字符。</p><p>「#X」：例如，「20X」表示删除光标所在位置的“前面”20个字符。</p><p>「dd」：删除光标所在行。</p><p>「#dd」：从光标所在行开始删除#行</p><p>5）. 复制</p><p>「yw」：将光标所在之处到字尾的字符复制到缓冲区中。</p><p>「#yw」：复制#个字到缓冲区</p><p>「yy」：复制光标所在行到缓冲区。</p><p>「#yy」：例如，「6yy」表示拷贝从光标所在的该行“往下数”6行文字。</p><p>「p」：将缓冲区内的字符贴到光标所在位置。注意：所有与“y”有关的复制命令都必须与“p”配合才能完成复制与粘贴功能。</p><p>6）. 替换</p><p>「r」：替换光标所在处的字符。</p><p>「R」：替换光标所到之处的字符，直到按下「ESC」键为止。</p><p>7）. 恢复/撤消/还原上一次操作</p><p>「u」：如果误执行一个命令，可以马上按下「u」，撤消上一个操作。按多次“u”可以执行多次撤消。</p><p>8）. 更改</p><p>「cw」：更改光标所在处的字到字尾处</p><p>「c#w」：例如，「c3w」表示更改3个字</p><p>9）. 跳至指定的行</p><p>「ctrl」+「g」列出光标所在行的行号。</p><p>「#G」：例如，「15G」，表示移动光标至文章的第15行行首。</p><h2 id="last-line-mode下命令简介" tabindex="-1"><a class="header-anchor" href="#last-line-mode下命令简介"><span>Last line mode下命令简介</span></a></h2><p>在使用「last line mode」之前，请记住先按「ESC」键确定您已经处于「command mode」下后，再按「：」冒号即可进入「last line mode」。</p><p>A) 列出行号</p><p>「set nu」：输入「set nu」后，会在文件中的每一行前面列出行号。</p><p>B) 跳到文件中的某一行</p><p>「#」：「#」号表示一个数字，在冒号后输入一个数字，再按回车键就会跳到该行了，如输入数字15，再回车，就会跳到文章的第15行。</p><p>C) 查找字符</p><p>「/关键字」：先按「/」键，再输入您想寻找的字符，如果第一次找的关键字不是您想要的，可以一直按「n」会往后寻找到您要的关键字为止。</p><p>「?关键字」：先按「?」键，再输入您想寻找的字符，如果第一次找的关键字不是您想要的，可以一直按「n」会往前寻找到您要的关键字为止。</p><p>D) 保存文件</p><p>「w」：在冒号输入字母「w」就可以将文件保存起来。</p><p>E) 离开vi</p><p>「q」：按「q」就是退出，如果无法离开vi，可以在「q」后跟一个「!」强制离开vi。</p><p>「qw」：一般建议离开时，搭配「w」一起使用，这样在退出的时候还可以保存文件。</p><h2 id="vi命令列表" tabindex="-1"><a class="header-anchor" href="#vi命令列表"><span>vi命令列表</span></a></h2><p>1、下表列出命令模式下的一些键的功能：</p><p>h 左移光标一个字符</p><p>l 右移光标一个字符</p><p>k 光标上移一行</p><p>j 光标下移一行</p><p>^ 光标移动至行首</p><p>0 数字“0”，光标移至文章的开头</p><p>G 光标移至文章的最后</p><p>$ 光标移动至行尾</p><p>Ctrl+f 向前翻屏</p><p>Ctrl+b 向后翻屏</p><p>Ctrl+d 向前翻半屏</p><p>Ctrl+u 向后翻半屏</p><p>i 在光标位置前插入字符</p><p>a 在光标所在位置的后一个字符开始增加</p><p>o 插入新的一行，从行首开始输入</p><p>ESC 从输入状态退至命令状态</p><p>x 删除光标后面的字符</p><p><code># x</code></p><p>删除光标后的＃个字符</p><p>X (大写X)，删除光标前面的字符</p><p><code># X</code></p><p>删除光标前面的#个字符</p><p>dd 删除光标所在的行</p><p><code># dd</code></p><p>删除从光标所在行数的#行</p><p>yw 复制光标所在位置的一个字</p><p><code># yw</code></p><p>复制光标所在位置的#个字</p><p>yy 复制光标所在位置的一行</p><p><code># yy</code></p><p>复制从光标所在行数的#行</p><p>p 粘贴</p><p>u 取消操作</p><p>cw 更改光标所在位置的一个字</p><p><code># cw</code></p><p>更改光标所在位置的#个字</p><p>下表列出行命令模式下的一些指令 w filename 储存正在编辑的文件为filename</p><p>wq filename 储存正在编辑的文件为filename，并退出vi</p><p>q! 放弃所有修改，退出vi</p><p>set nu 显示行号</p><p>/或? 查找，在/后输入要查找的内容</p><p>n 与/或?一起使用，如果查找的内容不是想要找的关键字，按n或向后（与/联用）或向前（与?联用）继续查找，直到找到为止。</p>`,127)]))}const d=e(t,[["render",s]]),m=JSON.parse('{"path":"/java-tutor/server-config/use-vim.html","title":"Linux vi/vim使用方法","lang":"zh-CN","frontmatter":{"description":"Linux vi/vim使用方法 提示 vi/vim 基本使用方法 vi编辑器是所有Unix及Linux系统下标准的编辑器，它的强大不逊色于任何最新的文本编辑器，这里只是简单地介绍一下它的用法和一小部分指令。 vi的基本概念 基本上vi可以分为三种状态，分别是命令模式（command mode）、插入模式（Insert mode）和底行模式（last ...","head":[["meta",{"property":"og:url","content":"https://yzqdev.github.io/cs-guide/cs-guide/java-tutor/server-config/use-vim.html"}],["meta",{"property":"og:site_name","content":"cs-guide"}],["meta",{"property":"og:title","content":"Linux vi/vim使用方法"}],["meta",{"property":"og:description","content":"Linux vi/vim使用方法 提示 vi/vim 基本使用方法 vi编辑器是所有Unix及Linux系统下标准的编辑器，它的强大不逊色于任何最新的文本编辑器，这里只是简单地介绍一下它的用法和一小部分指令。 vi的基本概念 基本上vi可以分为三种状态，分别是命令模式（command mode）、插入模式（Insert mode）和底行模式（last ..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2022-04-30T13:35:48.000Z"}],["meta",{"property":"article:modified_time","content":"2022-04-30T13:35:48.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"Linux vi/vim使用方法\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2022-04-30T13:35:48.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"yzqdev\\",\\"url\\":\\"http://www.yzqdev.top\\"}]}"]]},"headers":[{"level":2,"title":"vi的基本概念","slug":"vi的基本概念","link":"#vi的基本概念","children":[]},{"level":2,"title":"vi的基本操作","slug":"vi的基本操作","link":"#vi的基本操作","children":[]},{"level":2,"title":"命令行模式（command mode）功能键","slug":"命令行模式-command-mode-功能键","link":"#命令行模式-command-mode-功能键","children":[]},{"level":2,"title":"Last line mode下命令简介","slug":"last-line-mode下命令简介","link":"#last-line-mode下命令简介","children":[]},{"level":2,"title":"vi命令列表","slug":"vi命令列表","link":"#vi命令列表","children":[]}],"git":{"createdTime":1647861419000,"updatedTime":1651325748000,"contributors":[{"name":"yzqdev","username":"yzqdev","email":"yzqdev@outlook.com","commits":4,"url":"https://github.com/yzqdev"}]},"readingTime":{"minutes":6.98,"words":2095},"filePathRelative":"java-tutor/server-config/use-vim.md","localizedDate":"2022年3月21日","autoDesc":true}');export{d as comp,m as data};
