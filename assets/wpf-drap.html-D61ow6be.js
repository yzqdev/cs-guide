import{_ as s,c as a,a as t,o as e}from"./app-C8DxhDIZ.js";const p={};function o(c,n){return e(),a("div",null,n[0]||(n[0]=[t(`<h1 id="拖动事件" tabindex="-1"><a class="header-anchor" href="#拖动事件"><span>拖动事件</span></a></h1><blockquote><p>当产品间需要交互实现数据传递，或产品需要从外部导入文件时，通过控件拖拽来实现是个不错的选择。在UI上支持控件拖拽，可极大提升用户体验。 拖拽本身并不神秘，它的本质实际是一个数据交换的过程。控件接受从其他地方来的数据，并进行处理。数据交换有多种方法，Windows中剪贴板可能就是用的最多，但最不被注意的一种方法。 下面介绍用C#实现控件拖拽，并通过剪切板交换数据。</p></blockquote><h1 id="控件拖拽触发-响应函数" tabindex="-1"><a class="header-anchor" href="#控件拖拽触发-响应函数"><span><strong>控件拖拽触发/响应函数</strong></span></a></h1><p>对于拖拽的对象，需要在<strong>MouseDown</strong>或<strong>ItemDrag</strong>中调用<strong>DoDragDrop</strong>，传递要拖拽的数据对象并触发拖拽。总的来说，当用户调用DoDragDrop方法后，就进入到一个循环中。 循环会一直跟踪鼠标，检查鼠标所在的窗体是否实现IDropTarget，如果实现了则：调用<strong>DropEnter</strong>，并通过调用GiveFeedBack来显示效果；鼠标在控件上时，调用<strong>DropOver</strong>，也是通过GiveFeedBack来显示效果；在拖拽过程中，键盘或鼠标按键发生变化，可以通过QueryContinueDrag来检查是否能继续操作，根据不同的返回结果，调用<strong>DropOver</strong>或<strong>DropLeave</strong>；鼠标释放时触发<strong>DragDrop</strong>事件，执行拖拽逻辑。</p><ul><li><strong>DragEnter、DragOver、DragLeave事件</strong><strong>触发：</strong> 当用鼠标拖拽一个对象到控件的窗口时，首先触发DragEnter，然后是DragOver，拖放对象悬浮于拖放区域，在拖放区域内移动时多次触发DragOver，当离开窗体时触发DragLeave。 <strong>作用：</strong> 设置判断对象是否是要接受的类型以及鼠标的样式。</li><li><strong>DragDrop事件</strong><br><strong>触发：</strong> 当用户拖拽对象到控件上，并释放时触发。 <strong>作用：</strong> 接受拖拽数据，实现拖拽逻辑</li></ul><h1 id="实现控件拖拽的典型流程" tabindex="-1"><a class="header-anchor" href="#实现控件拖拽的典型流程"><span><strong>实现控件拖拽的典型流程</strong></span></a></h1><ol><li><strong>设置AllowDrop</strong><br> 在对一个控件进行拖拽编程时，我们必须把AllowDrop属性设置为True</li><li><strong>拖动对象触发DragDrop</strong></li></ol><div class="language-csharp" data-highlighter="prismjs" data-ext="cs" data-title="cs"><pre><code><span class="line"><span class="token keyword">private</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">listBox1_MouseDown</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">object</span></span> sender<span class="token punctuation">,</span> <span class="token class-name">System<span class="token punctuation">.</span>Windows<span class="token punctuation">.</span>Forms<span class="token punctuation">.</span>MouseEventArgs</span> e<span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">this</span><span class="token punctuation">.</span>listBox1<span class="token punctuation">.</span><span class="token function">DoDragDrop</span><span class="token punctuation">(</span><span class="token string">&quot;Drag Data&quot;</span><span class="token punctuation">,</span> DragDropEffects<span class="token punctuation">.</span>Move<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre></div><ol><li><strong>拖到目标响应DragDrop</strong></li></ol><div class="language-csharp line-numbers-mode" data-highlighter="prismjs" data-ext="cs" data-title="cs"><pre><code><span class="line"><span class="token keyword">private</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">listBox2_DragEnter</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">object</span></span> sender<span class="token punctuation">,</span> <span class="token class-name">System<span class="token punctuation">.</span>Windows<span class="token punctuation">.</span>Forms<span class="token punctuation">.</span>DragEventArgs</span> e<span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">if</span> <span class="token punctuation">(</span>e<span class="token punctuation">.</span>Data<span class="token punctuation">.</span><span class="token function">GetDataPresent</span><span class="token punctuation">(</span>DataFormats<span class="token punctuation">.</span>Text<span class="token punctuation">)</span><span class="token punctuation">)</span></span>
<span class="line">    <span class="token punctuation">{</span></span>
<span class="line">        <span class="token comment">//设置DragDrop效果</span></span>
<span class="line">        e<span class="token punctuation">.</span>Effect <span class="token operator">=</span> DragDropEffects<span class="token punctuation">.</span>Move<span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">private</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">listBox2_DragDrop</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">object</span></span> sender<span class="token punctuation">,</span> <span class="token class-name">System<span class="token punctuation">.</span>Windows<span class="token punctuation">.</span>Forms<span class="token punctuation">.</span>DragEventArgs</span> e<span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">{</span></span>
<span class="line">    <span class="token comment">//执行DragDrop逻辑</span></span>
<span class="line">    <span class="token keyword">this</span><span class="token punctuation">.</span>listBox2<span class="token punctuation">.</span>Items<span class="token punctuation">.</span><span class="token function">Add</span><span class="token punctuation">(</span>e<span class="token punctuation">.</span>Data<span class="token punctuation">.</span><span class="token function">GetData</span><span class="token punctuation">(</span>DataFormats<span class="token punctuation">.</span>Text<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token keyword">this</span><span class="token punctuation">.</span>listBox1<span class="token punctuation">.</span>Items<span class="token punctuation">.</span><span class="token function">Remove</span><span class="token punctuation">(</span>e<span class="token punctuation">.</span>Data<span class="token punctuation">.</span><span class="token function">GetData</span><span class="token punctuation">(</span>DataFormats<span class="token punctuation">.</span>Text<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h1 id="控件拖拽的参数" tabindex="-1"><a class="header-anchor" href="#控件拖拽的参数"><span><strong>控件拖拽的参数</strong></span></a></h1><div class="language-kotlin" data-highlighter="prismjs" data-ext="kt" data-title="kt"><pre><code><span class="line"><span class="token keyword">public</span> DragDropEffects <span class="token function">DoDragDrop</span> <span class="token punctuation">(</span> Object <span class="token keyword">data</span><span class="token punctuation">,</span>DragDropEffects allowedEffects<span class="token punctuation">)</span></span>
<span class="line"></span></code></pre></div><ul><li>**data：**户所要拖动的数据内容。必须将所要拖动的内容传入到这个方法的第一个参数位置。并不是必须得，比如在不同应用间传递数据时，可以借由<a href="https://www.jianshu.com/p/b60b77fcb2a3" target="_blank" rel="noopener noreferrer">剪切板</a>。</li></ul><h1 id="控件拖拽的特效" tabindex="-1"><a class="header-anchor" href="#控件拖拽的特效"><span><strong>控件拖拽的特效</strong></span></a></h1><p>控件拖拽的特效由DragDropEffects枚举来指定。</p><ul><li><strong>DragDropEffects说明</strong></li></ul><table><thead><tr><th>成员名称</th><th style="text-align:left;">说明</th></tr></thead><tbody><tr><td>All</td><td style="text-align:left;">Copy、Move 和 Scroll 效果的组合</td></tr><tr><td>Copy</td><td style="text-align:left;">将拖动源中的数据复制到放置目标，图标为一个框右上角带+</td></tr><tr><td>Link</td><td style="text-align:left;">将拖动源中的数据链接到放置目标，图标为数据快捷图标</td></tr><tr><td>Move</td><td style="text-align:left;">将拖动源的数据移动到放置目标，图标为一个框</td></tr><tr><td>None</td><td style="text-align:left;">放置目标不接受该数据，图标为禁止标识</td></tr><tr><td>Scroll</td><td style="text-align:left;">拖动时，如果有滚动条目，可以滚动目标，以定位在目标中当前不可见的某个放置位置</td></tr></tbody></table><p><a href="https://github.com/xiong-ang/CShape_SLN" target="_blank" rel="noopener noreferrer">Demo</a></p><ul><li><p>界面</p><p><img src="https://github.com/xiong-ang/CShape_SLN/blob/master/Image/DragDrop.PNG?raw=true" alt="img"></p></li><li><p><strong>功能</strong><br> 实现文件的拖拽以及应用程序之间的拖拽。</p></li></ul>`,19)]))}const r=s(p,[["render",o]]),i=JSON.parse('{"path":"/csharp-tutor/snippets/wpf-drap.html","title":"拖动事件","lang":"zh-CN","frontmatter":{"description":"拖动事件 当产品间需要交互实现数据传递，或产品需要从外部导入文件时，通过控件拖拽来实现是个不错的选择。在UI上支持控件拖拽，可极大提升用户体验。 拖拽本身并不神秘，它的本质实际是一个数据交换的过程。控件接受从其他地方来的数据，并进行处理。数据交换有多种方法，Windows中剪贴板可能就是用的最多，但最不被注意的一种方法。 下面介绍用C#实现控件拖拽，并...","head":[["meta",{"property":"og:url","content":"https://yzqdev.github.io/cs-guide/cs-guide/csharp-tutor/snippets/wpf-drap.html"}],["meta",{"property":"og:site_name","content":"cs-guide"}],["meta",{"property":"og:title","content":"拖动事件"}],["meta",{"property":"og:description","content":"拖动事件 当产品间需要交互实现数据传递，或产品需要从外部导入文件时，通过控件拖拽来实现是个不错的选择。在UI上支持控件拖拽，可极大提升用户体验。 拖拽本身并不神秘，它的本质实际是一个数据交换的过程。控件接受从其他地方来的数据，并进行处理。数据交换有多种方法，Windows中剪贴板可能就是用的最多，但最不被注意的一种方法。 下面介绍用C#实现控件拖拽，并..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:image","content":"https://github.com/xiong-ang/CShape_SLN/blob/master/Image/DragDrop.PNG?raw=true"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2022-05-29T07:27:35.000Z"}],["meta",{"property":"article:modified_time","content":"2022-05-29T07:27:35.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"拖动事件\\",\\"image\\":[\\"https://github.com/xiong-ang/CShape_SLN/blob/master/Image/DragDrop.PNG?raw=true\\"],\\"dateModified\\":\\"2022-05-29T07:27:35.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"yzqdev\\",\\"url\\":\\"http://www.yzqdev.top\\"}]}"]]},"headers":[],"git":{"createdTime":1653809255000,"updatedTime":1653809255000,"contributors":[{"name":"yzqdev","username":"yzqdev","email":"yzqdev@outlook.com","commits":1,"url":"https://github.com/yzqdev"}]},"readingTime":{"minutes":2.87,"words":862},"filePathRelative":"csharp-tutor/snippets/wpf-drap.md","localizedDate":"2022年5月29日","autoDesc":true}');export{r as comp,i as data};
