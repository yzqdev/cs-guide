import{_ as a,c as s,a as p,o as e}from"./app-C8DxhDIZ.js";const t={};function o(i,n){return e(),s("div",null,n[0]||(n[0]=[p(`<h1 id="模块" tabindex="-1"><a class="header-anchor" href="#模块"><span>模块</span></a></h1><p>学习到这里，可以说 Python 基础学习基本接近尾声了。</p><h1 id="目录" tabindex="-1"><a class="header-anchor" href="#目录"><span>目录</span></a></h1><p><img src="http://twowaterimage.oss-cn-beijing.aliyuncs.com/2019-10-14-模块与包.png" alt=""></p><h1 id="一、python-模块简介" tabindex="-1"><a class="header-anchor" href="#一、python-模块简介"><span>一、Python 模块简介</span></a></h1><p>在开发过程中，随着程序代码越写越多，在一个文件里代码就会越来越长，越来越不容易维护。</p><p>后面我们学习了函数，知道函数是实现一项或多项功能的一段程序，这样就更方便我们重复使用代码。</p><p>紧接着，我们有学了类，类可以封装方法和变量（属性）。这样就更方便我们维护代码了。</p><p>我们之前学过，类的结构是这样的:</p><p><img src="http://twowaterimage.oss-cn-beijing.aliyuncs.com/2019-10-08-034102.png" alt=""></p><p>而我们要学的模块是这样的：</p><p><img src="http://twowaterimage.oss-cn-beijing.aliyuncs.com/2019-10-10-175017.png" alt=""></p><p>在模块中，我们不但可以直接存放变量，还能存放函数，还能存放类。</p><p>不知道你们还有没有印象，我们封装函数用的是 <code>def</code> , 封装类用的是 <code>class</code> 。</p><p>而我们封装模块，是不需要任何语句的。</p><p><strong>在 Python 中，一个 .py 文件就称之为一个模块（Module）。</strong></p><p>可以看下我之前写的例子，在 pychrome 上 ，这样一个 test.py 文件就是一个模块。</p><p><img src="http://twowaterimage.oss-cn-beijing.aliyuncs.com/2019-10-14-070013.png" alt=""></p><p>其实模块就是函数功能的扩展。为什么这么说呢？</p><p>那是因为模块其实就是实现一项或多项功能的程序块。</p><p>通过上面的定义，不难发现，函数和模块都是用来实现功能的，只是模块的范围比函数广，在模块中，可以有多个函数。</p><p>然有了函数，那为啥那需要模块？</p><p>最大的好处是大大提高了代码的可维护性。</p><p>其次，编写代码不必从零开始。当一个模块编写完毕，就可以被其他地方引用。我们在编写程序的时候，也经常引用其他模块，包括 Python 内置的模块和来自第三方的模块。</p><p>使用模块还可以避免函数名和变量名冲突。相同名字的函数和变量完全可以分别存在不同的模块中，因此，我们自己在编写模块时，不必考虑名字会与其他模块冲突。但是也要注意，尽量不要与内置函数名字冲突。</p><p>Python 本身就内置了很多非常有用的模块，只要安装完毕，这些模块就可以立刻使用。我们可以尝试找下这些模块，比如我的 Python 安装目录是默认的安装目录，在 C:\\Users\\Administrator\\AppData\\Local\\Programs\\Python\\Python36 ，然后找到 Lib 目录，就可以发现里面全部都是模块，没错，这些 <code>.py</code> 文件就是模块了。</p><p><img src="http://twowaterimage.oss-cn-beijing.aliyuncs.com/2019-10-14-python36bin目录.png" alt=""></p><p>其实模块可以分为标准库模块和自定义模块，而刚刚我们看到的 Lib 目录下的都是标准库模块。</p><h1 id="二、模块的使用" tabindex="-1"><a class="header-anchor" href="#二、模块的使用"><span>二、模块的使用</span></a></h1><h2 id="_1、import" tabindex="-1"><a class="header-anchor" href="#_1、import"><span>1、import</span></a></h2><p>Python 模块的使用跟其他编程语言也是类似的。你要使用某个模块，在使用之前，必须要导入这个模块。导入模块我们使用关键字 <code>import</code>。</p><p><code>import</code> 的语法基本如下：</p><div class="language-python" data-highlighter="prismjs" data-ext="py" data-title="py"><pre><code><span class="line"><span class="token keyword">import</span> module1<span class="token punctuation">[</span><span class="token punctuation">,</span> module2<span class="token punctuation">[</span><span class="token punctuation">,</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> moduleN<span class="token punctuation">]</span></span>
<span class="line"></span></code></pre></div><p>比如我们使用标准库模块中的 math 模块。当解释器遇到 <code>import</code> 语句，如果模块在当前的搜索路径就会被导入。</p><div class="language-python" data-highlighter="prismjs" data-ext="py" data-title="py"><pre><code><span class="line"><span class="token comment">#!/usr/bin/env python3</span></span>
<span class="line"><span class="token comment"># -*- coding: UTF-8 -*-</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">import</span> math</span>
<span class="line"></span>
<span class="line">_author_ <span class="token operator">=</span> <span class="token string">&#39;两点水&#39;</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">print</span><span class="token punctuation">(</span>math<span class="token punctuation">.</span>pi<span class="token punctuation">)</span></span>
<span class="line"></span></code></pre></div><p>输出的结果：</p><div class="language-txt" data-highlighter="prismjs" data-ext="txt" data-title="txt"><pre><code><span class="line">3.141592653589793</span>
<span class="line"></span></code></pre></div><p>一个模块只会被导入一次，不管你执行了多少次 import。这样可以防止导入模块被一遍又一遍地执行。</p><p>当我们使用 import 语句的时候，Python 解释器是怎样找到对应的文件的呢？</p><p>这就涉及到 Python 的搜索路径，搜索路径是由一系列目录名组成的，Python 解释器就依次从这些目录中去寻找所引入的模块。这看起来很像环境变量，事实上，也可以通过定义环境变量的方式来确定搜索路径。搜索路径是在 Python 编译或安装的时候确定的，安装新的库应该也会修改。搜索路径被存储在sys 模块中的 path 变量 。</p><p>因此，我们可以查一下路径：</p><div class="language-python" data-highlighter="prismjs" data-ext="py" data-title="py"><pre><code><span class="line"><span class="token comment">#!/usr/bin/env python</span></span>
<span class="line"><span class="token comment"># -*- coding: UTF-8 -*-</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">import</span> sys</span>
<span class="line"></span>
<span class="line"><span class="token keyword">print</span><span class="token punctuation">(</span>sys<span class="token punctuation">.</span>path<span class="token punctuation">)</span></span>
<span class="line"></span></code></pre></div><p>输出结果：</p><div class="language-txt" data-highlighter="prismjs" data-ext="txt" data-title="txt"><pre><code><span class="line">[&#39;C:\\\\Users\\\\Administrator\\\\Desktop\\\\Python\\\\Python8Code&#39;, &#39;G:\\\\PyCharm 2017.1.4\\\\helpers\\\\pycharm&#39;, &#39;C:\\\\Users\\\\Administrator\\\\AppData\\\\Local\\\\Programs\\\\Python\\\\Python36\\\\python36.zip&#39;, &#39;C:\\\\Users\\\\Administrator\\\\AppData\\\\Local\\\\Programs\\\\Python\\\\Python36\\\\DLLs&#39;, &#39;C:\\\\Users\\\\Administrator\\\\AppData\\\\Local\\\\Programs\\\\Python\\\\Python36\\\\lib&#39;, &#39;C:\\\\Users\\\\Administrator\\\\AppData\\\\Local\\\\Programs\\\\Python\\\\Python36&#39;, &#39;C:\\\\Users\\\\Administrator\\\\AppData\\\\Local\\\\Programs\\\\Python\\\\Python36\\\\lib\\\\site-packages&#39;, &#39;C:\\\\Users\\\\Administrator\\\\Desktop\\\\Python\\\\Python8Code\\\\com\\\\Learn\\\\module\\\\sys&#39;]</span>
<span class="line"></span>
<span class="line"></span></code></pre></div><h2 id="_2、from···import" tabindex="-1"><a class="header-anchor" href="#_2、from···import"><span>2、from···import</span></a></h2><p>有没有想过，怎么直接导入某个模块中的属性和方法呢？</p><p>Python 中，导入一个模块的方法我们使用的是 <code>import</code> 关键字，这样做是导入了这个模块，这里需要注意了，这样做只是导入了模块，并没有导入模块中具体的某个属性或方法的。而我们想直接导入某个模块中的某一个功能，也就是属性和方法的话，我们可以使用 <code>from···import</code> 语句。</p><p>语法如下：</p><div class="language-python" data-highlighter="prismjs" data-ext="py" data-title="py"><pre><code><span class="line"><span class="token keyword">from</span> modname <span class="token keyword">import</span> name1<span class="token punctuation">[</span><span class="token punctuation">,</span> name2<span class="token punctuation">[</span><span class="token punctuation">,</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> nameN<span class="token punctuation">]</span><span class="token punctuation">]</span></span>
<span class="line"></span></code></pre></div><p>看完简介后可能会想， <code>from···import</code> 和 <code>import</code> 方法有啥区别呢？</p><p>想知道区别是什么，观察下面两个例子：</p><p><code>import</code> 导入 sys 模块，然后使用 version 属性</p><p><img src="http://twowaterimage.oss-cn-beijing.aliyuncs.com/2019-10-14-from···import和 import的区别1.png" alt=""></p><p><code>from···import</code> 直接导入 version 属性</p><h2 id="_3、from-···-import" tabindex="-1"><a class="header-anchor" href="#_3、from-···-import"><span>3、from ··· import *</span></a></h2><p>通过上面的学习，我们知道了 <code>from sys import version</code> 可以直接导入 version 属性。</p><p>但是如果我们想使用其他的属性呢？</p><p>比如使用 sys 模块中的 <code>executable</code> ，难道又要写多一句 <code>from sys import executable</code> ,两个还好，如果三个，四个呢？</p><p>难道要一直这样写下去？</p><p>这时候就需要 <code>from ··· import *</code> 语句了，这个语句可以把某个模块中的所有方法属性都导入。比如：</p><div class="language-python" data-highlighter="prismjs" data-ext="py" data-title="py"><pre><code><span class="line"><span class="token comment">#!/usr/bin/env python3</span></span>
<span class="line"><span class="token comment"># -*- coding: UTF-8 -*-</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">from</span> sys <span class="token keyword">import</span> <span class="token operator">*</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">print</span><span class="token punctuation">(</span>version<span class="token punctuation">)</span></span>
<span class="line"><span class="token keyword">print</span><span class="token punctuation">(</span>executable<span class="token punctuation">)</span></span>
<span class="line"></span>
<span class="line"></span></code></pre></div><p>输出的结果为：</p><div class="language-txt" data-highlighter="prismjs" data-ext="txt" data-title="txt"><pre><code><span class="line">3.6.1 (v3.6.1:69c0db5, Mar 21 2017, 18:41:36) [MSC v.1900 64 bit (AMD64)]</span>
<span class="line">C:\\Users\\Administrator\\AppData\\Local\\Programs\\Python\\Python36\\python.exe</span>
<span class="line"></span></code></pre></div><p>注意：这提供了一个简单的方法来导入一个模块中的所有方法属性。然而这种声明不该被过多地使用。</p><h1 id="三、主模块和非主模块" tabindex="-1"><a class="header-anchor" href="#三、主模块和非主模块"><span>三、主模块和非主模块</span></a></h1><h2 id="_1、主模块和非主模块的定义" tabindex="-1"><a class="header-anchor" href="#_1、主模块和非主模块的定义"><span>1、主模块和非主模块的定义</span></a></h2><p>在 Python 函数中，如果一个函数调用了其他函数完成一项功能，我们称这个函数为主函数，如果一个函数没有调用其他函数，我们称这种函数为非主函数。主模块和非主模块的定义也类似，如果一个模块被直接使用，而没有被别人调用，我们称这个模块为主模块，如果一个模块被别人调用，我们称这个模块为非主模块。</p><h2 id="_2、name-属性" tabindex="-1"><a class="header-anchor" href="#_2、name-属性"><span>2、<strong>name</strong> 属性</span></a></h2><p>在 Python 中，有主模块和非主模块之分，当然，我们也得区分他们啊。那么怎么区分主模块和非主模块呢？</p><p>这就需要用到 <code>__name__</code> 属性了，这个 <code>——name——</code> 属性值是一个变量，且这个变量是系统给出的。利用这个变量可以判断一个模块是否是主模块。如果一个属性的值是 <code>__main__</code> ,那么就说明这个模块是主模块，反之亦然。但是要注意了：<strong>这个 <code>__main__</code> 属性只是帮助我们判断是否是主模块，并不是说这个属性决定他们是否是主模块，决定是否是主模块的条件只是这个模块有没有被人调用</strong></p><p>具体看示例：</p><p>首先创建了模块 lname ，然后判断一下是否是主模块，如果是主模块就输出 <code>main</code> 不是，就输出 <code>not main</code> ，首先直接运行该模块，由于该模块是直接使用，而没有被人调用，所以是主模块，因此输出了 <code>main</code> ，具体看下图：</p><p><img src="http://twowaterimage.oss-cn-beijing.aliyuncs.com/2019-10-14-name属性区分模块1.png" alt=""></p><p>然后又创建一个 user_lname 模块，里面只是简单的导入了 lname 模块，然后执行，输出的结果是 <code>not main</code> ，因为 lname 模块被该模块调用了，所以不是主模块，输出结果如图：</p><p><img src="http://twowaterimage.oss-cn-beijing.aliyuncs.com/2019-10-14-name属性区分模块2.png" alt=""></p><h1 id="四、包" tabindex="-1"><a class="header-anchor" href="#四、包"><span>四、包</span></a></h1><p>包，其实在上面的一些例子中，都创建了不同的包名了，具体可以仔细观察。</p><p>在一开始模块的简介中提到，使用模块可以避免函数名和变量名冲突。</p><p>相同名字的函数和变量完全可以分别存在不同的模块中，因此，我们自己在编写模块时，不必考虑名字会与其他模块冲突。但是也要注意，尽量不要与内置函数名字冲突。</p><p>但是这里也有个问题，如果不同的人编写的模块名相同怎么办？</p><p>为了避免模块名冲突，Python 又引入了按目录来组织模块的方法，称为包（Package）。</p><p>比如最开始的例子，就引入了包，这样子做就算有相同的模块名，也不会造成重复，因为包名不同，其实也就是路径不同。如下图，引入了包名后， lname.py 其实变成了 com.Learn.module.nameattributes.lname</p><p><img src="http://twowaterimage.oss-cn-beijing.aliyuncs.com/2019-10-14-Python 包.png" alt=""></p><p>仔细观察的人，基本会发现，每一个包目录下面都会有一个 <code>__init__.py</code> 的文件，为什么呢？</p><p>因为这个文件是必须的，否则，Python 就把这个目录当成普通目录，而不是一个包 。 <code>__init__.py</code> 可以是空文件，也可以有Python代码，因为 <code>__init__.py</code> 本身就是一个模块，而它对应的模块名就是它的包名。</p><h1 id="五、作用域" tabindex="-1"><a class="header-anchor" href="#五、作用域"><span>五、作用域</span></a></h1><p>学习过 Java 的同学都知道，Java 的类里面可以给方法和属性定义公共的（ public ）或者是私有的 （ private ）,这样做主要是为了我们希望有些函数和属性能给别人使用或者只能内部使用。</p><p>通过学习 Python 中的模块，其实和 Java 中的类相似，那么我们怎么实现在一个模块中，有的函数和变量给别人使用，有的函数和变量仅仅在模块内部使用呢？</p><p>在 Python 中，是通过 <code>_</code> 前缀来实现的。正常的函数和变量名是公开的（public），可以被直接引用，比如：abc，ni12，PI等；类似<code>__xxx__</code>这样的变量是特殊变量，可以被直接引用，但是有特殊用途，比如上面的 <code>__name__</code> 就是特殊变量，还有 <code>__author__</code> 也是特殊变量，用来标明作者。</p><p>注意，我们自己的变量一般不要用这种变量名；类似 <code>_xxx</code> 和 <code>__xxx</code> 这样的函数或变量就是非公开的（private），不应该被直接引用，比如 <code>_abc</code> ，<code>__abc</code> 等；</p><p><strong>这里是说不应该，而不是不能。因为 Python 种并没有一种方法可以完全限制访问 private 函数或变量，但是，从编程习惯上不应该引用 private 函数或变量。</strong></p><p>比如：</p><div class="language-python line-numbers-mode" data-highlighter="prismjs" data-ext="py" data-title="py"><pre><code><span class="line"><span class="token comment">#!/usr/bin/env python3</span></span>
<span class="line"><span class="token comment"># -*- coding: UTF-8 -*-</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">def</span> <span class="token function">_diamond_vip</span><span class="token punctuation">(</span>lv<span class="token punctuation">)</span><span class="token punctuation">:</span></span>
<span class="line">    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&#39;尊敬的钻石会员用户，您好&#39;</span><span class="token punctuation">)</span></span>
<span class="line">    vip_name <span class="token operator">=</span> <span class="token string">&#39;DiamondVIP&#39;</span> <span class="token operator">+</span> <span class="token builtin">str</span><span class="token punctuation">(</span>lv<span class="token punctuation">)</span></span>
<span class="line">    <span class="token keyword">return</span> vip_name</span>
<span class="line"></span>
<span class="line"></span>
<span class="line"><span class="token keyword">def</span> <span class="token function">_gold_vip</span><span class="token punctuation">(</span>lv<span class="token punctuation">)</span><span class="token punctuation">:</span></span>
<span class="line">    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&#39;尊敬的黄金会员用户，您好&#39;</span><span class="token punctuation">)</span></span>
<span class="line">    vip_name <span class="token operator">=</span> <span class="token string">&#39;GoldVIP&#39;</span> <span class="token operator">+</span> <span class="token builtin">str</span><span class="token punctuation">(</span>lv<span class="token punctuation">)</span></span>
<span class="line">    <span class="token keyword">return</span> vip_name</span>
<span class="line"></span>
<span class="line"></span>
<span class="line"><span class="token keyword">def</span> <span class="token function">vip_lv_name</span><span class="token punctuation">(</span>lv<span class="token punctuation">)</span><span class="token punctuation">:</span></span>
<span class="line">    <span class="token keyword">if</span> lv <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">:</span></span>
<span class="line">        <span class="token keyword">print</span><span class="token punctuation">(</span>_gold_vip<span class="token punctuation">(</span>lv<span class="token punctuation">)</span><span class="token punctuation">)</span></span>
<span class="line">    <span class="token keyword">elif</span> lv <span class="token operator">==</span> <span class="token number">2</span><span class="token punctuation">:</span></span>
<span class="line">        <span class="token keyword">print</span><span class="token punctuation">(</span>_diamond_vip<span class="token punctuation">(</span>lv<span class="token punctuation">)</span><span class="token punctuation">)</span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line">vip_lv_name<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span></span>
<span class="line"></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>输出的结果：</p><div class="language-txt" data-highlighter="prismjs" data-ext="txt" data-title="txt"><pre><code><span class="line">尊敬的钻石会员用户，您好</span>
<span class="line">DiamondVIP2</span>
<span class="line"></span></code></pre></div><p>在这个模块中，我们公开 <code>vip_lv_name</code> 方法函数，而其他内部的逻辑分别在 <code>_diamond_vip</code> 和 <code>_gold_vip</code> private 函数中实现，因为是内部实现逻辑，调用者根本不需要关心这个函数方法，它只需关心调用 <code>vip_lv_name</code> 的方法函数，所以用 private 是非常有用的代码封装和抽象的方法</p><p>一般情况下，外部不需要引用的函数全部定义成 private，只有外部需要引用的函数才定义为 public。</p><hr><p>最后扯淡，欢迎加我微信：<code>thinktoday2019</code>, 进入微信 Python 讨论群。</p>`,99)]))}const l=a(t,[["render",o]]),r=JSON.parse('{"path":"/python-tutor/basics/modules.html","title":"模块","lang":"zh-CN","frontmatter":{"description":"模块 学习到这里，可以说 Python 基础学习基本接近尾声了。 目录 一、Python 模块简介 在开发过程中，随着程序代码越写越多，在一个文件里代码就会越来越长，越来越不容易维护。 后面我们学习了函数，知道函数是实现一项或多项功能的一段程序，这样就更方便我们重复使用代码。 紧接着，我们有学了类，类可以封装方法和变量（属性）。这样就更方便我们维护代码...","head":[["meta",{"property":"og:url","content":"https://yzqdev.github.io/cs-guide/cs-guide/python-tutor/basics/modules.html"}],["meta",{"property":"og:site_name","content":"cs-guide"}],["meta",{"property":"og:title","content":"模块"}],["meta",{"property":"og:description","content":"模块 学习到这里，可以说 Python 基础学习基本接近尾声了。 目录 一、Python 模块简介 在开发过程中，随着程序代码越写越多，在一个文件里代码就会越来越长，越来越不容易维护。 后面我们学习了函数，知道函数是实现一项或多项功能的一段程序，这样就更方便我们重复使用代码。 紧接着，我们有学了类，类可以封装方法和变量（属性）。这样就更方便我们维护代码..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:image","content":"http://twowaterimage.oss-cn-beijing.aliyuncs.com/2019-10-14-%E6%A8%A1%E5%9D%97%E4%B8%8E%E5%8C%85.png"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2022-05-26T11:39:36.000Z"}],["meta",{"property":"article:modified_time","content":"2022-05-26T11:39:36.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"模块\\",\\"image\\":[\\"http://twowaterimage.oss-cn-beijing.aliyuncs.com/2019-10-14-%E6%A8%A1%E5%9D%97%E4%B8%8E%E5%8C%85.png\\",\\"http://twowaterimage.oss-cn-beijing.aliyuncs.com/2019-10-08-034102.png\\",\\"http://twowaterimage.oss-cn-beijing.aliyuncs.com/2019-10-10-175017.png\\",\\"http://twowaterimage.oss-cn-beijing.aliyuncs.com/2019-10-14-070013.png\\",\\"http://twowaterimage.oss-cn-beijing.aliyuncs.com/2019-10-14-python36bin%E7%9B%AE%E5%BD%95.png\\",\\"http://twowaterimage.oss-cn-beijing.aliyuncs.com/2019-10-14-from%C2%B7%C2%B7%C2%B7import%E5%92%8C%20import%E7%9A%84%E5%8C%BA%E5%88%AB1.png\\",\\"http://twowaterimage.oss-cn-beijing.aliyuncs.com/2019-10-14-name%E5%B1%9E%E6%80%A7%E5%8C%BA%E5%88%86%E6%A8%A1%E5%9D%971.png\\",\\"http://twowaterimage.oss-cn-beijing.aliyuncs.com/2019-10-14-name%E5%B1%9E%E6%80%A7%E5%8C%BA%E5%88%86%E6%A8%A1%E5%9D%972.png\\",\\"http://twowaterimage.oss-cn-beijing.aliyuncs.com/2019-10-14-Python%20%E5%8C%85.png\\"],\\"dateModified\\":\\"2022-05-26T11:39:36.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"yzqdev\\",\\"url\\":\\"http://www.yzqdev.top\\"}]}"]]},"headers":[{"level":2,"title":"1、import","slug":"_1、import","link":"#_1、import","children":[]},{"level":2,"title":"2、from···import","slug":"_2、from···import","link":"#_2、from···import","children":[]},{"level":2,"title":"3、from ··· import *","slug":"_3、from-···-import","link":"#_3、from-···-import","children":[]},{"level":2,"title":"1、主模块和非主模块的定义","slug":"_1、主模块和非主模块的定义","link":"#_1、主模块和非主模块的定义","children":[]},{"level":2,"title":"2、name 属性","slug":"_2、name-属性","link":"#_2、name-属性","children":[]}],"git":{"createdTime":1653565176000,"updatedTime":1653565176000,"contributors":[{"name":"yzqdev","username":"yzqdev","email":"yzqdev@outlook.com","commits":1,"url":"https://github.com/yzqdev"}]},"readingTime":{"minutes":10.26,"words":3079},"filePathRelative":"python-tutor/basics/modules.md","localizedDate":"2022年5月26日","autoDesc":true}');export{l as comp,r as data};
