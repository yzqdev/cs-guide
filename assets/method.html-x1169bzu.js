import{_ as s,c as a,a as p,o as t}from"./app-C8DxhDIZ.js";const e={};function o(c,n){return t(),a("div",null,n[0]||(n[0]=[p(`<h1 id="go方法和函数" tabindex="-1"><a class="header-anchor" href="#go方法和函数"><span>go方法和函数</span></a></h1><h2 id="函数" tabindex="-1"><a class="header-anchor" href="#函数"><span>函数</span></a></h2><p>go的函数和java,c#的方法一样,不过go没有private,public,protected之类的,小写函数名表示私有,大写函数名表示导出,其他包可以访问</p><div class="language-go" data-highlighter="prismjs" data-ext="go" data-title="go"><pre><code><span class="line"><span class="token keyword">func</span> <span class="token function">test</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span> y <span class="token builtin">int</span><span class="token punctuation">,</span> s <span class="token builtin">string</span><span class="token punctuation">)</span> <span class="token punctuation">(</span><span class="token builtin">int</span><span class="token punctuation">,</span> <span class="token builtin">string</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token comment">// 类型相同的相邻参数，参数类型可合并。 多返回值必须用括号。</span></span>
<span class="line">    n <span class="token operator">:=</span> x <span class="token operator">+</span> y          </span>
<span class="line">    <span class="token keyword">return</span> n<span class="token punctuation">,</span> fmt<span class="token punctuation">.</span><span class="token function">Sprintf</span><span class="token punctuation">(</span>s<span class="token punctuation">,</span> n<span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre></div><h2 id="方法" tabindex="-1"><a class="header-anchor" href="#方法"><span>方法</span></a></h2><div class="language-go" data-highlighter="prismjs" data-ext="go" data-title="go"><pre><code><span class="line"><span class="token keyword">type</span> Test <span class="token keyword">struct</span><span class="token punctuation">{</span><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">// 无参数、无返回值</span></span>
<span class="line"><span class="token keyword">func</span> <span class="token punctuation">(</span>t Test<span class="token punctuation">)</span> <span class="token function">method0</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line"></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"><span class="token comment">// 单参数、无返回值</span></span>
<span class="line"><span class="token keyword">func</span> <span class="token punctuation">(</span>t Test<span class="token punctuation">)</span> <span class="token function">method1</span><span class="token punctuation">(</span>i <span class="token builtin">int</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line"></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"><span class="token comment">// 多参数、无返回值</span></span>
<span class="line"><span class="token keyword">func</span> <span class="token punctuation">(</span>t Test<span class="token punctuation">)</span> <span class="token function">method2</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span> y <span class="token builtin">int</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line"></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre></div><h2 id="方法接收者的值类型和指针类型" tabindex="-1"><a class="header-anchor" href="#方法接收者的值类型和指针类型"><span>方法接收者的值类型和指针类型</span></a></h2><div class="language-go" data-highlighter="prismjs" data-ext="go" data-title="go"><pre><code><span class="line"><span class="token keyword">type</span> User <span class="token keyword">struct</span> <span class="token punctuation">{</span></span>
<span class="line">    age <span class="token builtin">int</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">func</span> <span class="token punctuation">(</span>u User<span class="token punctuation">)</span> <span class="token function">add</span><span class="token punctuation">(</span>v <span class="token builtin">int</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">   u<span class="token punctuation">.</span>age <span class="token operator">+=</span> v</span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    c <span class="token operator">:=</span> User<span class="token punctuation">{</span>age<span class="token punctuation">:</span> <span class="token number">100</span><span class="token punctuation">}</span></span>
<span class="line">    c<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token number">50</span><span class="token punctuation">)</span></span>
<span class="line">    fmt<span class="token punctuation">.</span><span class="token function">Print</span><span class="token punctuation">(</span> <span class="token string">&quot;age=&gt;&quot;</span><span class="token operator">+</span>c<span class="token punctuation">.</span>age<span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"></span></code></pre></div><p>因为接受者是值类型,所以最后user的age是100,而不是150</p><div class="language-go" data-highlighter="prismjs" data-ext="go" data-title="go"><pre><code><span class="line"><span class="token keyword">type</span> User <span class="token keyword">struct</span> <span class="token punctuation">{</span></span>
<span class="line">    age <span class="token builtin">int</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">func</span> <span class="token punctuation">(</span>u <span class="token operator">*</span>User<span class="token punctuation">)</span> <span class="token function">add</span><span class="token punctuation">(</span>v <span class="token builtin">int</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">   u<span class="token punctuation">.</span>age <span class="token operator">+=</span> v</span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    c <span class="token operator">:=</span> User<span class="token punctuation">{</span>age<span class="token punctuation">:</span> <span class="token number">100</span><span class="token punctuation">}</span></span>
<span class="line">    c<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token number">50</span><span class="token punctuation">)</span></span>
<span class="line">    fmt<span class="token punctuation">.</span><span class="token function">Print</span><span class="token punctuation">(</span> <span class="token string">&quot;age=&gt;&quot;</span><span class="token operator">+</span>c<span class="token punctuation">.</span>age<span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre></div><p>而这种,因为接受者是引用类型,user.age是150</p>`,11)]))}const i=s(e,[["render",o]]),u=JSON.parse('{"path":"/go-tutor/basics/method.html","title":"go方法和函数","lang":"zh-CN","frontmatter":{"description":"go方法和函数 函数 go的函数和java,c#的方法一样,不过go没有private,public,protected之类的,小写函数名表示私有,大写函数名表示导出,其他包可以访问 方法 方法接收者的值类型和指针类型 因为接受者是值类型,所以最后user的age是100,而不是150 而这种,因为接受者是引用类型,user.age是150","head":[["meta",{"property":"og:url","content":"https://yzqdev.github.io/cs-guide/cs-guide/go-tutor/basics/method.html"}],["meta",{"property":"og:site_name","content":"cs-guide"}],["meta",{"property":"og:title","content":"go方法和函数"}],["meta",{"property":"og:description","content":"go方法和函数 函数 go的函数和java,c#的方法一样,不过go没有private,public,protected之类的,小写函数名表示私有,大写函数名表示导出,其他包可以访问 方法 方法接收者的值类型和指针类型 因为接受者是值类型,所以最后user的age是100,而不是150 而这种,因为接受者是引用类型,user.age是150"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2022-08-21T02:04:02.000Z"}],["meta",{"property":"article:modified_time","content":"2022-08-21T02:04:02.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"go方法和函数\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2022-08-21T02:04:02.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"yzqdev\\",\\"url\\":\\"http://www.yzqdev.top\\"}]}"]]},"headers":[{"level":2,"title":"函数","slug":"函数","link":"#函数","children":[]},{"level":2,"title":"方法","slug":"方法","link":"#方法","children":[]},{"level":2,"title":"方法接收者的值类型和指针类型","slug":"方法接收者的值类型和指针类型","link":"#方法接收者的值类型和指针类型","children":[]}],"git":{"createdTime":1661047442000,"updatedTime":1661047442000,"contributors":[{"name":"yzqdev","username":"yzqdev","email":"yzqdev@outlook.com","commits":1,"url":"https://github.com/yzqdev"}]},"readingTime":{"minutes":0.83,"words":249},"filePathRelative":"go-tutor/basics/method.md","localizedDate":"2022年8月21日","autoDesc":true}');export{i as comp,u as data};
