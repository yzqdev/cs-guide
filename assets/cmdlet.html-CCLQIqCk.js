import{_ as d,c as e,a as o,o as r}from"./app-C8DxhDIZ.js";const c={};function l(a,t){return r(),e("div",null,t[0]||(t[0]=[o('<h1 id="cmdlet" tabindex="-1"><a class="header-anchor" href="#cmdlet"><span>cmdlet</span></a></h1><p>cmdlet发音为:”command-lets”，它是在PowerShell环境中使用的轻量级命令。 这些是在PowerShell环境中实现特殊功能的特殊命令。cmdlet遵循“动词-名词”模式，例如：<code>set-childItem</code>。</p><p>Windows PowerShell运行时在命令行中提供的自动化脚本的上下文中调用这些命令。 它还通过Windows PowerShell应用程序编程接口API以编程方式调用它们。</p><h2 id="_1-cmdlet是什么" tabindex="-1"><a class="header-anchor" href="#_1-cmdlet是什么"><span>1. Cmdlet是什么？</span></a></h2><p>PowerShell中的<code>cmdlet</code>执行操作，并将Microsoft .NET Framework对象返回到管道中的下一个命令。 <code>Cmdlet</code>可以接收对象作为输入，也可以将结果输出为对象，这使其适合用作管道中的接收者。</p><p>如果编写<code>cmdlet</code>，则必须实现一个<code>cmdlet</code>类，该类派生自两个专门的<code>cmdlet</code>基类之一。 派生类必须：</p><ul><li>声明一个属性，该属性将派生类标识为<code>cmdlet</code>。</li><li>定义用属性标识的公共属性，这些属性将公共属性标识为<code>cmdlet</code>的参数。</li><li>要处理记录，它会覆盖一种或多种输入处理方法。</li><li>可以使用<code>Import-Module cmdlet</code>来直接加载包含该类的程序集，或者可以创建一个主机应用程序，该主机应用程序使用<code>System.Management.Automation.Runspaces.Initialsessionstate</code> API来加载该程序集。 两种方法都提供对<code>cmdlet</code>功能的编程访问和命令行访问。</li></ul><h2 id="_2-cmdlet术语" tabindex="-1"><a class="header-anchor" href="#_2-cmdlet术语"><span>2. Cmdlet术语</span></a></h2><p>Windows PowerShell cmdlet中经常使用的术语如下：</p><p><strong>Cmdlet属性</strong> Windows PowerShell定义了几个用于向cmdlet添加通用功能的属性。 它包括cmdlet属性，该属性将Microsoft .NET框架类标识为cmdlet类。</p><p><strong>Cmdlet参数</strong> 它提供了允许cmdlet访问输入的机制。参数可以直接从命令行接受输入，也可以接受通过管道传递给cmdlet的对象。</p><p><strong>参数集</strong> 在同一命令中使用一组参数来执行特定操作。 PowerShell中的cmdlet可以具有多个参数集，但是每个参数集必须至少具有一个唯一参数。</p><p>Windows PowerShell使用参数集允许编写一个cmdlet，该cmdlet可以针对不同的方案执行不同的操作。 参数集让我们可以根据参数向用户公开不同的参数； 它返回用户指定的不同信息。</p><p><strong>动态参数</strong> 动态参数会在运行时添加到cmdlet。 通常，当另一个参数的参数设置为特定值时，会将这些参数添加到cmdlet。</p><p><strong>输入处理方式</strong> 输入处理方法允许cmdlet执行输入处理，预处理和后处理的操作。 cmdlet用来处理其记录的那些方法将作为输入接收。 输入处理方法包括<code>System.Management.Automation.Cmdlet.EndProcessing</code>方法，<code>System.Management.Automation.Cmdlet.ProcessRecord</code>方法和<code>System.Management.Automation.Cmdlet.BeginProcessing</code>方法。</p><p><strong>事务</strong> 逻辑命令组被视为单个任务。 如果组中的任何命令失败，任务将自动失败。 用户可以选择拒绝或接受在事务中执行的操作。 Windows PowerShell版本2.0中引入了对事务的支持。</p><h2 id="_3-cmdlet与命令有什么区别" tabindex="-1"><a class="header-anchor" href="#_3-cmdlet与命令有什么区别"><span>3. Cmdlet与命令有什么区别？</span></a></h2><p>cmdlet在以下方面与其他命令Shell程序环境中的命令不同：</p><ul><li>通常，命令不支持其解析，输出格式或错误表示。 Windows PowerShell运行时处理这三种(解析，输出格式或错误表示)。</li><li>cmdlet从管道而不是从字符流处理输入对象，并且<code>cmdlet</code>将输出对象传递到管道。</li><li>Cmdlet一次处理一个对象，因此它们是面向记录的。</li><li>Cmdlet是.NET Framework类的实例，因此它们不是独立的可执行文件。</li></ul><p>PowerShell基本cmdlet命令如下表所示：</p><table><thead><tr><th>命令</th><th>描述(说明)</th></tr></thead><tbody><tr><td><code>Add-content</code></td><td>将内容添加到指定的文件。</td></tr><tr><td><code>Add-Computer</code></td><td>将本地计算机添加到域或工作组。</td></tr><tr><td><code>Add-History</code></td><td>用于在历史记录中添加命令。</td></tr><tr><td><code>Add-jobTrigger</code></td><td>将作业触发器添加到计划的作业中。</td></tr><tr><td><code>Add-member</code></td><td>将自定义方法或属性添加到PowerShell对象的实例。</td></tr><tr><td><code>Add-type</code></td><td>将Microsoft .NET框架类添加到Windows PowerShell会话中。</td></tr><tr><td><code>Clear-Content</code></td><td>删除文件的内容，但不删除该文件。</td></tr><tr><td><code>Clear-History</code></td><td>从命令历史记录中删除条目。</td></tr><tr><td><code>Clear-Item</code></td><td>清除项目或变量的值，但不清除该项目或变量。</td></tr><tr><td><code>Clear-ItemProperty</code></td><td>清除属性的值，但不删除该属性。</td></tr><tr><td><code>Clear-Variable</code></td><td>删除变量的值。</td></tr><tr><td><code>Clear-Host</code></td><td>清除宿主程序的显示。</td></tr><tr><td><code>Copy-ItemProperty</code></td><td>将值和属性从指定位置复制到另一个位置。</td></tr><tr><td><code>Copy-Item</code></td><td>将项目从一个位置复制到另一个位置。</td></tr><tr><td><code>Complete-Transaction</code></td><td>提交活动事务。</td></tr><tr><td><code>Compare-object</code></td><td>比较两组对象。</td></tr><tr><td><code>Disable-PSBreakpoint</code></td><td>禁用当前控制台中的断点。</td></tr><tr><td><code>Enable-PSBreakpoint</code></td><td>在当前控制台中启用断点。</td></tr><tr><td><code>Find-package</code></td><td>在可用的软件包源中查找软件包。</td></tr><tr><td><code>Find-script</code></td><td>用于查找脚本。</td></tr><tr><td><code>ForEach-Object</code></td><td>对输入对象集合中的每个项目执行操作。</td></tr><tr><td><code>Get-Alias</code></td><td>获取当前会话的别名。</td></tr><tr><td><code>Get-childItem</code></td><td>在一个或多个指定位置获取项目和子项目。</td></tr><tr><td><code>Get-Command</code></td><td>用于获取所有命令</td></tr><tr><td><code>Get-Content</code></td><td>在指定位置获取文件的内容。</td></tr><tr><td><code>Get-Date</code></td><td>用于获取当前日期和时间。</td></tr><tr><td><code>Get-ExecutionPolicy</code></td><td>获取当前会话的执行策略。</td></tr><tr><td><code>Get-Help</code></td><td>显示有关PowerShell命令和概念的信息。</td></tr><tr><td><code>Get-History</code></td><td>显示在当前会话期间输入的命令列表。</td></tr><tr><td><code>Get-host</code></td><td>获取代表当前宿主程序的对象。</td></tr><tr><td><code>Get-InstalledScript</code></td><td>获取为当前用户安装的脚本。</td></tr><tr><td><code>Get-Item</code></td><td>在特定位置获取项目或文件。</td></tr><tr><td><code>Get-ItemProperty</code></td><td>获取特定项目的属性。</td></tr><tr><td><code>Get-Location</code></td><td>显示当前的工作位置。</td></tr><tr><td><code>Get-PSBreakpoint</code></td><td>获取在当前会话中设置的断点。</td></tr><tr><td><code>Get-Package</code></td><td>通过使用程序包管理来显示所有已安装程序包的列表。</td></tr><tr><td><code>Get-Process</code></td><td>获取在本地或远程计算机上运行的进程。</td></tr><tr><td><code>Get-Service</code></td><td>在本地或远程计算机上获取服务。</td></tr><tr><td><code>Get-Transaction</code></td><td>获取当前活动的事务。</td></tr><tr><td><code>Get-Variable</code></td><td>在当前控制台中获取变量。</td></tr><tr><td><code>Install-package</code></td><td>用于安装一个或多个软件包。</td></tr><tr><td><code>Install-script</code></td><td>用于安装脚本。</td></tr><tr><td><code>Invoke-commands</code></td><td>在本地和远程计算机上执行命令。</td></tr><tr><td><code>Move-Item</code></td><td>用于将项目从一个位置移动到另一位置。</td></tr><tr><td><code>Move-ItemProperty</code></td><td>用于将项目的属性从一个位置移动到另一位置。</td></tr><tr><td><code>New-alias</code></td><td>创建一个新别名。</td></tr><tr><td><code>New-Item</code></td><td>创建一个新项目。</td></tr><tr><td><code>New-ItemProperty</code></td><td>为项目创建一个新属性并设置其值。</td></tr><tr><td><code>New-Service</code></td><td>创建一个新的Window服务。</td></tr><tr><td><code>New-variable</code></td><td>创建一个新变量。</td></tr><tr><td><code>Read-Host</code></td><td>从控制台读取一行输入。</td></tr><tr><td><code>Remove-computer</code></td><td>从其域中删除本地计算机。</td></tr><tr><td><code>Remove-Item</code></td><td>删除特定项目。</td></tr><tr><td><code>Remove-ItemProperty</code></td><td>从项目中删除属性及其值。</td></tr><tr><td><code>Remove-job</code></td><td>删除Windows PowerShell的后台作业。</td></tr><tr><td><code>Remove-PSBreakpoint</code></td><td>从当前控制台删除该断点。</td></tr><tr><td><code>Remove-variable</code></td><td>删除具有其值的变量。</td></tr><tr><td><code>Rename-computer</code></td><td>用于重命名计算机。</td></tr><tr><td><code>Restart-Service</code></td><td>停止并启动一项或多项服务。</td></tr><tr><td><code>Restart-computer</code></td><td>用于在本地和远程计算机上重新启动Windows操作系统。</td></tr><tr><td><code>Resume-job</code></td><td>用于重新启动挂起的作业。</td></tr><tr><td><code>Save-Help</code></td><td>它用于下载最新的帮助文件并将其保存到文件系统目录。</td></tr><tr><td><code>Save-packages</code></td><td>用于将软件包保存到本地计算机，而无需安装它们。</td></tr><tr><td><code>Save-Script</code></td><td>用于保存脚本。</td></tr><tr><td><code>Select-string</code></td><td>用于在字符串或文件中查找文本。</td></tr><tr><td><code>Send-MailMessage</code></td><td>用于发送电子邮件。</td></tr><tr><td><code>Set-Alias</code></td><td>在当前Windows PowerShell中创建或更改cmdlet的别名。</td></tr><tr><td><code>Set-content</code></td><td>将内容写入文件中。</td></tr><tr><td><code>Set-Date</code></td><td>更改系统时间。</td></tr><tr><td><code>Set-Item</code></td><td>将项目的值更改为命令中指定的值。</td></tr><tr><td><code>Set-ItemProperty</code></td><td>更改或创建项目属性的值。</td></tr><tr><td><code>Set-Location</code></td><td>用于将当前工作位置设置为特定位置。</td></tr><tr><td><code>Set-PSBreakpoint</code></td><td>在命令，行或变量上设置断点。</td></tr><tr><td><code>Set-ScheduledJob</code></td><td>更改计划的作业。</td></tr><tr><td><code>Set-Service</code></td><td>停止，启动和挂起服务，并更改其属性。</td></tr><tr><td><code>Set-variable</code></td><td>设置变量的值。</td></tr><tr><td><code>Show-command</code></td><td>在图形命令窗口中创建Windows PowerShell命令。</td></tr><tr><td><code>Sort-Object</code></td><td>按属性值对对象进行排序。</td></tr><tr><td><code>Start-Job</code></td><td>启动Windows PowerShell的后台作业。</td></tr><tr><td><code>Start-Process</code></td><td>在本地计算机上启动或启动更多进程。</td></tr><tr><td><code>Start-services</code></td><td>启动一个或多个已停止的服务。</td></tr><tr><td><code>Start-transaction</code></td><td>启动事务。</td></tr><tr><td><code>Stop-Computer</code></td><td>关闭本地和远程计算机。</td></tr><tr><td><code>Stop-Job</code></td><td>停止Windows PowerShell的后台作业。</td></tr><tr><td><code>Stop-Process</code></td><td>停止一个或多个进程。</td></tr><tr><td><code>Stop-Services</code></td><td>停止一个或多个正在运行的服务。</td></tr><tr><td><code>Suspend-jobs</code></td><td>暂时停止工作流程作业。</td></tr><tr><td><code>Suspend-Service</code></td><td>挂起或暂停一个或多个正在运行的服务。</td></tr><tr><td><code>Undo-transaction</code></td><td>回滚活动事务。</td></tr><tr><td><code>Uninstall-module</code></td><td>用于卸载模块。</td></tr><tr><td><code>Uninstall-Package</code></td><td>卸载一个或多个软件包。</td></tr><tr><td><code>Unregister-ScheduledJob</code></td><td>删除本地计算机上的计划作业</td></tr><tr><td><code>Update-Help</code></td><td>用于下载并在计算机上安装最新的帮助文件。</td></tr><tr><td><code>Write-Output</code></td><td>将特定对象沿管道发送到下一个命令。</td></tr></tbody></table><h2 id="cmd和powershell的对比" tabindex="-1"><a class="header-anchor" href="#cmd和powershell的对比"><span>cmd和powershell的对比</span></a></h2><table><thead><tr><th>作用</th><th>cmd命令</th><th>powershell命令</th></tr></thead><tbody><tr><td>打印字符</td><td>echo</td><td>Write-Output</td></tr><tr><td>进入路径</td><td>cd</td><td>Set-Location</td></tr><tr><td>获取指令路径</td><td>no</td><td>Get-Command</td></tr><tr><td>获取文件列表</td><td>ls</td><td>Get-ChildItem</td></tr></tbody></table>',23)]))}const n=d(c,[["render",l]]),i=JSON.parse('{"path":"/windows-tutor/powershell/basics/cmdlet.html","title":"cmdlet","lang":"zh-CN","frontmatter":{"description":"cmdlet cmdlet发音为:”command-lets”，它是在PowerShell环境中使用的轻量级命令。 这些是在PowerShell环境中实现特殊功能的特殊命令。cmdlet遵循“动词-名词”模式，例如：set-childItem。 Windows PowerShell运行时在命令行中提供的自动化脚本的上下文中调用这些命令。 它还通过Win...","head":[["meta",{"property":"og:url","content":"https://yzqdev.github.io/cs-guide/cs-guide/windows-tutor/powershell/basics/cmdlet.html"}],["meta",{"property":"og:site_name","content":"cs-guide"}],["meta",{"property":"og:title","content":"cmdlet"}],["meta",{"property":"og:description","content":"cmdlet cmdlet发音为:”command-lets”，它是在PowerShell环境中使用的轻量级命令。 这些是在PowerShell环境中实现特殊功能的特殊命令。cmdlet遵循“动词-名词”模式，例如：set-childItem。 Windows PowerShell运行时在命令行中提供的自动化脚本的上下文中调用这些命令。 它还通过Win..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2023-11-19T03:14:18.000Z"}],["meta",{"property":"article:modified_time","content":"2023-11-19T03:14:18.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"cmdlet\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2023-11-19T03:14:18.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"yzqdev\\",\\"url\\":\\"http://www.yzqdev.top\\"}]}"]]},"headers":[{"level":2,"title":"1. Cmdlet是什么？","slug":"_1-cmdlet是什么","link":"#_1-cmdlet是什么","children":[]},{"level":2,"title":"2. Cmdlet术语","slug":"_2-cmdlet术语","link":"#_2-cmdlet术语","children":[]},{"level":2,"title":"3. Cmdlet与命令有什么区别？","slug":"_3-cmdlet与命令有什么区别","link":"#_3-cmdlet与命令有什么区别","children":[]},{"level":2,"title":"cmd和powershell的对比","slug":"cmd和powershell的对比","link":"#cmd和powershell的对比","children":[]}],"git":{"createdTime":1652240878000,"updatedTime":1700363658000,"contributors":[{"name":"yzqdev","username":"yzqdev","email":"yzqdev@outlook.com","commits":3,"url":"https://github.com/yzqdev"}]},"readingTime":{"minutes":7.58,"words":2275},"filePathRelative":"windows-tutor/powershell/basics/cmdlet.md","localizedDate":"2022年5月11日","autoDesc":true}');export{n as comp,i as data};
