import{_ as a,c as n,a as e,o as p}from"./app-C8DxhDIZ.js";const l={};function t(i,s){return p(),n("div",null,s[0]||(s[0]=[e(`<h1 id="pm2使用教程" tabindex="-1"><a class="header-anchor" href="#pm2使用教程"><span>pm2使用教程</span></a></h1><h2 id="简介" tabindex="-1"><a class="header-anchor" href="#简介"><span>简介</span></a></h2><p>PM2 是 node 进程管理工具，可以利用它来简化很多 node应用管理的繁琐任务，如性能监控、自动重启、负载均衡等，而且使用非常简单。 <a href="https://pm2.keymetrics.io/docs/usage/quick-start/" target="_blank" rel="noopener noreferrer">文档</a></p><h2 id="安装" tabindex="-1"><a class="header-anchor" href="#安装"><span>安装</span></a></h2><div class="language-powershell" data-highlighter="prismjs" data-ext="powershell" data-title="powershell"><pre><code><span class="line">npm install <span class="token operator">-</span>g pm2</span>
<span class="line"></span></code></pre></div><h2 id="快速使用" tabindex="-1"><a class="header-anchor" href="#快速使用"><span>快速使用</span></a></h2><div class="language-powershell" data-highlighter="prismjs" data-ext="powershell" data-title="powershell"><pre><code><span class="line">pm2 <span class="token function">start</span> app<span class="token punctuation">.</span>js</span>
<span class="line"></span>
<span class="line">pm2 save</span>
<span class="line"></span></code></pre></div><h3 id="执行package-json的命令" tabindex="-1"><a class="header-anchor" href="#执行package-json的命令"><span>执行package.json的命令</span></a></h3><div class="language-powershell" data-highlighter="prismjs" data-ext="powershell" data-title="powershell"><pre><code><span class="line"></span>
<span class="line">pm2 <span class="token function">start</span> <span class="token string">&quot;npm run dev&quot;</span> <span class="token operator">--</span>name myAppName</span>
<span class="line"></span>
<span class="line">pm2 logs <span class="token string">&quot;myAppName&quot;</span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"></span>
<span class="line">pm2 <span class="token function">start</span>  npm <span class="token operator">--</span> run dev</span>
<span class="line"></span></code></pre></div><h2 id="常用命令" tabindex="-1"><a class="header-anchor" href="#常用命令"><span>常用命令</span></a></h2><h3 id="启动" tabindex="-1"><a class="header-anchor" href="#启动"><span>启动</span></a></h3><p>参数说明：</p><ul><li><code>--watch</code>：监听应用目录的变化，一旦发生变化，自动重启。如果要精确监听、不见听的目录，最好通过配置文件。</li><li><code>-i --instances</code>：启用多少个实例，可用于负载均衡。如果<code>-i 0</code>或者<code>-i max</code>，则根据当前机器核数确定实例数目。</li><li><code>--ignore-watch</code>：排除监听的目录/文件，可以是特定的文件名，也可以是正则。比如<code>--ignore-watch=&quot;test node_modules &quot;some scripts&quot;&quot;</code></li><li><code>-n --name</code>：应用的名称。查看应用信息的时候可以用到。</li><li><code>-o --output &lt;path&gt;</code>：标准输出日志文件的路径。</li><li><code>-e --error &lt;path&gt;</code>：错误输出日志文件的路径。</li><li><code>--interpreter &lt;interpreter&gt;</code>：the interpreter pm2 should use for executing app (bash, python...)。比如你用的coffee script来编写应用。</li></ul><h3 id="重启" tabindex="-1"><a class="header-anchor" href="#重启"><span>重启</span></a></h3><div class="language-powershell" data-highlighter="prismjs" data-ext="powershell" data-title="powershell"><pre><code><span class="line">pm2 restart app<span class="token punctuation">.</span>js</span>
<span class="line"></span></code></pre></div><h3 id="_3-3-停止" tabindex="-1"><a class="header-anchor" href="#_3-3-停止"><span>3.3 停止</span></a></h3><p>停止特定的应用。可以先通过<code>pm2 list</code>获取应用的名字（--name指定的）或者进程id。</p><div class="language-bash" data-highlighter="prismjs" data-ext="sh" data-title="sh"><pre><code><span class="line">pm2 stop app_name<span class="token operator">|</span>app_id</span>
<span class="line"></span></code></pre></div><p>如果要停止所有应用，可以</p><div class="language-bash" data-highlighter="prismjs" data-ext="sh" data-title="sh"><pre><code><span class="line">pm2 stop all</span>
<span class="line"></span></code></pre></div><h3 id="停止" tabindex="-1"><a class="header-anchor" href="#停止"><span>停止</span></a></h3><p>类似<code>pm2 stop</code>，如下</p><div class="language-bash" data-highlighter="prismjs" data-ext="sh" data-title="sh"><pre><code><span class="line">pm2 stop app_name<span class="token operator">|</span>app_id</span>
<span class="line">pm2 stop all</span>
<span class="line"></span></code></pre></div><h3 id="从进程列表删除进程" tabindex="-1"><a class="header-anchor" href="#从进程列表删除进程"><span>从进程列表删除进程</span></a></h3><div class="language-bash" data-highlighter="prismjs" data-ext="sh" data-title="sh"><pre><code><span class="line">// pm2 delete <span class="token punctuation">[</span>appname<span class="token punctuation">]</span> <span class="token operator">|</span> <span class="token function">id</span></span>
<span class="line">pm2 delete app  // 指定进程名删除</span>
<span class="line">pm2 delete <span class="token number">0</span>    // 指定进程id删除</span>
<span class="line"></span></code></pre></div><h3 id="删除进程列表中所有进程" tabindex="-1"><a class="header-anchor" href="#删除进程列表中所有进程"><span>删除进程列表中所有进程</span></a></h3><div class="language-bash" data-highlighter="prismjs" data-ext="sh" data-title="sh"><pre><code><span class="line">pm2 delete all</span>
<span class="line"></span></code></pre></div><h3 id="查看进程状态" tabindex="-1"><a class="header-anchor" href="#查看进程状态"><span>查看进程状态</span></a></h3><div class="language-bash" data-highlighter="prismjs" data-ext="sh" data-title="sh"><pre><code><span class="line">pm2 list</span>
<span class="line">// 或者</span>
<span class="line">pm2 <span class="token function">ls</span></span>
<span class="line"></span></code></pre></div><h3 id="查看某个进程的信息" tabindex="-1"><a class="header-anchor" href="#查看某个进程的信息"><span>查看某个进程的信息</span></a></h3><div class="language-bash" data-highlighter="prismjs" data-ext="sh" data-title="sh"><pre><code><span class="line">pm2 describe <span class="token number">0</span></span>
<span class="line"></span></code></pre></div><h3 id="负载均衡" tabindex="-1"><a class="header-anchor" href="#负载均衡"><span>负载均衡</span></a></h3><p>命令如下，表示开启三个进程。如果<code>-i 0</code>，则会根据机器当前核数自动开启尽可能多的进程。</p><div class="language-bash" data-highlighter="prismjs" data-ext="sh" data-title="sh"><pre><code><span class="line">pm2 start app.js <span class="token parameter variable">-i</span> <span class="token number">3</span> <span class="token comment"># 开启三个进程</span></span>
<span class="line">pm2 start app.js <span class="token parameter variable">-i</span> max <span class="token comment"># 根据机器CPU核数，开启对应数目的进程 </span></span>
<span class="line"></span></code></pre></div><h3 id="日志查看" tabindex="-1"><a class="header-anchor" href="#日志查看"><span>日志查看</span></a></h3><p>除了可以打开日志文件查看日志外，还可以通过<code>pm2 logs</code>来查看实时日志。这点对于线上问题排查非常重要。</p><p>比如某个 node 服务突然异常重启了，那么可以通过 pm2 提供的日志工具来查看实时日志，看是不是脚本出错之类导致的异常重启。</p><div class="language-bash" data-highlighter="prismjs" data-ext="sh" data-title="sh"><pre><code><span class="line">pm2 logs</span>
<span class="line"></span></code></pre></div><h3 id="开机自动启动" tabindex="-1"><a class="header-anchor" href="#开机自动启动"><span>开机自动启动</span></a></h3><p>可以通过<code>pm2 startup</code>来实现开机自启动。细节可<a href="https://links.jianshu.com/go?to=http%3A%2F%2Fpm2.keymetrics.io%2Fdocs%2Fusage%2Fstartup%2F" target="_blank" rel="noopener noreferrer">参考</a>。大致流程如下</p><ol><li>通过<code>pm2 save</code>保存当前进程状态。</li><li>通过<code>pm2 startup [platform]</code>生成开机自启动的命令。（记得查看控制台输出）</li><li>将步骤2生成的命令，粘贴到控制台进行，搞定。</li></ol><h3 id="监控-monitor-查看进程的资源消耗情况" tabindex="-1"><a class="header-anchor" href="#监控-monitor-查看进程的资源消耗情况"><span>监控(monitor)-查看进程的资源消耗情况</span></a></h3><p>运行如下命令，查看当前通过pm2运行的进程的状态。</p><div class="language-bash" data-highlighter="prismjs" data-ext="sh" data-title="sh"><pre><code><span class="line">pm2 monit</span>
<span class="line"></span></code></pre></div><h2 id="通过pm2配置文件来自动部署项目" tabindex="-1"><a class="header-anchor" href="#通过pm2配置文件来自动部署项目"><span>通过pm2配置文件来自动部署项目</span></a></h2><h3 id="使用自带的命令生成" tabindex="-1"><a class="header-anchor" href="#使用自带的命令生成"><span>使用自带的命令生成</span></a></h3><div class="language-bash" data-highlighter="prismjs" data-ext="sh" data-title="sh"><pre><code><span class="line">pm2 init simple</span>
<span class="line"><span class="token comment">#或者</span></span>
<span class="line">pm2 ecosystem</span>
<span class="line"></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"></span></code></pre></div><p>然后会生成一个ecosystem.config.js文件，里面有默认配置。运行nodejs项目需要像下面一样配置</p><div class="language-javascript" data-highlighter="prismjs" data-ext="js" data-title="js"><pre><code><span class="line"></span>
<span class="line">module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token literal-property property">apps</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token punctuation">{</span></span>
<span class="line">    <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">&#39;nest-mock&#39;</span><span class="token punctuation">,</span></span>
<span class="line">    <span class="token literal-property property">script</span><span class="token operator">:</span> <span class="token string">&#39;./node_modules/@nestjs/cli/bin/nest.js&#39;</span><span class="token punctuation">,</span></span>
<span class="line">    <span class="token literal-property property">args</span><span class="token operator">:</span> <span class="token string">&#39; start --watch&#39;</span><span class="token punctuation">,</span></span>
<span class="line">    <span class="token literal-property property">watch</span><span class="token operator">:</span> <span class="token string">&#39;.&#39;</span><span class="token punctuation">,</span></span>
<span class="line">    <span class="token literal-property property">error_file</span><span class="token operator">:</span> <span class="token string">&quot;./log/err.log&quot;</span><span class="token punctuation">,</span></span>
<span class="line">    <span class="token literal-property property">out_file</span><span class="token operator">:</span> <span class="token string">&quot;./log/out.log&quot;</span><span class="token punctuation">,</span></span>
<span class="line">  <span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token punctuation">]</span><span class="token punctuation">,</span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"><span class="token punctuation">}</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre></div><p>然后<code>pm2 start .\\ecosystem.config.js</code>即可</p><div class="language-bash line-numbers-mode" data-highlighter="prismjs" data-ext="sh" data-title="sh"><pre><code><span class="line"></span>
<span class="line"><span class="token comment"># Start all applications</span></span>
<span class="line">pm2 start ecosystem.config.js</span>
<span class="line"></span>
<span class="line"><span class="token comment"># Stop all</span></span>
<span class="line">pm2 stop ecosystem.config.js</span>
<span class="line"></span>
<span class="line"><span class="token comment"># Restart all</span></span>
<span class="line">pm2 restart ecosystem.config.js</span>
<span class="line"></span>
<span class="line"><span class="token comment"># Reload all</span></span>
<span class="line">pm2 reload ecosystem.config.js</span>
<span class="line"></span>
<span class="line"><span class="token comment"># Delete all</span></span>
<span class="line">pm2 delete ecosystem.config.js</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="在项目根目录下新建一个-deploy-yaml-文件" tabindex="-1"><a class="header-anchor" href="#在项目根目录下新建一个-deploy-yaml-文件"><span>在项目根目录下新建一个 deploy.yaml 文件</span></a></h3><div class="language-csharp line-numbers-mode" data-highlighter="prismjs" data-ext="cs" data-title="cs"><pre><code><span class="line"><span class="token preprocessor property"># deploy.yaml</span></span>
<span class="line">apps<span class="token punctuation">:</span></span>
<span class="line">  <span class="token operator">-</span> script<span class="token punctuation">:</span> <span class="token punctuation">.</span><span class="token operator">/</span>start<span class="token punctuation">.</span>js       # 入口文件</span>
<span class="line">    name<span class="token punctuation">:</span> &#39;app&#39;              # 程序名称</span>
<span class="line">    env<span class="token punctuation">:</span>                     # 环境变量</span>
<span class="line">      COMMON_VARIABLE<span class="token punctuation">:</span> <span class="token class-name">true</span></span>
<span class="line">    env_production<span class="token punctuation">:</span></span>
<span class="line">      NODE_ENV<span class="token punctuation">:</span> <span class="token class-name">production</span></span>
<span class="line"></span>
<span class="line">deploy<span class="token punctuation">:</span>                     # 部署脚本</span>
<span class="line">  production<span class="token punctuation">:</span>               # 生产环境</span>
<span class="line">    user<span class="token punctuation">:</span> lentoo            # 服务器的用户名</span>
<span class="line">    host<span class="token punctuation">:</span> <span class="token number">192.168</span><span class="token number">.2</span><span class="token number">.166</span>     # 服务器的ip地址</span>
<span class="line">    port<span class="token punctuation">:</span> <span class="token number">22</span>                # ssh端口</span>
<span class="line">    <span class="token keyword">ref</span><span class="token punctuation">:</span> origin<span class="token operator">/</span>master      # 要拉取的git分支</span>
<span class="line">    ssh_options<span class="token punctuation">:</span> StrictHostKeyChecking<span class="token operator">=</span>no # SSH 公钥检查</span>
<span class="line">    repo<span class="token punctuation">:</span> https<span class="token punctuation">:</span><span class="token operator">/</span><span class="token operator">/</span>github<span class="token punctuation">.</span>com<span class="token comment">/**.git # 远程仓库地址</span>
<span class="line">    path: /home              # 拉取到服务器某个目录下</span>
<span class="line">    pre-deploy: git fetch --all # 部署前执行</span>
<span class="line">    post-deploy: npm install &amp;&amp;  pm2 reload deploy.yaml --env production # 部署后执行</span>
<span class="line">    env:</span>
<span class="line">      NODE_ENV: production</span>
<span class="line"></span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="配置git的ssh免密认证" tabindex="-1"><a class="header-anchor" href="#配置git的ssh免密认证"><span>配置git的ssh免密认证</span></a></h3><ol><li>在服务器中生成rsa公钥和私钥，当前是 <strong>centos7</strong> 下进行</li><li>前提服务器要安装git，没有安装的先安装git，已安装的跳过</li></ol><div class="language-bash" data-highlighter="prismjs" data-ext="sh" data-title="sh"><pre><code><span class="line">yum –y <span class="token function">install</span> <span class="token function">git</span></span>
<span class="line"></span></code></pre></div><ol><li>生成秘钥</li></ol><div class="language-powershell" data-highlighter="prismjs" data-ext="powershell" data-title="powershell"><pre><code><span class="line">ssh-keygen <span class="token operator">-</span>t rsa <span class="token operator">-</span>C <span class="token string">&quot;xxx@xxx.com&quot;</span></span>
<span class="line"></span></code></pre></div><p>在~/.ssh目录下有 id_rsa和 id_rsa.pub两个文件，其中id_rsa.pub文件里存放的即是公钥key。</p><ol><li>登录到GitHub，点击右上方的头像，选择settings ，点击Add SSH key，把id_rsa.pub的内容复制到里面即可。</li></ol><p><img src="https:////upload-images.jianshu.io/upload_images/12842279-3e7086bd55d5a008.png?imageMogr2/auto-orient/strip|imageView2/2/w/1200/format/webp" alt="img"></p><p>图片.png</p><h3 id="使用pm2部署项目" tabindex="-1"><a class="header-anchor" href="#使用pm2部署项目"><span>使用pm2部署项目</span></a></h3><div class="hint-container tip"><p class="hint-container-title">提示</p><p>一般监控 node 有几种方案：</p><p>supervisor: 一般用作开发环境的使用； forever: 管理多个站点，一般每个站点的访问量不大的情况，不需要监控； PM2: 网站的访问量比较大，需要完整的监控页面。</p></div><p>每次部署前先将本地的代码提交到远程git仓库</p><ul><li>首次部署</li></ul><div class="language-powershell" data-highlighter="prismjs" data-ext="powershell" data-title="powershell"><pre><code><span class="line">pm2 deploy deploy<span class="token punctuation">.</span>yaml production setup </span>
<span class="line"></span></code></pre></div><p>部署完成后，既可登陆服务器查看配置的目录下是否从git上拉取了项目</p><ul><li>再次部署</li></ul><div class="language-powershell" data-highlighter="prismjs" data-ext="powershell" data-title="powershell"><pre><code><span class="line">pm2 deploy deploy<span class="token punctuation">.</span>yaml production upddate</span>
<span class="line"></span></code></pre></div><h3 id="该部署流程同样适用前端项目" tabindex="-1"><a class="header-anchor" href="#该部署流程同样适用前端项目"><span>该部署流程同样适用前端项目</span></a></h3><p>如vue-cli的项目，自动部署到服务器，自动执行<code>npm run build</code> 命令，生成的dist目录，指定到nginx的静态文件目录下。 由于 PM2 通常都用于 node 应用, 所以 exec_mode 应写为 fork, 其中最重要的是 args, -jar 和 jar 包所在的位置应该注明, 如果需要提供其他参数, 也要在 args 中一并注明.</p><p>假设创建如下所示的 fz.json, 使用命令 <code>pm2 start fz.json</code> 即可运行 fz.jar. 使用命令 tail -f /home/imzhizi/log/fz-out.log 还可以查看运行日志.</p><div class="language-text line-numbers-mode" data-highlighter="prismjs" data-ext="text" data-title="text"><pre><code><span class="line">name:应用程序名称</span>
<span class="line">args:脚本的参数域</span>
<span class="line">cwd:应用程序所在的目录</span>
<span class="line">script:应用程序的脚本路径</span>
<span class="line">log_date_format:</span>
<span class="line">node_args:node 的参数域</span>
<span class="line">error_file:自定义应用程序的错误日志文件</span>
<span class="line">out_file:自定义应用程序日志文件</span>
<span class="line">pid_file:自定义应用程序的pid文件</span>
<span class="line">instances:</span>
<span class="line">min_uptime:最小运行时间，这里设置的是60s即如果应用程序在60s内退出，pm2会认为程序异常退出，此时触发重启max_restarts设置数量</span>
<span class="line">max_restarts:设置应用程序异常退出重启的次数，默认15次（从0开始计数）</span>
<span class="line">cron_restart:定时启动，解决重启能解决的问题</span>
<span class="line">watch:是否启用监控模式，默认是false。如果设置成true，当应用程序变动时，  pm2会自动重载。这里也可以设置你要监控的文件。</span>
<span class="line">merge_logs:</span>
<span class="line">exec_interpreter:应用程序的脚本类型，这里使用的shell，默认是nodejs</span>
<span class="line">exec_mode:应用程序启动模式，这里设置的是cluster_mode（集群），默认是fork</span>
<span class="line">autorestart:启用/禁用应用程序崩溃或退出时自动重启</span>
<span class="line">vizion:启用/禁用vizion特性(版本控制)</span>
<span class="line"> </span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-json" data-highlighter="prismjs" data-ext="json" data-title="json"><pre><code><span class="line"><span class="token punctuation">{</span></span>
<span class="line">  <span class="token property">&quot;name&quot;</span><span class="token operator">:</span> <span class="token string">&quot;zfile&quot;</span><span class="token punctuation">,</span></span>
<span class="line">    <span class="token property">&quot;script&quot;</span><span class="token operator">:</span> <span class="token string">&quot;java&quot;</span><span class="token punctuation">,</span></span>
<span class="line">    <span class="token property">&quot;args&quot;</span><span class="token operator">:</span> <span class="token punctuation">[</span></span>
<span class="line">        <span class="token string">&quot;-jar&quot;</span><span class="token punctuation">,</span></span>
<span class="line">        <span class="token string">&quot;zfile-3.2.war&quot;</span></span>
<span class="line">    <span class="token punctuation">]</span><span class="token punctuation">,</span></span>
<span class="line">   <span class="token property">&quot;error_file&quot;</span><span class="token operator">:</span><span class="token string">&quot;./log/err.log&quot;</span><span class="token punctuation">,</span></span>
<span class="line">    <span class="token property">&quot;out_file&quot;</span><span class="token operator">:</span><span class="token string">&quot;./log/out.log&quot;</span><span class="token punctuation">,</span></span>
<span class="line">    <span class="token property">&quot;exec_interpreter&quot;</span><span class="token operator">:</span> <span class="token string">&quot;&quot;</span><span class="token punctuation">,</span></span>
<span class="line">    <span class="token property">&quot;exec_mode&quot;</span><span class="token operator">:</span> <span class="token string">&quot;fork&quot;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre></div><p>几点经验:</p><p>通过 json 启动之后, 就可以直接使用 json 文件中的名称来对项目进行控制, 如<code>pm2 stop name</code>; 每次重新打包之后, 使用 <code>pm2 restart name</code>就可以更新项目; 如果修改了 json 文件, 就无法通过 restart 更新项目了, 必须要先 <code>pm2 del name</code>然后再重新 <code>pm2 start xx.json</code>.</p>`,77)]))}const c=a(l,[["render",t]]),r=JSON.parse('{"path":"/frontend/package-manager/pm2.html","title":"pm2使用教程","lang":"zh-CN","frontmatter":{"description":"pm2使用教程 简介 PM2 是 node 进程管理工具，可以利用它来简化很多 node应用管理的繁琐任务，如性能监控、自动重启、负载均衡等，而且使用非常简单。 文档 安装 快速使用 执行package.json的命令 常用命令 启动 参数说明： --watch：监听应用目录的变化，一旦发生变化，自动重启。如果要精确监听、不见听的目录，最好通过配置文件...","head":[["meta",{"property":"og:url","content":"https://yzqdev.github.io/cs-guide/cs-guide/frontend/package-manager/pm2.html"}],["meta",{"property":"og:site_name","content":"cs-guide"}],["meta",{"property":"og:title","content":"pm2使用教程"}],["meta",{"property":"og:description","content":"pm2使用教程 简介 PM2 是 node 进程管理工具，可以利用它来简化很多 node应用管理的繁琐任务，如性能监控、自动重启、负载均衡等，而且使用非常简单。 文档 安装 快速使用 执行package.json的命令 常用命令 启动 参数说明： --watch：监听应用目录的变化，一旦发生变化，自动重启。如果要精确监听、不见听的目录，最好通过配置文件..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:image","content":"https:////upload-images.jianshu.io/upload_images/12842279-3e7086bd55d5a008.png?imageMogr2/auto-orient/strip|imageView2/2/w/1200/format/webp"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-06-11T09:37:51.000Z"}],["meta",{"property":"article:modified_time","content":"2024-06-11T09:37:51.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"pm2使用教程\\",\\"image\\":[\\"https:////upload-images.jianshu.io/upload_images/12842279-3e7086bd55d5a008.png?imageMogr2/auto-orient/strip|imageView2/2/w/1200/format/webp\\"],\\"dateModified\\":\\"2024-06-11T09:37:51.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"yzqdev\\",\\"url\\":\\"http://www.yzqdev.top\\"}]}"]]},"headers":[{"level":2,"title":"简介","slug":"简介","link":"#简介","children":[]},{"level":2,"title":"安装","slug":"安装","link":"#安装","children":[]},{"level":2,"title":"快速使用","slug":"快速使用","link":"#快速使用","children":[{"level":3,"title":"执行package.json的命令","slug":"执行package-json的命令","link":"#执行package-json的命令","children":[]}]},{"level":2,"title":"常用命令","slug":"常用命令","link":"#常用命令","children":[{"level":3,"title":"启动","slug":"启动","link":"#启动","children":[]},{"level":3,"title":"重启","slug":"重启","link":"#重启","children":[]},{"level":3,"title":"3.3 停止","slug":"_3-3-停止","link":"#_3-3-停止","children":[]},{"level":3,"title":"停止","slug":"停止","link":"#停止","children":[]},{"level":3,"title":"从进程列表删除进程","slug":"从进程列表删除进程","link":"#从进程列表删除进程","children":[]},{"level":3,"title":"删除进程列表中所有进程","slug":"删除进程列表中所有进程","link":"#删除进程列表中所有进程","children":[]},{"level":3,"title":"查看进程状态","slug":"查看进程状态","link":"#查看进程状态","children":[]},{"level":3,"title":"查看某个进程的信息","slug":"查看某个进程的信息","link":"#查看某个进程的信息","children":[]},{"level":3,"title":"负载均衡","slug":"负载均衡","link":"#负载均衡","children":[]},{"level":3,"title":"日志查看","slug":"日志查看","link":"#日志查看","children":[]},{"level":3,"title":"开机自动启动","slug":"开机自动启动","link":"#开机自动启动","children":[]},{"level":3,"title":"监控(monitor)-查看进程的资源消耗情况","slug":"监控-monitor-查看进程的资源消耗情况","link":"#监控-monitor-查看进程的资源消耗情况","children":[]}]},{"level":2,"title":"通过pm2配置文件来自动部署项目","slug":"通过pm2配置文件来自动部署项目","link":"#通过pm2配置文件来自动部署项目","children":[{"level":3,"title":"使用自带的命令生成","slug":"使用自带的命令生成","link":"#使用自带的命令生成","children":[]},{"level":3,"title":"在项目根目录下新建一个 deploy.yaml 文件","slug":"在项目根目录下新建一个-deploy-yaml-文件","link":"#在项目根目录下新建一个-deploy-yaml-文件","children":[]},{"level":3,"title":"配置git的ssh免密认证","slug":"配置git的ssh免密认证","link":"#配置git的ssh免密认证","children":[]},{"level":3,"title":"使用pm2部署项目","slug":"使用pm2部署项目","link":"#使用pm2部署项目","children":[]},{"level":3,"title":"该部署流程同样适用前端项目","slug":"该部署流程同样适用前端项目","link":"#该部署流程同样适用前端项目","children":[]}]}],"git":{"createdTime":1651499190000,"updatedTime":1718098671000,"contributors":[{"name":"yzqdev","username":"yzqdev","email":"yzqdev@outlook.com","commits":8,"url":"https://github.com/yzqdev"}]},"readingTime":{"minutes":6.21,"words":1863},"filePathRelative":"frontend/package-manager/pm2.md","localizedDate":"2022年5月2日","autoDesc":true}');export{c as comp,r as data};
