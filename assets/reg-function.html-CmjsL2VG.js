import{_ as n,c as a,a as e,o as t}from"./app-C8DxhDIZ.js";const p={};function c(o,s){return t(),a("div",null,s[0]||(s[0]=[e(`<h1 id="regex函数" tabindex="-1"><a class="header-anchor" href="#regex函数"><span>regex函数</span></a></h1><h2 id="reg-test" tabindex="-1"><a class="header-anchor" href="#reg-test"><span>reg.test</span></a></h2><div class="language-javascript" data-highlighter="prismjs" data-ext="js" data-title="js"><pre><code><span class="line"><span class="token keyword">let</span> r <span class="token operator">=</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex"><span class="token char-set class-name">\\d</span><span class="token quantifier number">{3}</span></span><span class="token regex-delimiter">/</span></span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">let</span> a <span class="token operator">=</span> <span class="token string">&#39;123&#39;</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">let</span> b <span class="token operator">=</span> <span class="token string">&#39;123ABC&#39;</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">let</span> c <span class="token operator">=</span> <span class="token string">&#39;abc&#39;</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">r<span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span>  <span class="token comment">//true</span></span>
<span class="line">r<span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span> <span class="token comment">//true</span></span>
<span class="line">r<span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span> <span class="token comment">//false</span></span>
<span class="line"></span></code></pre></div><h2 id="str-match" tabindex="-1"><a class="header-anchor" href="#str-match"><span>str.match</span></a></h2><div class="language-javascript" data-highlighter="prismjs" data-ext="js" data-title="js"><pre><code><span class="line"><span class="token keyword">let</span> r <span class="token operator">=</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">compus</span><span class="token regex-delimiter">/</span></span></span>
<span class="line"><span class="token keyword">let</span> reg <span class="token operator">=</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">w<span class="token quantifier number">+</span></span><span class="token regex-delimiter">/</span></span></span>
<span class="line"><span class="token keyword">let</span> s <span class="token operator">=</span> <span class="token string">&quot;compus, I know something about you&quot;</span></span>
<span class="line">r<span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span>  <span class="token comment">//true</span></span>
<span class="line">s<span class="token punctuation">.</span><span class="token function">match</span><span class="token punctuation">(</span>r<span class="token punctuation">)</span>  <span class="token comment">//[&quot;compus&quot;]</span></span>
<span class="line">s<span class="token punctuation">.</span><span class="token function">match</span><span class="token punctuation">(</span>reg<span class="token punctuation">)</span> <span class="token comment">//[&quot;compus&quot;]</span></span>
<span class="line"></span></code></pre></div><h2 id="reg-exec" tabindex="-1"><a class="header-anchor" href="#reg-exec"><span>reg.exec</span></a></h2><p><code>reg.exec()</code>每次调用，返回一个匹配的结果，匹配结果和分组以数组的形式返回，不断的调用即可返回下一个结果，直到返回</p><div class="language-javascript" data-highlighter="prismjs" data-ext="js" data-title="js"><pre><code><span class="line"><span class="token keyword">let</span> str <span class="token operator">=</span> <span class="token string">&quot;Here is a Phone Number 111-2313 and 133-2311&quot;</span> <span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">let</span> srg <span class="token operator">=</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex"><span class="token group punctuation">(</span><span class="token char-set class-name">\\d</span><span class="token quantifier number">{3}</span><span class="token group punctuation">)</span><span class="token char-class"><span class="token char-class-punctuation punctuation">[</span>-.<span class="token char-class-punctuation punctuation">]</span></span><span class="token char-set class-name">\\d</span><span class="token quantifier number">{4}</span></span><span class="token regex-delimiter">/</span><span class="token regex-flags">g</span></span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">let</span> result <span class="token operator">=</span> srg<span class="token punctuation">.</span><span class="token function">exec</span><span class="token punctuation">(</span>str<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">while</span><span class="token punctuation">(</span>result <span class="token operator">!==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    result <span class="token operator">=</span> srg<span class="token punctuation">.</span><span class="token function">exec</span><span class="token punctuation">(</span>str<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre></div><h2 id="str-replace" tabindex="-1"><a class="header-anchor" href="#str-replace"><span>str.replace()</span></a></h2><div class="language-javascript" data-highlighter="prismjs" data-ext="js" data-title="js"><pre><code><span class="line"><span class="token keyword">var</span> s <span class="token operator">=</span> <span class="token string">&quot;Hello,My name is Vincent. What is your name?&quot;</span></span>
<span class="line"><span class="token keyword">var</span> newStr <span class="token operator">=</span> s<span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span><span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex"><span class="token anchor function">\\b</span><span class="token char-set class-name">\\w</span><span class="token quantifier number">{4}</span><span class="token anchor function">\\b</span></span><span class="token regex-delimiter">/</span><span class="token regex-flags">g</span></span><span class="token punctuation">,</span>replacer<span class="token punctuation">)</span></span>
<span class="line">console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>newStr<span class="token punctuation">)</span></span>
<span class="line"><span class="token keyword">function</span> <span class="token function">replacer</span><span class="token punctuation">(</span><span class="token parameter">match</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>match<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token keyword">return</span> match<span class="token punctuation">.</span><span class="token function">toUpperCase</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span> </span>
<span class="line"></span></code></pre></div>`,10)]))}const r=n(p,[["render",c]]),i=JSON.parse('{"path":"/frontend/basic-js/regex/reg-function.html","title":"regex函数","lang":"zh-CN","frontmatter":{"description":"regex函数 reg.test str.match reg.exec reg.exec()每次调用，返回一个匹配的结果，匹配结果和分组以数组的形式返回，不断的调用即可返回下一个结果，直到返回 str.replace()","head":[["meta",{"property":"og:url","content":"https://yzqdev.github.io/cs-guide/cs-guide/frontend/basic-js/regex/reg-function.html"}],["meta",{"property":"og:site_name","content":"cs-guide"}],["meta",{"property":"og:title","content":"regex函数"}],["meta",{"property":"og:description","content":"regex函数 reg.test str.match reg.exec reg.exec()每次调用，返回一个匹配的结果，匹配结果和分组以数组的形式返回，不断的调用即可返回下一个结果，直到返回 str.replace()"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2022-08-01T04:28:17.000Z"}],["meta",{"property":"article:modified_time","content":"2022-08-01T04:28:17.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"regex函数\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2022-08-01T04:28:17.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"yzqdev\\",\\"url\\":\\"http://www.yzqdev.top\\"}]}"]]},"headers":[{"level":2,"title":"reg.test","slug":"reg-test","link":"#reg-test","children":[]},{"level":2,"title":"str.match","slug":"str-match","link":"#str-match","children":[]},{"level":2,"title":"reg.exec","slug":"reg-exec","link":"#reg-exec","children":[]},{"level":2,"title":"str.replace()","slug":"str-replace","link":"#str-replace","children":[]}],"git":{"createdTime":1659328097000,"updatedTime":1659328097000,"contributors":[{"name":"yzqdev","username":"yzqdev","email":"yzqdev@outlook.com","commits":1,"url":"https://github.com/yzqdev"}]},"readingTime":{"minutes":0.57,"words":170},"filePathRelative":"frontend/basic-js/regex/reg-function.md","localizedDate":"2022年8月1日","autoDesc":true}');export{r as comp,i as data};
