import{_ as s,c as a,a as p,o as t}from"./app-C8DxhDIZ.js";const e={};function o(c,n){return t(),a("div",null,n[0]||(n[0]=[p(`<h1 id="es9到es12" tabindex="-1"><a class="header-anchor" href="#es9到es12"><span>ES9到ES12</span></a></h1><ul><li>行分隔符（U + 2028）和段分隔符（U + 2029）符号现在允许在字符串文字中，与JSON匹配</li><li>更加友好的 JSON.stringify</li><li>新增了Array的<code>flat()</code>方法和<code>flatMap()</code>方法</li><li>新增了String的<code>trimStart()</code>方法和<code>trimEnd()</code>方法</li><li><code>Object.fromEntries()</code></li><li><code>Symbol.prototype.description</code></li><li><code>String.prototype.matchAll</code></li><li><code>Function.prototype.toString()</code>现在返回精确字符，包括空格和注释</li><li>简化<code>try {} catch {}</code>,修改 <code>catch</code> 绑定</li><li>新的基本数据类型<code>BigInt</code></li><li>globalThis</li><li>import()</li><li>Legacy RegEx</li><li>私有的实例方法和访问器</li></ul><h2 id="_1-行分隔符-u-2028-和段分隔符-u-2029-符号现在允许在字符串文字中-与json匹配" tabindex="-1"><a class="header-anchor" href="#_1-行分隔符-u-2028-和段分隔符-u-2029-符号现在允许在字符串文字中-与json匹配"><span>1.行分隔符（U + 2028）和段分隔符（U + 2029）符号现在允许在字符串文字中，与JSON匹配</span></a></h2><p>以前，这些符号在字符串文字中被视为行终止符，因此使用它们会导致SyntaxError异常。</p><h2 id="_2-更加友好的-json-stringify" tabindex="-1"><a class="header-anchor" href="#_2-更加友好的-json-stringify"><span>2.更加友好的 JSON.stringify</span></a></h2><p>如果输入 Unicode 格式但是超出范围的字符，在原先JSON.stringify返回格式错误的Unicode字符串。现在实现了一个改变JSON.stringify的<a href="https://github.com/tc39/proposal-well-formed-stringify" target="_blank" rel="noopener noreferrer">第3阶段提案</a>，因此它为其输出转义序列，使其成为有效Unicode（并以UTF-8表示）</p><h2 id="_3-新增了array的flat-方法和flatmap-方法" tabindex="-1"><a class="header-anchor" href="#_3-新增了array的flat-方法和flatmap-方法"><span>3.新增了Array的<code>flat()</code>方法和<code>flatMap()</code>方法</span></a></h2><p><code>flat()</code>和<code>flatMap()</code>本质上就是是归纳（reduce） 与 合并（concat）的操作。</p><h3 id="array-prototype-flat" tabindex="-1"><a class="header-anchor" href="#array-prototype-flat"><span>Array.prototype.flat()</span></a></h3><p><code>flat()</code> 方法会按照一个可指定的深度递归遍历数组，并将所有元素与遍历到的子数组中的元素合并为一个新数组返回。</p><ul><li><code>flat()</code>方法最基本的作用就是数组降维</li></ul><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js" data-title="js"><pre><code><span class="line"><span class="token keyword">let</span> arr1 <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">;</span></span>
<span class="line">arr1<span class="token punctuation">.</span><span class="token function">flat</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> </span>
<span class="line"><span class="token comment">// [1, 2, 3, 4]</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">let</span> arr2 <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">;</span></span>
<span class="line">arr2<span class="token punctuation">.</span><span class="token function">flat</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token comment">// [1, 2, 3, 4, [5, 6]]</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">let</span> arr3 <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">;</span></span>
<span class="line">arr3<span class="token punctuation">.</span><span class="token function">flat</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token comment">// [1, 2, 3, 4, 5, 6]</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">//使用 Infinity 作为深度，展开任意深度的嵌套数组</span></span>
<span class="line">arr3<span class="token punctuation">.</span><span class="token function">flat</span><span class="token punctuation">(</span><span class="token number">Infinity</span><span class="token punctuation">)</span><span class="token punctuation">;</span> </span>
<span class="line"><span class="token comment">// [1, 2, 3, 4, 5, 6]</span></span>
<span class="line"></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>其次，还可以利用<code>flat()</code>方法的特性来去除数组的空项</li></ul><div class="language-javascript" data-highlighter="prismjs" data-ext="js" data-title="js"><pre><code><span class="line"><span class="token keyword">let</span> arr4 <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">;</span></span>
<span class="line">arr4<span class="token punctuation">.</span><span class="token function">flat</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token comment">// [1, 2, 4, 5]</span></span>
<span class="line"></span>
<span class="line"></span></code></pre></div><h3 id="array-prototype-flatmap" tabindex="-1"><a class="header-anchor" href="#array-prototype-flatmap"><span>Array.prototype.flatMap()</span></a></h3><p><code>flatMap()</code> 方法首先使用映射函数映射每个元素，然后将结果压缩成一个新数组。它与 map 和 深度值1的 flat 几乎相同，但 flatMap 通常在合并成一种方法的效率稍微高一些。 这里我们拿map方法与flatMap方法做一个比较。</p><div class="language-javascript" data-highlighter="prismjs" data-ext="js" data-title="js"><pre><code><span class="line"><span class="token keyword">let</span> arr1 <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">arr1<span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token parameter">x</span> <span class="token operator">=&gt;</span> <span class="token punctuation">[</span>x <span class="token operator">*</span> <span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span> </span>
<span class="line"><span class="token comment">// [[2], [4], [6], [8]]</span></span>
<span class="line"></span>
<span class="line">arr1<span class="token punctuation">.</span><span class="token function">flatMap</span><span class="token punctuation">(</span><span class="token parameter">x</span> <span class="token operator">=&gt;</span> <span class="token punctuation">[</span>x <span class="token operator">*</span> <span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token comment">// [2, 4, 6, 8]</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">// 只会将 flatMap 中的函数返回的数组 “压平” 一层</span></span>
<span class="line">arr1<span class="token punctuation">.</span><span class="token function">flatMap</span><span class="token punctuation">(</span><span class="token parameter">x</span> <span class="token operator">=&gt;</span> <span class="token punctuation">[</span><span class="token punctuation">[</span>x <span class="token operator">*</span> <span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token comment">// [[2], [4], [6], [8]]</span></span>
<span class="line"></span>
<span class="line"></span></code></pre></div><h2 id="_4-新增了string的trimstart-方法和trimend-方法" tabindex="-1"><a class="header-anchor" href="#_4-新增了string的trimstart-方法和trimend-方法"><span>4.新增了String的<code>trimStart()</code>方法和<code>trimEnd()</code>方法</span></a></h2><p>新增的这两个方法很好理解，分别去除字符串首尾空白字符，这里就不用例子说声明了。</p><h2 id="_5-object-fromentries" tabindex="-1"><a class="header-anchor" href="#_5-object-fromentries"><span>5.<code>Object.fromEntries()</code></span></a></h2><p><code>Object.entries()</code>方法的作用是返回一个给定对象自身可枚举属性的键值对数组，其排列与使用 for...in 循环遍历该对象时返回的顺序一致（区别在于 for-in 循环也枚举原型链中的属性）。</p><p><strong>而<code>Object.fromEntries()</code> 则是 <code>Object.entries()</code> 的反转。</strong></p><p><code>Object.fromEntries()</code> 函数传入一个键值对的列表，并返回一个带有这些键值对的新对象。这个迭代参数应该是一个能够实现@iterator方法的的对象，返回一个迭代器对象。它生成一个具有两个元素的类似数组的对象，第一个元素是将用作属性键的值，第二个元素是与该属性键关联的值。</p><ul><li>通过 Object.fromEntries， 可以将 Map 转化为 Object:</li></ul><div class="language-javascript" data-highlighter="prismjs" data-ext="js" data-title="js"><pre><code><span class="line"><span class="token keyword">const</span> map <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Map</span><span class="token punctuation">(</span><span class="token punctuation">[</span> <span class="token punctuation">[</span><span class="token string">&#39;foo&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;bar&#39;</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token string">&#39;baz&#39;</span><span class="token punctuation">,</span> <span class="token number">42</span><span class="token punctuation">]</span> <span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">const</span> obj <span class="token operator">=</span> Object<span class="token punctuation">.</span><span class="token function">fromEntries</span><span class="token punctuation">(</span>map<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// { foo: &quot;bar&quot;, baz: 42 }</span></span>
<span class="line"></span>
<span class="line"></span></code></pre></div><ul><li>通过 Object.fromEntries， 可以将 Array 转化为 Object:</li></ul><div class="language-javascript" data-highlighter="prismjs" data-ext="js" data-title="js"><pre><code><span class="line"><span class="token keyword">const</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span> <span class="token punctuation">[</span><span class="token string">&#39;0&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;a&#39;</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token string">&#39;1&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;b&#39;</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token string">&#39;2&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;c&#39;</span><span class="token punctuation">]</span> <span class="token punctuation">]</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">const</span> obj <span class="token operator">=</span> Object<span class="token punctuation">.</span><span class="token function">fromEntries</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// { 0: &quot;a&quot;, 1: &quot;b&quot;, 2: &quot;c&quot; }</span></span>
<span class="line"></span>
<span class="line"></span></code></pre></div><h2 id="_6-symbol-prototype-description" tabindex="-1"><a class="header-anchor" href="#_6-symbol-prototype-description"><span>6.<code>Symbol.prototype.description</code></span></a></h2><p>通过工厂函数Symbol（）创建符号时，您可以选择通过参数提供字符串作为描述：</p><div class="language-javascript" data-highlighter="prismjs" data-ext="js" data-title="js"><pre><code><span class="line"><span class="token keyword">const</span> sym <span class="token operator">=</span> <span class="token function">Symbol</span><span class="token punctuation">(</span><span class="token string">&#39;The description&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"></span></code></pre></div><p>以前，访问描述的唯一方法是将符号转换为字符串：</p><div class="language-javascript" data-highlighter="prismjs" data-ext="js" data-title="js"><pre><code><span class="line">assert<span class="token punctuation">.</span><span class="token function">equal</span><span class="token punctuation">(</span><span class="token function">String</span><span class="token punctuation">(</span>sym<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">&#39;Symbol(The description)&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"></span></code></pre></div><p>现在引入了getter Symbol.prototype.description以直接访问描述：</p><div class="language-javascript" data-highlighter="prismjs" data-ext="js" data-title="js"><pre><code><span class="line">assert<span class="token punctuation">.</span><span class="token function">equal</span><span class="token punctuation">(</span>sym<span class="token punctuation">.</span>description<span class="token punctuation">,</span> <span class="token string">&#39;The description&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"></span></code></pre></div><h2 id="_7-string-prototype-matchall" tabindex="-1"><a class="header-anchor" href="#_7-string-prototype-matchall"><span>7.<code>String.prototype.matchAll</code></span></a></h2><p><code>matchAll()</code> 方法返回一个包含所有匹配正则表达式及分组捕获结果的迭代器。 在 matchAll 出现之前，通过在循环中调用regexp.exec来获取所有匹配项信息（regexp需使用/g标志：</p><div class="language-javascript" data-highlighter="prismjs" data-ext="js" data-title="js"><pre><code><span class="line"><span class="token keyword">const</span> regexp <span class="token operator">=</span> <span class="token function">RegExp</span><span class="token punctuation">(</span><span class="token string">&#39;foo*&#39;</span><span class="token punctuation">,</span><span class="token string">&#39;g&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">const</span> str <span class="token operator">=</span> <span class="token string">&#39;table football, foosball&#39;</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>matches <span class="token operator">=</span> regexp<span class="token punctuation">.</span><span class="token function">exec</span><span class="token punctuation">(</span>str<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">!==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">Found </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>matches<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">. Next starts at </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>regexp<span class="token punctuation">.</span>lastIndex<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">.</span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token comment">// expected output: &quot;Found foo. Next starts at 9.&quot;</span></span>
<span class="line">  <span class="token comment">// expected output: &quot;Found foo. Next starts at 19.&quot;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"></span></code></pre></div><p>如果使用matchAll ，就可以不必使用while循环加exec方式（且正则表达式需使用／g标志）。使用matchAll 会得到一个迭代器的返回值，配合 for...of, array spread, or Array.from() 可以更方便实现功能：</p><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js" data-title="js"><pre><code><span class="line"><span class="token keyword">const</span> regexp <span class="token operator">=</span> <span class="token function">RegExp</span><span class="token punctuation">(</span><span class="token string">&#39;foo*&#39;</span><span class="token punctuation">,</span><span class="token string">&#39;g&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> </span>
<span class="line"><span class="token keyword">const</span> str <span class="token operator">=</span> <span class="token string">&#39;table football, foosball&#39;</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">let</span> matches <span class="token operator">=</span> str<span class="token punctuation">.</span><span class="token function">matchAll</span><span class="token punctuation">(</span>regexp<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">const</span> match <span class="token keyword">of</span> matches<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>match<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"><span class="token comment">// Array [ &quot;foo&quot; ]</span></span>
<span class="line"><span class="token comment">// Array [ &quot;foo&quot; ]</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">// matches iterator is exhausted after the for..of iteration</span></span>
<span class="line"><span class="token comment">// Call matchAll again to create a new iterator</span></span>
<span class="line">matches <span class="token operator">=</span> str<span class="token punctuation">.</span><span class="token function">matchAll</span><span class="token punctuation">(</span>regexp<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">Array<span class="token punctuation">.</span><span class="token function">from</span><span class="token punctuation">(</span>matches<span class="token punctuation">,</span> <span class="token parameter">m</span> <span class="token operator">=&gt;</span> m<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token comment">// Array [ &quot;foo&quot;, &quot;foo&quot; ]</span></span>
<span class="line"></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="matchall可以更好的用于分组" tabindex="-1"><a class="header-anchor" href="#matchall可以更好的用于分组"><span>matchAll可以更好的用于分组</span></a></h3><div class="language-javascript" data-highlighter="prismjs" data-ext="js" data-title="js"><pre><code><span class="line"><span class="token keyword">let</span> regexp <span class="token operator">=</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">t<span class="token group punctuation">(</span>e<span class="token group punctuation">)</span><span class="token group punctuation">(</span>st<span class="token group punctuation">(</span><span class="token char-set class-name">\\d</span><span class="token quantifier number">?</span><span class="token group punctuation">)</span><span class="token group punctuation">)</span></span><span class="token regex-delimiter">/</span><span class="token regex-flags">g</span></span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">let</span> str <span class="token operator">=</span> <span class="token string">&#39;test1test2&#39;</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">str<span class="token punctuation">.</span><span class="token function">match</span><span class="token punctuation">(</span>regexp<span class="token punctuation">)</span><span class="token punctuation">;</span> </span>
<span class="line"><span class="token comment">// Array [&#39;test1&#39;, &#39;test2&#39;]</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">let</span> array <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token operator">...</span>str<span class="token punctuation">.</span><span class="token function">matchAll</span><span class="token punctuation">(</span>regexp<span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">array<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token comment">// [&#39;test1&#39;, &#39;e&#39;, &#39;st1&#39;, &#39;1&#39;, index: 0, input: &#39;test1test2&#39;, length: 4]</span></span>
<span class="line">array<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token comment">// [&#39;test2&#39;, &#39;e&#39;, &#39;st2&#39;, &#39;2&#39;, index: 5, input: &#39;test1test2&#39;, length: 4]</span></span>
<span class="line"></span>
<span class="line"></span></code></pre></div><h2 id="_8-function-prototype-tostring-现在返回精确字符-包括空格和注释" tabindex="-1"><a class="header-anchor" href="#_8-function-prototype-tostring-现在返回精确字符-包括空格和注释"><span>8.<code>Function.prototype.toString()</code>现在返回精确字符，包括空格和注释</span></a></h2><div class="language-javascript" data-highlighter="prismjs" data-ext="js" data-title="js"><pre><code><span class="line"><span class="token keyword">function</span> <span class="token comment">/* comment */</span> foo <span class="token comment">/* another comment */</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">// 之前不会打印注释部分</span></span>
<span class="line">console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>foo<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// function foo(){}</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">// ES2019 会把注释一同打印</span></span>
<span class="line">console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>foo<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// function /* comment */ foo /* another comment */ (){}</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">// 箭头函数</span></span>
<span class="line"><span class="token keyword">const</span> bar <span class="token comment">/* comment */</span> <span class="token operator">=</span> <span class="token comment">/* another comment */</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>bar<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// () =&gt; {}</span></span>
<span class="line"></span>
<span class="line"></span></code></pre></div><h2 id="_9-修改-catch-绑定" tabindex="-1"><a class="header-anchor" href="#_9-修改-catch-绑定"><span>9.修改 <code>catch</code> 绑定</span></a></h2><p>在 ES10 之前，我们必须通过语法为 catch 子句绑定异常变量，无论是否有必要。很多时候 catch 块是多余的。 ES10 提案使我们能够简单的把变量省略掉。</p><p>不算大的改动。</p><p>之前是</p><div class="language-javascript" data-highlighter="prismjs" data-ext="js" data-title="js"><pre><code><span class="line"><span class="token keyword">try</span> <span class="token punctuation">{</span><span class="token punctuation">}</span> <span class="token keyword">catch</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"></span></code></pre></div><p>现在是</p><div class="language-javascript" data-highlighter="prismjs" data-ext="js" data-title="js"><pre><code><span class="line"><span class="token keyword">try</span> <span class="token punctuation">{</span><span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">{</span><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"></span></code></pre></div><h2 id="_10-新的基本数据类型bigint" tabindex="-1"><a class="header-anchor" href="#_10-新的基本数据类型bigint"><span>10.新的基本数据类型<code>BigInt</code></span></a></h2><p>现在的基本数据类型（值类型）不止5种（ES6之后是六种）了哦！加上BigInt一共有七种基本数据类型，分别是： String、Number、Boolean、Null、Undefined、Symbol、BigInt</p><h2 id="es11-es2020" tabindex="-1"><a class="header-anchor" href="#es11-es2020"><span>ES11( ES2020)</span></a></h2><h2 id="optional-chaining-可选链式调用" tabindex="-1"><a class="header-anchor" href="#optional-chaining-可选链式调用"><span>Optional Chaining 可选链式调用</span></a></h2><p>大部分开发者都遇到过这个问题：</p><div class="language-text" data-highlighter="prismjs" data-ext="text" data-title="text"><pre><code><span class="line">TypeError: Cannot read property ‘x’ of undefined</span>
<span class="line"></span></code></pre></div><p>这个错误表示我们正在访问一个不属于对象的属性。</p><h3 id="访问对象的属性" tabindex="-1"><a class="header-anchor" href="#访问对象的属性"><span>访问对象的属性</span></a></h3><div class="language-javascript" data-highlighter="prismjs" data-ext="js" data-title="js"><pre><code><span class="line"><span class="token keyword">const</span> flower <span class="token operator">=</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token literal-property property">colors</span><span class="token operator">:</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token literal-property property">red</span><span class="token operator">:</span> <span class="token boolean">true</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>flower<span class="token punctuation">.</span>colors<span class="token punctuation">.</span>red<span class="token punctuation">)</span> <span class="token comment">// 正常运行</span></span>
<span class="line"></span>
<span class="line">console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>flower<span class="token punctuation">.</span>species<span class="token punctuation">.</span>lily<span class="token punctuation">)</span> <span class="token comment">// 抛出错误：TypeError: Cannot read property &#39;lily&#39; of undefined</span></span>
<span class="line"></span></code></pre></div><p>在这种情况下，JavaScript 引擎会像这样抛出错误。但是某些情况下值是否存在并不重要，因为我们知道它会存在。于是，可选链式调用就派上用场了！</p><p>我们可以使用由一个问号和一个点组成的可选链式操作符，去表示不应该引发错误。如果没有值，应该返回 <strong>undefined</strong>。</p><div class="language-javascript" data-highlighter="prismjs" data-ext="js" data-title="js"><pre><code><span class="line">console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>flower<span class="token punctuation">.</span>species<span class="token operator">?.</span>lily<span class="token punctuation">)</span> <span class="token comment">// 输出 undefined</span></span>
<span class="line"></span></code></pre></div><p>当访问数组或调用函数时，也可以使用可选链式调用。</p><h3 id="访问数组" tabindex="-1"><a class="header-anchor" href="#访问数组"><span>访问数组</span></a></h3><div class="language-javascript" data-highlighter="prismjs" data-ext="js" data-title="js"><pre><code><span class="line"><span class="token keyword">let</span> flowers <span class="token operator">=</span>  <span class="token punctuation">[</span><span class="token string">&#39;lily&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;daisy&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;rose&#39;</span><span class="token punctuation">]</span></span>
<span class="line"></span>
<span class="line">console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>flowers<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token comment">// 输出：daisy</span></span>
<span class="line"></span>
<span class="line">flowers <span class="token operator">=</span> <span class="token keyword">null</span></span>
<span class="line"></span>
<span class="line">console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>flowers<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token comment">// 抛出错误：TypeError: Cannot read property &#39;1&#39; of null</span></span>
<span class="line">console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>flowers<span class="token operator">?.</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token comment">// 输出：undefined</span></span>
<span class="line"></span></code></pre></div><h3 id="调用函数" tabindex="-1"><a class="header-anchor" href="#调用函数"><span>调用函数</span></a></h3><div class="language-javascript" data-highlighter="prismjs" data-ext="js" data-title="js"><pre><code><span class="line"><span class="token keyword">let</span> <span class="token function-variable function">plantFlowers</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token keyword">return</span> <span class="token string">&#39;orchids&#39;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">plantFlowers</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">// 输出：orchids</span></span>
<span class="line"></span>
<span class="line">plantFlowers <span class="token operator">=</span> <span class="token keyword">null</span></span>
<span class="line"></span>
<span class="line">console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">plantFlowers</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">// 抛出错误：TypeError: plantFlowers is not a function</span></span>
<span class="line"></span>
<span class="line">console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>plantFlowers<span class="token operator">?.</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">// 输出：undefined</span></span>
<span class="line"></span></code></pre></div><h2 id="nullish-coalescing-空值合并" tabindex="-1"><a class="header-anchor" href="#nullish-coalescing-空值合并"><span>Nullish Coalescing 空值合并</span></a></h2><p>目前，要为变量提供回退值，逻辑操作符 <strong><code>||</code></strong> 还是必须的。它适用于很多情况，但不能应用在一些特殊的场景。例如，初始值是布尔值或数字的情况。举例说明，我们要把数字赋值给一个变量，当变量的初始值不是数字时，就默认其为 7 ：</p><div class="language-javascript" data-highlighter="prismjs" data-ext="js" data-title="js"><pre><code><span class="line"><span class="token keyword">let</span> number <span class="token operator">=</span> <span class="token number">1</span></span>
<span class="line"><span class="token keyword">let</span> myNumber <span class="token operator">=</span> number <span class="token operator">||</span> <span class="token number">7</span></span>
<span class="line"></span></code></pre></div><p>变量 <strong>myNumber</strong> 等于 1，因为左边的（<strong>number</strong>）是一个 <a href="https://developer.mozilla.org/en-US/docs/Glossary/Truthy" target="_blank" rel="noopener noreferrer"><strong>真</strong></a> 值 1。但是，当变量 <strong>number</strong> 不是 1 而是 0 呢？</p><div class="language-javascript" data-highlighter="prismjs" data-ext="js" data-title="js"><pre><code><span class="line"><span class="token keyword">let</span> number <span class="token operator">=</span> <span class="token number">0</span></span>
<span class="line"><span class="token keyword">let</span> myNumber <span class="token operator">=</span> number <span class="token operator">||</span> <span class="token number">7</span></span>
<span class="line"></span></code></pre></div><p>0 是 <a href="https://developer.mozilla.org/en-US/docs/Glossary/Falsy" target="_blank" rel="noopener noreferrer"><strong>假</strong></a> 值，所以即使 0 是数字。变量 <strong>myNumber</strong> 将会被赋值为右边的 7。但结果并不是我们想要的。幸好，由两个问号组成：<strong><code>??</code></strong> 的合并操作符就可以检查变量 <strong>number</strong> 是否是一个数字，而不用写额外的代码了。</p><div class="language-javascript" data-highlighter="prismjs" data-ext="js" data-title="js"><pre><code><span class="line"><span class="token keyword">let</span> number <span class="token operator">=</span> <span class="token number">0</span></span>
<span class="line"><span class="token keyword">let</span> myNumber <span class="token operator">=</span> number <span class="token operator">??</span> <span class="token number">7</span></span>
<span class="line"></span></code></pre></div><p>操作符右边的值仅在左边的值等于 <strong>null</strong> 或 <strong>undefined</strong> 时有效，因此，例子中的变量 <strong>myNumber</strong> 现在的值等于 0 了。</p><h2 id="private-fields-私有字段" tabindex="-1"><a class="header-anchor" href="#private-fields-私有字段"><span>Private Fields 私有字段</span></a></h2><p>许多具有 <strong>classes</strong> 的编程语言允许定义类作为公共的，受保护的或私有的属性。<strong>Public</strong> 属性可以从类的外部或者子类访问，<strong>protected</strong> 属性只能被子类访问，<strong>private</strong> 属性只能被类内部访问。JavaScript 从 <strong>ES6</strong> 开始支持类语法，但直到现在才引入了私有字段。要定义私有属性，必须在其前面加上散列符号：<strong><code>#</code></strong>。</p><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js" data-title="js"><pre><code><span class="line"><span class="token keyword">class</span> <span class="token class-name">Flower</span> <span class="token punctuation">{</span></span>
<span class="line">  #leaf_color <span class="token operator">=</span> <span class="token string">&quot;green&quot;</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token function">constructor</span><span class="token punctuation">(</span><span class="token parameter">name</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span></span>
<span class="line">  <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">  <span class="token function">get_color</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>#leaf_color<span class="token punctuation">;</span></span>
<span class="line">  <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">const</span> orchid <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Flower</span><span class="token punctuation">(</span><span class="token string">&quot;orchid&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>orchid<span class="token punctuation">.</span><span class="token function">get_color</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 输出：green</span></span>
<span class="line">console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>orchid<span class="token punctuation">.</span>#leaf_color<span class="token punctuation">)</span> <span class="token comment">// 报错：SyntaxError: Private field &#39;#leaf_color&#39; must be declared in an enclosing class</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>如果我们从外部访问类的私有属性，势必会报错。</p><h2 id="static-fields-静态字段" tabindex="-1"><a class="header-anchor" href="#static-fields-静态字段"><span>Static Fields 静态字段</span></a></h2><p>如果想使用类的方法，首先必须实例化一个类，如下所示：</p><div class="language-javascript" data-highlighter="prismjs" data-ext="js" data-title="js"><pre><code><span class="line"><span class="token keyword">class</span> <span class="token class-name">Flower</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token function">add_leaves</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&quot;Adding leaves&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">const</span> rose <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Flower</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">rose<span class="token punctuation">.</span><span class="token function">add_leaves</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">Flower<span class="token punctuation">.</span><span class="token function">add_leaves</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">// 抛出错误：TypeError: Flower.add_leaves is not a function</span></span>
<span class="line"></span></code></pre></div><p>试图去访问没有实例化的 <strong>Flower</strong> 类的方法将会抛出一个错误。但由于 <strong>static</strong> 字段，类方法可以被 <strong>static</strong> 关键词声明然后从外部调用。</p><div class="language-javascript" data-highlighter="prismjs" data-ext="js" data-title="js"><pre><code><span class="line"><span class="token keyword">class</span> <span class="token class-name">Flower</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token function">constructor</span><span class="token punctuation">(</span><span class="token parameter">type</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">this</span><span class="token punctuation">.</span>type <span class="token operator">=</span> type<span class="token punctuation">;</span></span>
<span class="line">  <span class="token punctuation">}</span></span>
<span class="line">  <span class="token keyword">static</span> <span class="token function">create_flower</span><span class="token punctuation">(</span><span class="token parameter">type</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Flower</span><span class="token punctuation">(</span>type<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">const</span> rose <span class="token operator">=</span> Flower<span class="token punctuation">.</span><span class="token function">create_flower</span><span class="token punctuation">(</span><span class="token string">&quot;rose&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 正常运行</span></span>
<span class="line"></span></code></pre></div><h2 id="top-level-await-顶级-await" tabindex="-1"><a class="header-anchor" href="#top-level-await-顶级-await"><span>Top Level Await 顶级 Await</span></a></h2><p>目前，如果用 <strong>await</strong> 获取 promise 函数的结果，那使用 <strong>await</strong> 的函数必须用 <strong>async</strong> 关键字定义。</p><div class="language-javascript" data-highlighter="prismjs" data-ext="js" data-title="js"><pre><code><span class="line"><span class="token keyword">const</span> <span class="token function-variable function">func</span> <span class="token operator">=</span> <span class="token keyword">async</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">const</span> response <span class="token operator">=</span> <span class="token keyword">await</span> <span class="token function">fetch</span><span class="token punctuation">(</span>url<span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre></div><p>头疼的是，在全局作用域中去等待某些结果基本上是不可能的。除非使用 <strong>立即调用的函数表达式（IIFE）</strong>。</p><div class="language-javascript" data-highlighter="prismjs" data-ext="js" data-title="js"><pre><code><span class="line"><span class="token punctuation">(</span><span class="token keyword">async</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">const</span> response <span class="token operator">=</span> <span class="token keyword">await</span> <span class="token function">fetch</span><span class="token punctuation">(</span>url<span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line"></span></code></pre></div><p>但引入了 <strong>顶级 Await</strong> 后，不需要再把代码包裹在一个 async 函数中了，如下即可：</p><div class="language-javascript" data-highlighter="prismjs" data-ext="js" data-title="js"><pre><code><span class="line"><span class="token keyword">const</span> response <span class="token operator">=</span> <span class="token keyword">await</span> <span class="token function">fetch</span><span class="token punctuation">(</span>url<span class="token punctuation">)</span></span>
<span class="line"></span></code></pre></div><p>这个特性对于解决模块依赖或当初始源无法使用而需要备用源的时候是非常有用的。</p><div class="language-javascript" data-highlighter="prismjs" data-ext="js" data-title="js"><pre><code><span class="line"><span class="token keyword">let</span> Vue</span>
<span class="line"><span class="token keyword">try</span> <span class="token punctuation">{</span></span>
<span class="line">    Vue <span class="token operator">=</span> <span class="token keyword">await</span> <span class="token keyword">import</span><span class="token punctuation">(</span><span class="token string">&#39;url_1_to_vue&#39;</span><span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">{</span></span>
<span class="line">    Vue <span class="token operator">=</span> <span class="token keyword">await</span> <span class="token keyword">import</span><span class="token punctuation">(</span>&#39;url_2_to_vue<span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre></div><h2 id="promise-allsettled-方法" tabindex="-1"><a class="header-anchor" href="#promise-allsettled-方法"><span>Promise.allSettled 方法</span></a></h2><p>等待多个 promise 返回结果时，我们可以用 <strong>Promise.all([promise_1, promise_2])</strong>。但问题是，如果其中一个请求失败了，就会抛出错误。然而，有时候我们希望某个请求失败后，其他请求的结果能够正常返回。针对这种情况 <strong>ES11</strong> 引入了 <strong>Promise.allSettled</strong> 。</p><div class="language-javascript" data-highlighter="prismjs" data-ext="js" data-title="js"><pre><code><span class="line">promise_1 <span class="token operator">=</span> Promise<span class="token punctuation">.</span><span class="token function">resolve</span><span class="token punctuation">(</span><span class="token string">&#39;hello&#39;</span><span class="token punctuation">)</span></span>
<span class="line">promise_2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Promise</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">resolve<span class="token punctuation">,</span> reject</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token function">setTimeout</span><span class="token punctuation">(</span>reject<span class="token punctuation">,</span> <span class="token number">200</span><span class="token punctuation">,</span> <span class="token string">&#39;problem&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span></span>
<span class="line"></span>
<span class="line">Promise<span class="token punctuation">.</span><span class="token function">allSettled</span><span class="token punctuation">(</span><span class="token punctuation">[</span>promise_1<span class="token punctuation">,</span> promise_2<span class="token punctuation">]</span><span class="token punctuation">)</span></span>
<span class="line">    <span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter"><span class="token punctuation">[</span>promise_1_result<span class="token punctuation">,</span> promise_2_result<span class="token punctuation">]</span></span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span></span>
<span class="line">        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>promise_1_result<span class="token punctuation">)</span> <span class="token comment">// 输出：{status: &#39;fulfilled&#39;, value: &#39;hello&#39;}</span></span>
<span class="line">        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>promise_2_result<span class="token punctuation">)</span> <span class="token comment">// 输出：{status: &#39;rejected&#39;, reason: &#39;problem&#39;}</span></span>
<span class="line">    <span class="token punctuation">}</span><span class="token punctuation">)</span></span>
<span class="line"></span></code></pre></div><p>成功的 promise 将返回一个包含 <strong>status</strong> 和 <strong>value</strong> 的对象，失败的 promise 将返回一个包含 <strong>status</strong> 和 <strong>reason</strong> 的对象。</p><h2 id="dynamic-import-动态引入" tabindex="-1"><a class="header-anchor" href="#dynamic-import-动态引入"><span>Dynamic Import 动态引入</span></a></h2><p>你也许在 <strong>webpack</strong> 的模块绑定中已经使用过动态引入。但对于该特性的原生支持已经到来：</p><div class="language-javascript" data-highlighter="prismjs" data-ext="js" data-title="js"><pre><code><span class="line"><span class="token comment">// Alert.js</span></span>
<span class="line"><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token function">show</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token comment">// 代码</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"><span class="token comment">// 使用 Alert.js 的文件</span></span>
<span class="line"><span class="token keyword">import</span><span class="token punctuation">(</span><span class="token string">&#39;/components/Alert.js&#39;</span><span class="token punctuation">)</span></span>
<span class="line">    <span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token parameter">Alert</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span></span>
<span class="line">        Alert<span class="token punctuation">.</span><span class="token function">show</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line">    <span class="token punctuation">}</span><span class="token punctuation">)</span></span>
<span class="line"></span></code></pre></div><p>考虑到许多应用程序使用诸如 webpack 之类的模块打包器来进行代码的转译和优化，这个特性现在还没什么大作用。</p><h2 id="matchall-匹配所有项" tabindex="-1"><a class="header-anchor" href="#matchall-匹配所有项"><span>MatchAll 匹配所有项</span></a></h2><p>如果你想要查找字符串中所有正则表达式的匹配项和它们的位置，MatchAll 非常有用。</p><div class="language-javascript" data-highlighter="prismjs" data-ext="js" data-title="js"><pre><code><span class="line"><span class="token keyword">const</span> regex <span class="token operator">=</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex"><span class="token anchor function">\\b</span><span class="token group punctuation">(</span>apple<span class="token group punctuation">)</span><span class="token quantifier number">+</span><span class="token anchor function">\\b</span></span><span class="token regex-delimiter">/</span></span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">const</span> fruits <span class="token operator">=</span> <span class="token string">&quot;pear, apple, banana, apple, orange, apple&quot;</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">const</span> match <span class="token keyword">of</span> fruits<span class="token punctuation">.</span><span class="token function">match</span><span class="token punctuation">(</span>regex<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>match<span class="token punctuation">)</span><span class="token punctuation">;</span> </span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"><span class="token comment">// 输出 </span></span>
<span class="line"><span class="token comment">// </span></span>
<span class="line"><span class="token comment">// &#39;apple&#39; </span></span>
<span class="line"><span class="token comment">// &#39;apple&#39;</span></span>
<span class="line"></span></code></pre></div><p>相比之下，<strong>matchAll</strong> 返回更多的信息，包括找到匹配项的索引。</p><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js" data-title="js"><pre><code><span class="line"><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">const</span> match <span class="token keyword">of</span> fruits<span class="token punctuation">.</span><span class="token function">matchAll</span><span class="token punctuation">(</span>regex<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>match<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">// 输出</span></span>
<span class="line"><span class="token comment">// </span></span>
<span class="line"><span class="token comment">// [</span></span>
<span class="line"><span class="token comment">//   &#39;apple&#39;,</span></span>
<span class="line"><span class="token comment">//   &#39;apple&#39;,</span></span>
<span class="line"><span class="token comment">//   index: 6,</span></span>
<span class="line"><span class="token comment">//   input: &#39;pear, apple, banana, apple, orange, apple&#39;,</span></span>
<span class="line"><span class="token comment">//   groups: undefined</span></span>
<span class="line"><span class="token comment">// ],</span></span>
<span class="line"><span class="token comment">// [</span></span>
<span class="line"><span class="token comment">//   &#39;apple&#39;,</span></span>
<span class="line"><span class="token comment">//   &#39;apple&#39;,</span></span>
<span class="line"><span class="token comment">//   index: 21,</span></span>
<span class="line"><span class="token comment">//   input: &#39;pear, apple, banana, apple, orange, apple&#39;,</span></span>
<span class="line"><span class="token comment">//   groups: undefined</span></span>
<span class="line"><span class="token comment">// ],</span></span>
<span class="line"><span class="token comment">// [</span></span>
<span class="line"><span class="token comment">//   &#39;apple&#39;,</span></span>
<span class="line"><span class="token comment">//   &#39;apple&#39;,</span></span>
<span class="line"><span class="token comment">//   index: 36,</span></span>
<span class="line"><span class="token comment">//   input: &#39;pear, apple, banana, apple, orange, apple&#39;,</span></span>
<span class="line"><span class="token comment">//   groups: undefined</span></span>
<span class="line"><span class="token comment">// ]</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="globalthis-全局对象" tabindex="-1"><a class="header-anchor" href="#globalthis-全局对象"><span>globalThis 全局对象</span></a></h2><p>JavaScript 可以在不同环境中运行，比如浏览器或者 Node.js。浏览器中可用的全局对象是变量 <strong>window</strong>，但在 Node.js 中是一个叫做 <strong>global</strong> 的对象。为了在不同环境中都使用统一的全局对象，引入了 <strong>globalThis</strong> 。</p><div class="language-javascript" data-highlighter="prismjs" data-ext="js" data-title="js"><pre><code><span class="line"><span class="token comment">// 浏览器</span></span>
<span class="line">window <span class="token operator">==</span> globalThis <span class="token comment">// true</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">// node.js</span></span>
<span class="line">global <span class="token operator">==</span> globalThis <span class="token comment">// true</span></span>
<span class="line"></span></code></pre></div><h2 id="bigint" tabindex="-1"><a class="header-anchor" href="#bigint"><span>BigInt</span></a></h2><p>JavaScript 中能够精确表达的最大数字是 2^53 - 1。而 BigInt 可以用来创建更大的数字。</p><div class="language-javascript" data-highlighter="prismjs" data-ext="js" data-title="js"><pre><code><span class="line"><span class="token keyword">const</span> theBiggerNumber <span class="token operator">=</span> <span class="token number">9007199254740991n</span></span>
<span class="line"><span class="token keyword">const</span> evenBiggerNumber <span class="token operator">=</span> <span class="token function">BigInt</span><span class="token punctuation">(</span><span class="token number">9007199254740991</span><span class="token punctuation">)</span></span>
<span class="line"></span></code></pre></div>`,112)]))}const i=s(e,[["render",o]]),u=JSON.parse('{"path":"/frontend/basic-js/es/es9-es12.html","title":"ES9到ES12","lang":"zh-CN","frontmatter":{"description":"ES9到ES12 行分隔符（U + 2028）和段分隔符（U + 2029）符号现在允许在字符串文字中，与JSON匹配 更加友好的 JSON.stringify 新增了Array的flat()方法和flatMap()方法 新增了String的trimStart()方法和trimEnd()方法 Object.fromEntries() Symbol.pr...","head":[["meta",{"property":"og:url","content":"https://yzqdev.github.io/cs-guide/cs-guide/frontend/basic-js/es/es9-es12.html"}],["meta",{"property":"og:site_name","content":"cs-guide"}],["meta",{"property":"og:title","content":"ES9到ES12"}],["meta",{"property":"og:description","content":"ES9到ES12 行分隔符（U + 2028）和段分隔符（U + 2029）符号现在允许在字符串文字中，与JSON匹配 更加友好的 JSON.stringify 新增了Array的flat()方法和flatMap()方法 新增了String的trimStart()方法和trimEnd()方法 Object.fromEntries() Symbol.pr..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2022-07-25T14:57:57.000Z"}],["meta",{"property":"article:modified_time","content":"2022-07-25T14:57:57.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"ES9到ES12\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2022-07-25T14:57:57.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"yzqdev\\",\\"url\\":\\"http://www.yzqdev.top\\"}]}"]]},"headers":[{"level":2,"title":"1.行分隔符（U + 2028）和段分隔符（U + 2029）符号现在允许在字符串文字中，与JSON匹配","slug":"_1-行分隔符-u-2028-和段分隔符-u-2029-符号现在允许在字符串文字中-与json匹配","link":"#_1-行分隔符-u-2028-和段分隔符-u-2029-符号现在允许在字符串文字中-与json匹配","children":[]},{"level":2,"title":"2.更加友好的 JSON.stringify","slug":"_2-更加友好的-json-stringify","link":"#_2-更加友好的-json-stringify","children":[]},{"level":2,"title":"3.新增了Array的flat()方法和flatMap()方法","slug":"_3-新增了array的flat-方法和flatmap-方法","link":"#_3-新增了array的flat-方法和flatmap-方法","children":[{"level":3,"title":"Array.prototype.flat()","slug":"array-prototype-flat","link":"#array-prototype-flat","children":[]},{"level":3,"title":"Array.prototype.flatMap()","slug":"array-prototype-flatmap","link":"#array-prototype-flatmap","children":[]}]},{"level":2,"title":"4.新增了String的trimStart()方法和trimEnd()方法","slug":"_4-新增了string的trimstart-方法和trimend-方法","link":"#_4-新增了string的trimstart-方法和trimend-方法","children":[]},{"level":2,"title":"5.Object.fromEntries()","slug":"_5-object-fromentries","link":"#_5-object-fromentries","children":[]},{"level":2,"title":"6.Symbol.prototype.description","slug":"_6-symbol-prototype-description","link":"#_6-symbol-prototype-description","children":[]},{"level":2,"title":"7.String.prototype.matchAll","slug":"_7-string-prototype-matchall","link":"#_7-string-prototype-matchall","children":[{"level":3,"title":"matchAll可以更好的用于分组","slug":"matchall可以更好的用于分组","link":"#matchall可以更好的用于分组","children":[]}]},{"level":2,"title":"8.Function.prototype.toString()现在返回精确字符，包括空格和注释","slug":"_8-function-prototype-tostring-现在返回精确字符-包括空格和注释","link":"#_8-function-prototype-tostring-现在返回精确字符-包括空格和注释","children":[]},{"level":2,"title":"9.修改 catch 绑定","slug":"_9-修改-catch-绑定","link":"#_9-修改-catch-绑定","children":[]},{"level":2,"title":"10.新的基本数据类型BigInt","slug":"_10-新的基本数据类型bigint","link":"#_10-新的基本数据类型bigint","children":[]},{"level":2,"title":"ES11( ES2020)","slug":"es11-es2020","link":"#es11-es2020","children":[]},{"level":2,"title":"Optional Chaining 可选链式调用","slug":"optional-chaining-可选链式调用","link":"#optional-chaining-可选链式调用","children":[{"level":3,"title":"访问对象的属性","slug":"访问对象的属性","link":"#访问对象的属性","children":[]},{"level":3,"title":"访问数组","slug":"访问数组","link":"#访问数组","children":[]},{"level":3,"title":"调用函数","slug":"调用函数","link":"#调用函数","children":[]}]},{"level":2,"title":"Nullish Coalescing 空值合并","slug":"nullish-coalescing-空值合并","link":"#nullish-coalescing-空值合并","children":[]},{"level":2,"title":"Private Fields 私有字段","slug":"private-fields-私有字段","link":"#private-fields-私有字段","children":[]},{"level":2,"title":"Static Fields 静态字段","slug":"static-fields-静态字段","link":"#static-fields-静态字段","children":[]},{"level":2,"title":"Top Level Await 顶级 Await","slug":"top-level-await-顶级-await","link":"#top-level-await-顶级-await","children":[]},{"level":2,"title":"Promise.allSettled 方法","slug":"promise-allsettled-方法","link":"#promise-allsettled-方法","children":[]},{"level":2,"title":"Dynamic Import 动态引入","slug":"dynamic-import-动态引入","link":"#dynamic-import-动态引入","children":[]},{"level":2,"title":"MatchAll 匹配所有项","slug":"matchall-匹配所有项","link":"#matchall-匹配所有项","children":[]},{"level":2,"title":"globalThis 全局对象","slug":"globalthis-全局对象","link":"#globalthis-全局对象","children":[]},{"level":2,"title":"BigInt","slug":"bigint","link":"#bigint","children":[]}],"git":{"createdTime":1647861419000,"updatedTime":1658761077000,"contributors":[{"name":"yzqdev","username":"yzqdev","email":"yzqdev@outlook.com","commits":6,"url":"https://github.com/yzqdev"}]},"readingTime":{"minutes":10.31,"words":3093},"filePathRelative":"frontend/basic-js/es/es9-es12.md","localizedDate":"2022年3月21日","autoDesc":true}');export{i as comp,u as data};
