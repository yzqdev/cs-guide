import{_ as a,c as n,a as p,o as e}from"./app-C8DxhDIZ.js";const t={};function l(i,s){return e(),n("div",null,s[0]||(s[0]=[p(`<h1 id="linux-shell常用" tabindex="-1"><a class="header-anchor" href="#linux-shell常用"><span>linux-shell常用</span></a></h1><p>本文将介绍Linux下使用Shell处理文本时最常用的工具：find、grep、xargs、sort、uniq、tr、cut、paste、wc、sed、awk；提供的例子和参数都是最常用和最为实用的；对shell脚本使用的原则是命令单行书写，尽量不要超过2行；如果有更为复杂的任务需求，还是考虑python吧.</p><h2 id="_1、find-文件查找" tabindex="-1"><a class="header-anchor" href="#_1、find-文件查找"><span>1、find 文件查找</span></a></h2><p>查找txt和pdf文件</p><div class="language-bash" data-highlighter="prismjs" data-ext="sh" data-title="sh"><pre><code><span class="line"><span class="token function">find</span> <span class="token builtin class-name">.</span> <span class="token punctuation">(</span> <span class="token parameter variable">-name</span> <span class="token string">&quot;*.txt&quot;</span> <span class="token parameter variable">-o</span> <span class="token parameter variable">-name</span> <span class="token string">&quot;*.pdf&quot;</span> <span class="token punctuation">)</span> <span class="token parameter variable">-print</span></span>
<span class="line"></span></code></pre></div><p>正则方式查找.txt和pdf</p><div class="language-bash" data-highlighter="prismjs" data-ext="sh" data-title="sh"><pre><code><span class="line"><span class="token function">find</span> <span class="token builtin class-name">.</span> <span class="token parameter variable">-regex</span>  <span class="token string">&quot;.*(.txt|.pdf)$&quot;</span></span>
<span class="line"><span class="token comment">#-iregex：忽略大小写的正则</span></span>
<span class="line"></span></code></pre></div><p>否定参数:查找所有非txt文本</p><div class="language-bash" data-highlighter="prismjs" data-ext="sh" data-title="sh"><pre><code><span class="line"><span class="token function">find</span> <span class="token builtin class-name">.</span> <span class="token operator">!</span> <span class="token parameter variable">-name</span> <span class="token string">&quot;*.txt&quot;</span> <span class="token parameter variable">-print</span></span>
<span class="line"></span></code></pre></div><p>指定搜索深度:打印出当前目录的文件（深度为1）</p><div class="language-bash" data-highlighter="prismjs" data-ext="sh" data-title="sh"><pre><code><span class="line"><span class="token function">find</span> <span class="token builtin class-name">.</span> <span class="token parameter variable">-maxdepth</span> <span class="token number">1</span> <span class="token parameter variable">-type</span> f</span>
<span class="line"></span></code></pre></div><p>定制搜索</p><div class="language-bash line-numbers-mode" data-highlighter="prismjs" data-ext="sh" data-title="sh"><pre><code><span class="line"><span class="token comment">#按类型搜索：</span></span>
<span class="line"><span class="token function">find</span> <span class="token builtin class-name">.</span> <span class="token parameter variable">-type</span> d <span class="token parameter variable">-print</span>  //只列出所有目录</span>
<span class="line"><span class="token comment">#按时间搜索：</span></span>
<span class="line"><span class="token parameter variable">-atime</span> 访问时间 <span class="token punctuation">(</span>单位是天，分钟单位则是-amin，以下类似）</span>
<span class="line"><span class="token parameter variable">-mtime</span> 修改时间 （内容被修改）</span>
<span class="line"><span class="token parameter variable">-ctime</span> 变化时间 （元数据或权限变化）</span>
<span class="line">最近7天被访问过的所有文件：</span>
<span class="line"><span class="token function">find</span> <span class="token builtin class-name">.</span> <span class="token parameter variable">-atime</span> <span class="token number">7</span> <span class="token parameter variable">-type</span> f <span class="token parameter variable">-print</span></span>
<span class="line"><span class="token comment">#按大小搜索：</span></span>
<span class="line">寻找大于2k的文件</span>
<span class="line"><span class="token function">find</span> <span class="token builtin class-name">.</span> <span class="token parameter variable">-type</span> f <span class="token parameter variable">-size</span> +2k</span>
<span class="line"><span class="token comment">#按权限查找：</span></span>
<span class="line"><span class="token function">find</span> <span class="token builtin class-name">.</span> <span class="token parameter variable">-type</span> f <span class="token parameter variable">-perm</span> <span class="token number">644</span> <span class="token parameter variable">-print</span> //找具有可执行权限的所有文件</span>
<span class="line"><span class="token comment">#按用户查找：</span></span>
<span class="line"><span class="token function">find</span> <span class="token builtin class-name">.</span> <span class="token parameter variable">-type</span> f <span class="token parameter variable">-user</span> weber -print// 找用户weber所拥有的文件</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>找到后的后续动作删除：</p><div class="language-bash" data-highlighter="prismjs" data-ext="sh" data-title="sh"><pre><code><span class="line"><span class="token comment">#删除当前目录下所有的swp文件：</span></span>
<span class="line"><span class="token function">find</span> <span class="token builtin class-name">.</span> <span class="token parameter variable">-type</span> f <span class="token parameter variable">-name</span> <span class="token string">&quot;*.swp&quot;</span> <span class="token parameter variable">-delete</span></span>
<span class="line"><span class="token comment">#执行动作（强大的exec）</span></span>
<span class="line"><span class="token function">find</span> <span class="token builtin class-name">.</span> <span class="token parameter variable">-type</span> f <span class="token parameter variable">-user</span> root <span class="token parameter variable">-exec</span> <span class="token function">chown</span> weber <span class="token punctuation">{</span><span class="token punctuation">}</span> <span class="token punctuation">;</span> //将当前目录下的所有权变更为weber</span>
<span class="line">注：<span class="token punctuation">{</span><span class="token punctuation">}</span>是一个特殊的字符串，对于每一个匹配的文件，<span class="token punctuation">{</span><span class="token punctuation">}</span>会被替换成相应的文件名；</span>
<span class="line">eg：将找到的文件全都copy到另一个目录：</span>
<span class="line"><span class="token function">find</span> <span class="token builtin class-name">.</span> <span class="token parameter variable">-type</span> f <span class="token parameter variable">-mtime</span> +10 <span class="token parameter variable">-name</span> <span class="token string">&quot;*.txt&quot;</span> <span class="token parameter variable">-exec</span> <span class="token function">cp</span> <span class="token punctuation">{</span><span class="token punctuation">}</span> OLD <span class="token punctuation">;</span></span>
<span class="line"></span></code></pre></div><p>结合多个命令tips: 如果需要后续执行多个命令，可以将多个命令写成一个脚本。然后 -exec 调用时执行脚本即可；</p><div class="language-bash" data-highlighter="prismjs" data-ext="sh" data-title="sh"><pre><code><span class="line"><span class="token parameter variable">-exec</span> ./commands.sh <span class="token punctuation">{</span><span class="token punctuation">}</span> <span class="token punctuation">;</span></span>
<span class="line"><span class="token comment">#-print的定界符</span></span>
<span class="line"></span></code></pre></div><ul><li>默认使用&#39; &#39;作为文件的定界符；</li><li>-print0 使用&#39;&#39;作为文件的定界符，这样就可以搜索包含空格的文件；</li></ul><h2 id="_2、grep-文本搜索" tabindex="-1"><a class="header-anchor" href="#_2、grep-文本搜索"><span>2、grep 文本搜索</span></a></h2><p>grep match_patten file // 默认访问匹配行</p><p>常用参数:</p><ul><li>-o 只输出匹配的文本行 VS -v 只输出没有匹配的文本行</li><li>-c 统计文件中包含文本的次数</li></ul><p>grep -c &quot;text&quot; filename</p><ul><li>n 打印匹配的行号</li><li>i 搜索时忽略大小写</li><li>l 只打印文件名</li></ul><p>在多级目录中对文本递归搜索(程序员搜代码的最爱）：</p><div class="language-bash" data-highlighter="prismjs" data-ext="sh" data-title="sh"><pre><code><span class="line"><span class="token function">grep</span> <span class="token string">&quot;class&quot;</span> <span class="token builtin class-name">.</span> <span class="token parameter variable">-R</span> <span class="token parameter variable">-n</span></span>
<span class="line"></span></code></pre></div><p>匹配多个模式</p><div class="language-bash" data-highlighter="prismjs" data-ext="sh" data-title="sh"><pre><code><span class="line"><span class="token function">grep</span> <span class="token parameter variable">-e</span> <span class="token string">&quot;class&quot;</span> <span class="token parameter variable">-e</span> <span class="token string">&quot;vitural&quot;</span> <span class="token function">file</span></span>
<span class="line"></span></code></pre></div><p>grep输出以作为结尾符的文件名：（-z）</p><div class="language-bash" data-highlighter="prismjs" data-ext="sh" data-title="sh"><pre><code><span class="line"><span class="token function">grep</span> <span class="token string">&quot;test&quot;</span> file* -lZ<span class="token operator">|</span> <span class="token function">xargs</span> <span class="token parameter variable">-0</span> <span class="token function">rm</span></span>
<span class="line"></span></code></pre></div><p>xargs 命令行参数转换</p><p>xargs 能够将输入数据转化为特定命令的命令行参数；这样，可以配合很多命令来组合使用。比如grep，比如find；</p><p>将多行输出转化为单行输出</p><div class="language-bash" data-highlighter="prismjs" data-ext="sh" data-title="sh"><pre><code><span class="line"><span class="token function">cat</span> file.txt<span class="token operator">|</span> <span class="token function">xargs</span></span>
<span class="line"></span></code></pre></div><ul><li>是多行文本间的定界符</li><li>将单行转化为多行输出</li></ul><div class="language-bash" data-highlighter="prismjs" data-ext="sh" data-title="sh"><pre><code><span class="line"><span class="token function">cat</span> single.txt <span class="token operator">|</span> <span class="token function">xargs</span> <span class="token parameter variable">-n</span> <span class="token number">3</span></span>
<span class="line"><span class="token comment">#-n：指定每行显示的字段数</span></span>
<span class="line"></span></code></pre></div><p>xargs参数说明</p><ul><li>-d 定义定界符 （默认为空格 多行的定界符为 ）</li><li>-n 指定输出为多行</li><li>-I {} 指定替换字符串，这个字符串在xargs扩展时会被替换掉,用于待执行的命令需要多个参数时</li></ul><div class="language-bash" data-highlighter="prismjs" data-ext="sh" data-title="sh"><pre><code><span class="line"><span class="token function">cat</span> file.txt <span class="token operator">|</span> <span class="token function">xargs</span> <span class="token parameter variable">-I</span> <span class="token punctuation">{</span><span class="token punctuation">}</span> ./command.sh <span class="token parameter variable">-p</span> <span class="token punctuation">{</span><span class="token punctuation">}</span> <span class="token parameter variable">-1</span></span>
<span class="line"><span class="token comment">#-0：指定为输入定界符</span></span>
<span class="line"><span class="token comment">#统计程序行数</span></span>
<span class="line"><span class="token function">find</span> source_dir/ <span class="token parameter variable">-type</span> f <span class="token parameter variable">-name</span> <span class="token string">&quot;*.cpp&quot;</span> <span class="token parameter variable">-print0</span> <span class="token operator">|</span><span class="token function">xargs</span> <span class="token parameter variable">-0</span> <span class="token function">wc</span> <span class="token parameter variable">-l</span></span>
<span class="line"></span></code></pre></div><h2 id="_3、sort-排序" tabindex="-1"><a class="header-anchor" href="#_3、sort-排序"><span>3、sort 排序</span></a></h2><p>字段说明：</p><ul><li>-n 按数字进行排序 VS -d 按字典序进行排序</li><li>-r 逆序排序</li><li>-k N 指定按第N列排序</li></ul><div class="language-bash" data-highlighter="prismjs" data-ext="sh" data-title="sh"><pre><code><span class="line"><span class="token function">sort</span> <span class="token parameter variable">-nrk</span> <span class="token number">1</span> data.txt</span>
<span class="line"><span class="token function">sort</span> <span class="token parameter variable">-bd</span> data // 忽略像空格之类的前导空白字符</span>
<span class="line"></span></code></pre></div><h2 id="_4、uniq-消除重复行" tabindex="-1"><a class="header-anchor" href="#_4、uniq-消除重复行"><span>4、uniq 消除重复行</span></a></h2><p>消除重复行</p><div class="language-bash" data-highlighter="prismjs" data-ext="sh" data-title="sh"><pre><code><span class="line"><span class="token function">sort</span> unsort.txt <span class="token operator">|</span> <span class="token function">uniq</span></span>
<span class="line"></span></code></pre></div><p>统计各行在文件中出现的次数</p><div class="language-bash" data-highlighter="prismjs" data-ext="sh" data-title="sh"><pre><code><span class="line"><span class="token function">sort</span> unsort.txt <span class="token operator">|</span> <span class="token function">uniq</span> <span class="token parameter variable">-c</span></span>
<span class="line"></span></code></pre></div><p>找出重复行</p><div class="language-bash" data-highlighter="prismjs" data-ext="sh" data-title="sh"><pre><code><span class="line"><span class="token function">sort</span> unsort.txt <span class="token operator">|</span> <span class="token function">uniq</span> <span class="token parameter variable">-d</span></span>
<span class="line"></span></code></pre></div><p>可指定每行中需要比较的重复内容：-s 开始位置 -w 比较字符数</p><h2 id="_5、用-tr-进行转换" tabindex="-1"><a class="header-anchor" href="#_5、用-tr-进行转换"><span>5、用 tr 进行转换</span></a></h2><p>通用用法</p><div class="language-bash" data-highlighter="prismjs" data-ext="sh" data-title="sh"><pre><code><span class="line"><span class="token builtin class-name">echo</span> <span class="token number">12345</span><span class="token operator">|</span> <span class="token function">tr</span> <span class="token string">&#39;0-9&#39;</span>&#39;9876543210<span class="token string">&#39; //加解密转换，替换对应字符</span>
<span class="line">cat text| tr &#39;</span>    <span class="token string">&#39;&#39;</span> &#39;  //制表符转空格</span>
<span class="line"></span></code></pre></div><p>tr删除字符</p><div class="language-bash" data-highlighter="prismjs" data-ext="sh" data-title="sh"><pre><code><span class="line"><span class="token function">cat</span> <span class="token function">file</span> <span class="token operator">|</span> <span class="token function">tr</span> <span class="token parameter variable">-d</span> <span class="token string">&#39;0-9&#39;</span>   // 删除所有数字</span>
<span class="line"></span></code></pre></div><p>-c 求补集</p><div class="language-bash" data-highlighter="prismjs" data-ext="sh" data-title="sh"><pre><code><span class="line"><span class="token function">cat</span> <span class="token function">file</span> <span class="token operator">|</span> <span class="token function">tr</span> <span class="token parameter variable">-c</span>  <span class="token string">&#39;0-9&#39;</span>   //获取文件中所有数字</span>
<span class="line"><span class="token function">cat</span> <span class="token function">file</span> <span class="token operator">|</span> <span class="token function">tr</span> <span class="token parameter variable">-d</span> <span class="token parameter variable">-c</span> <span class="token string">&#39;0-9&#39;</span>  //删除非数字数据</span>
<span class="line"></span></code></pre></div><p>tr压缩字符</p><div class="language-bash" data-highlighter="prismjs" data-ext="sh" data-title="sh"><pre><code><span class="line"><span class="token function">tr</span> <span class="token parameter variable">-s</span> 压缩文本中出现的重复字符；最常用于压缩多余的空格</span>
<span class="line"><span class="token function">cat</span> <span class="token function">file</span> <span class="token operator">|</span> <span class="token function">tr</span> <span class="token parameter variable">-s</span> <span class="token string">&#39; &#39;</span></span>
<span class="line"></span></code></pre></div><p>字符类：tr中可用各种字符类</p><ul><li>alnum：字母和数字</li><li>alpha：字母</li><li>digit：数字</li><li>space：空白字符</li><li>lower：小写</li><li>upper：大写</li><li>cntrl：控制（非可打印）字符</li><li>print：可打印字符</li></ul><div class="language-bash" data-highlighter="prismjs" data-ext="sh" data-title="sh"><pre><code><span class="line">使用方法：tr <span class="token punctuation">[</span>:class:<span class="token punctuation">]</span> <span class="token punctuation">[</span>:class:<span class="token punctuation">]</span></span>
<span class="line">eg: <span class="token function">tr</span> </span>
<span class="line"><span class="token string">&#39;[:lower:]&#39;</span>&#39;<span class="token punctuation">[</span>:upper:<span class="token punctuation">]</span>&#39;</span>
<span class="line"></span></code></pre></div><h2 id="_6、cut-按列切分文本" tabindex="-1"><a class="header-anchor" href="#_6、cut-按列切分文本"><span>6、cut 按列切分文本</span></a></h2><div class="language-bash" data-highlighter="prismjs" data-ext="sh" data-title="sh"><pre><code><span class="line"><span class="token comment">#截取文件的第2列和第4列：</span></span>
<span class="line"><span class="token function">cut</span> -f2,4 filename</span>
<span class="line"><span class="token comment">#去文件除第3列的所有列：</span></span>
<span class="line"><span class="token function">cut</span> <span class="token parameter variable">-f3</span> <span class="token parameter variable">--complement</span> filename</span>
<span class="line"><span class="token comment">#-d 指定定界符：</span></span>
<span class="line"><span class="token function">cat</span> <span class="token parameter variable">-f2</span> <span class="token parameter variable">-d</span> <span class="token string">&quot;;&quot;</span> filename</span>
<span class="line"></span></code></pre></div><p>cut 取的范围</p><ul><li>N- 第N个字段到结尾</li><li>-M 第1个字段为M</li><li>N-M N到M个字段cut 取的单位</li><li>-b 以字节为单位</li><li>-c 以字符为单位</li><li>-f 以字段为单位（使用定界符）</li></ul><div class="language-bash" data-highlighter="prismjs" data-ext="sh" data-title="sh"><pre><code><span class="line"><span class="token function">cut</span> -c1-5 <span class="token function">file</span> //打印第一到5个字符</span>
<span class="line"><span class="token function">cut</span> -c-2 <span class="token function">file</span>  //打印前2个字符</span>
<span class="line"></span></code></pre></div><h2 id="_7、paste-按列拼接文本" tabindex="-1"><a class="header-anchor" href="#_7、paste-按列拼接文本"><span>7、paste 按列拼接文本</span></a></h2><p>将两个文本按列拼接到一起</p><div class="language-bash" data-highlighter="prismjs" data-ext="sh" data-title="sh"><pre><code><span class="line"><span class="token function">cat</span> file1</span>
<span class="line"><span class="token number">1</span></span>
<span class="line"><span class="token number">2</span></span>
<span class="line"><span class="token function">cat</span> file2</span>
<span class="line">colin</span>
<span class="line">book</span>
<span class="line"><span class="token function">paste</span> file1 file2</span>
<span class="line">1colin</span>
<span class="line"><span class="token number">2</span> book</span>
<span class="line"></span></code></pre></div><p>默认的定界符是制表符，可以用-d指明定界符</p><div class="language-bash" data-highlighter="prismjs" data-ext="sh" data-title="sh"><pre><code><span class="line"><span class="token function">paste</span> file1 file2 <span class="token parameter variable">-d</span> <span class="token string">&quot;,&quot;</span></span>
<span class="line"><span class="token number">1</span>,colin</span>
<span class="line"><span class="token number">2</span>,book</span>
<span class="line"></span></code></pre></div><h2 id="_8、wc-统计行和字符的工具" tabindex="-1"><a class="header-anchor" href="#_8、wc-统计行和字符的工具"><span>8、wc 统计行和字符的工具</span></a></h2><div class="language-bash" data-highlighter="prismjs" data-ext="sh" data-title="sh"><pre><code><span class="line"><span class="token function">wc</span> <span class="token parameter variable">-l</span> <span class="token function">file</span> // 统计行数</span>
<span class="line"><span class="token function">wc</span> <span class="token parameter variable">-w</span> <span class="token function">file</span> // 统计单词数</span>
<span class="line"><span class="token function">wc</span> <span class="token parameter variable">-c</span> <span class="token function">file</span> // 统计字符数</span>
<span class="line"></span></code></pre></div><h2 id="_9、sed-文本替换利器" tabindex="-1"><a class="header-anchor" href="#_9、sed-文本替换利器"><span>9、sed 文本替换利器</span></a></h2><p>首处替换</p><div class="language-bash" data-highlighter="prismjs" data-ext="sh" data-title="sh"><pre><code><span class="line"><span class="token function">sed</span> <span class="token string">&#39;s/text/replace_text/&#39;</span><span class="token function">file</span>   //替换每一行的第一处匹配的text</span>
<span class="line"></span></code></pre></div><p>全局替换</p><div class="language-bash" data-highlighter="prismjs" data-ext="sh" data-title="sh"><pre><code><span class="line"><span class="token function">sed</span> <span class="token string">&#39;s/text/replace_text/g&#39;</span> <span class="token function">file</span></span>
<span class="line"></span></code></pre></div><p>默认替换后，输出替换后的内容，如果需要直接替换原文件,使用-i：</p><div class="language-bash" data-highlighter="prismjs" data-ext="sh" data-title="sh"><pre><code><span class="line"><span class="token function">sed</span> <span class="token parameter variable">-i</span> <span class="token string">&#39;s/text/repalce_text/g&#39;</span> <span class="token function">file</span></span>
<span class="line"></span></code></pre></div><p>移除空白行：</p><div class="language-bash" data-highlighter="prismjs" data-ext="sh" data-title="sh"><pre><code><span class="line"><span class="token function">sed</span> <span class="token string">&#39;/^$/d&#39;</span> <span class="token function">file</span></span>
<span class="line"></span></code></pre></div><p>变量转换</p><p>已匹配的字符串通过标记&amp;来引用.</p><div class="language-bash" data-highlighter="prismjs" data-ext="sh" data-title="sh"><pre><code><span class="line"><span class="token builtin class-name">echo</span> this is en example <span class="token operator">|</span> seg <span class="token string">&#39;s/w+/[&amp;]/g&#39;</span></span>
<span class="line">$<span class="token operator">&gt;</span><span class="token punctuation">[</span>this<span class="token punctuation">]</span>  <span class="token punctuation">[</span>is<span class="token punctuation">]</span> <span class="token punctuation">[</span>en<span class="token punctuation">]</span> <span class="token punctuation">[</span>example<span class="token punctuation">]</span></span>
<span class="line"></span></code></pre></div><p>子串匹配标记</p><p>第一个匹配的括号内容使用标记 来引用</p><div class="language-bash" data-highlighter="prismjs" data-ext="sh" data-title="sh"><pre><code><span class="line"><span class="token function">sed</span> <span class="token string">&#39;s/hello([0-9])//&#39;</span></span>
<span class="line"></span></code></pre></div><p>双引号求值</p><ul><li>sed通常用单引号来引用；也可使用双引号，使用双引号后，双引号会对表达式求值：</li><li>sed &#39;s/$var/HLLOE/&#39;当使用双引号时，我们可以在sed样式和替换字符串中指定变量；</li></ul><div class="language-bash" data-highlighter="prismjs" data-ext="sh" data-title="sh"><pre><code><span class="line"><span class="token assign-left variable">p</span><span class="token operator">=</span>patten</span>
<span class="line"><span class="token assign-left variable">r</span><span class="token operator">=</span>replaced</span>
<span class="line"><span class="token builtin class-name">echo</span> <span class="token string">&quot;line con a patten&quot;</span><span class="token operator">|</span> <span class="token function">sed</span> <span class="token string">&quot;s/<span class="token variable">$p</span>/<span class="token variable">$r</span>/g&quot;</span></span>
<span class="line">$<span class="token operator">&gt;</span>line con a replaced</span>
<span class="line"></span></code></pre></div><p>字符串插入字符：将文本中每行内容（PEKSHA） 转换为 PEK/SHA</p><div class="language-bash" data-highlighter="prismjs" data-ext="sh" data-title="sh"><pre><code><span class="line"><span class="token function">sed</span> <span class="token string">&#39;s/^.{3}/&amp;//g&#39;</span> <span class="token function">file</span></span>
<span class="line"></span></code></pre></div><h2 id="_10、awk-数据流处理工具" tabindex="-1"><a class="header-anchor" href="#_10、awk-数据流处理工具"><span>10、awk 数据流处理工具</span></a></h2><p>awk脚本结构</p><div class="language-bash" data-highlighter="prismjs" data-ext="sh" data-title="sh"><pre><code><span class="line"><span class="token function">awk</span> <span class="token string">&#39; BEGIN{ statements } statements2 END{ statements } &#39;</span></span>
<span class="line"></span></code></pre></div><p>工作方式</p><ul><li>1.执行begin中语句块；</li><li>2.从文件或stdin中读入一行，然后执行statements2，重复这个过程，直到文件全部被读取完毕；</li><li>3.执行end语句块；</li></ul><p>print 打印当前行,使用不带参数的print时，会打印当前行;</p><div class="language-bash" data-highlighter="prismjs" data-ext="sh" data-title="sh"><pre><code><span class="line"><span class="token builtin class-name">echo</span> <span class="token parameter variable">-e</span> <span class="token string">&quot;line1 line2&quot;</span><span class="token operator">|</span> <span class="token function">awk</span> <span class="token string">&#39;BEGIN{print &quot;start&quot;} {print } END{ print &quot;End&quot; }&#39;</span></span>
<span class="line"><span class="token comment">#print 以逗号分割时，参数以空格定界;</span></span>
<span class="line"><span class="token builtin class-name">echo</span> <span class="token operator">|</span> <span class="token function">awk</span> <span class="token string">&#39; {var1 = &quot;v1&quot; ; var2 = &quot;V2&quot;; var3=&quot;v3&quot;;</span>
<span class="line">print var1, var2 , var3; }&#39;</span></span>
<span class="line">$<span class="token operator">&gt;</span>v1 V2 v3</span>
<span class="line"><span class="token comment">#使用-拼接符的方式（&quot;&quot;作为拼接符）;</span></span>
<span class="line"><span class="token builtin class-name">echo</span> <span class="token operator">|</span> <span class="token function">awk</span> <span class="token string">&#39; {var1 = &quot;v1&quot; ; var2 = &quot;V2&quot;; var3=&quot;v3&quot;;</span>
<span class="line">print var1&quot;-&quot;var2&quot;-&quot;var3; }&#39;</span></span>
<span class="line">$<span class="token operator">&gt;</span>v1-V2-v3</span>
<span class="line"></span></code></pre></div><p>特殊变量：NR NF 1 $2</p><ul><li>NR:表示记录数量，在执行过程中对应当前行号；</li><li>NF:表示字段数量，在执行过程总对应当前行的字段数；</li><li>$0:这个变量包含执行过程中当前行的文本内容；</li><li>$1:第一个字段的文本内容；</li><li>$2:第二个字段的文本内容；</li></ul><div class="language-bash" data-highlighter="prismjs" data-ext="sh" data-title="sh"><pre><code><span class="line"><span class="token builtin class-name">echo</span> <span class="token parameter variable">-e</span> <span class="token string">&quot;line1 f2 f3 line2 line 3&quot;</span><span class="token operator">|</span> <span class="token function">awk</span> <span class="token string">&#39;{print NR&quot;:&quot;$0&quot;-&quot;$1&quot;-&quot;$2}&#39;</span> </span>
<span class="line"><span class="token comment">#打印每一行的第二和第三个字段</span></span>
<span class="line"><span class="token function">awk</span> <span class="token string">&#39;{print $2, $3}&#39;</span> <span class="token function">file</span> </span>
<span class="line"><span class="token comment">#统计文件的行数：</span></span>
<span class="line"><span class="token function">awk</span> <span class="token string">&#39; END {print NR}&#39;</span> <span class="token function">file</span> </span>
<span class="line"><span class="token comment">#累加每一行的第一个字段：</span></span>
<span class="line"><span class="token builtin class-name">echo</span> <span class="token parameter variable">-e</span> <span class="token string">&quot;1 2 3 4 &quot;</span><span class="token operator">|</span> <span class="token function">awk</span> <span class="token string">&#39;BEGIN{num = 0 ;print &quot;begin&quot;;} {sum += $1;}END {print &quot;==&quot;; print sum }&#39;</span>   </span>
<span class="line"><span class="token comment">#传递外部变量</span></span>
<span class="line"><span class="token assign-left variable">var</span><span class="token operator">=</span><span class="token number">1000</span></span>
<span class="line"><span class="token builtin class-name">echo</span> <span class="token operator">|</span> <span class="token function">awk</span> <span class="token string">&#39;{print vara}&#39;</span> <span class="token assign-left variable">vara</span><span class="token operator">=</span><span class="token variable">$var</span> <span class="token comment">#输入来自stdin</span></span>
<span class="line"><span class="token function">awk</span> <span class="token string">&#39;{print vara}&#39;</span> <span class="token assign-left variable">vara</span><span class="token operator">=</span><span class="token variable">$var</span> <span class="token function">file</span> <span class="token comment"># 输入来自文件</span></span>
<span class="line"></span></code></pre></div><p>用样式对awk处理的行进行过滤</p><div class="language-bash" data-highlighter="prismjs" data-ext="sh" data-title="sh"><pre><code><span class="line"><span class="token function">awk</span> <span class="token string">&#39;NR &lt; 5&#39;</span> <span class="token comment">#行号小于5</span></span>
<span class="line"><span class="token function">awk</span> <span class="token string">&#39;NR==1,NR==4 {print}&#39;</span> <span class="token function">file</span> <span class="token comment">#行号等于1和4的打印出来</span></span>
<span class="line"><span class="token function">awk</span> <span class="token string">&#39;/linux/&#39;</span>  <span class="token comment">#包含linux文本的行（可以用正则表达式来指定，超级强大）</span></span>
<span class="line"><span class="token function">awk</span> <span class="token string">&#39;!/linux/&#39;</span>  <span class="token comment">#不包含linux文本的行</span></span>
<span class="line"></span></code></pre></div><p>设置定界符</p><p>使用-F来设置定界符（默认为空格）</p><div class="language-bash" data-highlighter="prismjs" data-ext="sh" data-title="sh"><pre><code><span class="line"><span class="token function">awk</span> -F: <span class="token string">&#39;{print $NF}&#39;</span>/etc/passwd</span>
<span class="line"></span></code></pre></div><p>读取命令输出</p><p>使用getline，将外部shell命令的输出读入到变量cmdout中；</p><div class="language-bash" data-highlighter="prismjs" data-ext="sh" data-title="sh"><pre><code><span class="line"><span class="token builtin class-name">echo</span> <span class="token operator">|</span> <span class="token function">awk</span> <span class="token string">&#39;{&quot;grep root /etc/passwd&quot; | getline cmdout; print cmdout }&#39;</span></span>
<span class="line"></span></code></pre></div><p>在awk中使用循环</p><div class="language-bash" data-highlighter="prismjs" data-ext="sh" data-title="sh"><pre><code><span class="line"><span class="token keyword">for</span> <span class="token punctuation">(</span>i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span><span class="token number">10</span><span class="token punctuation">;</span>i++<span class="token punctuation">)</span><span class="token punctuation">{</span>print <span class="token variable">$i</span><span class="token punctuation">;</span><span class="token punctuation">}</span></span>
<span class="line"><span class="token keyword">for</span> <span class="token punctuation">(</span>i <span class="token keyword">in</span> array<span class="token punctuation">)</span><span class="token punctuation">{</span>print array<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre></div><p>以逆序的形式打印行：(tac命令的实现）</p><div class="language-bash" data-highlighter="prismjs" data-ext="sh" data-title="sh"><pre><code><span class="line"><span class="token function">seq</span> <span class="token number">9</span><span class="token operator">|</span><span class="token function">awk</span> <span class="token string">&#39;{lifo[NR] = $0; lno=NR}END{ for(;lno&gt;-1;lno--){print lifo[lno];}} &#39;</span></span>
<span class="line"></span></code></pre></div><p>awk实现head、tail命令</p><div class="language-bash" data-highlighter="prismjs" data-ext="sh" data-title="sh"><pre><code><span class="line">head:</span>
<span class="line"> <span class="token function">awk</span> <span class="token string">&#39;NR&lt;=10{print}&#39;</span> filename</span>
<span class="line">tail:</span>
<span class="line">  <span class="token function">awk</span> <span class="token string">&#39;{buffer[NR%10] = $0;} END{for(i=0;i&lt;11;i++){</span>
<span class="line">  print buffer[i %10]} } &#39;</span> filename</span>
<span class="line"></span></code></pre></div><p>打印指定列</p><div class="language-bash" data-highlighter="prismjs" data-ext="sh" data-title="sh"><pre><code><span class="line"><span class="token comment">#awk方式实现：</span></span>
<span class="line"><span class="token function">ls</span> <span class="token parameter variable">-lrt</span> <span class="token operator">|</span> <span class="token function">awk</span> </span>
<span class="line"><span class="token string">&#39;{print $6}&#39;</span></span>
<span class="line"><span class="token comment">#cut方式实现</span></span>
<span class="line"><span class="token function">ls</span> <span class="token parameter variable">-lrt</span> <span class="token operator">|</span> <span class="token function">cut</span> <span class="token parameter variable">-f6</span></span>
<span class="line"></span></code></pre></div><p>打印指定文本区域</p><div class="language-bash" data-highlighter="prismjs" data-ext="sh" data-title="sh"><pre><code><span class="line"><span class="token comment">#确定行号</span></span>
<span class="line"><span class="token function">seq</span> <span class="token number">100</span><span class="token operator">|</span> <span class="token function">awk</span> <span class="token string">&#39;NR==4,NR==6{print}&#39;</span></span>
<span class="line"><span class="token comment">#确定文本</span></span>
<span class="line">打印处于startpattern 和endpattern之间的文本；</span>
<span class="line"><span class="token function">awk</span> <span class="token string">&#39;/start_pattern/, /end_pattern/&#39;</span> filename</span>
<span class="line"><span class="token function">seq</span> <span class="token number">100</span><span class="token operator">|</span> <span class="token function">awk</span> <span class="token string">&#39;/13/,/15/&#39;</span></span>
<span class="line"><span class="token function">cat</span> /etc/passwd<span class="token operator">|</span> <span class="token function">awk</span> <span class="token string">&#39;/mai.*mail/,/news.*news/&#39;</span></span>
<span class="line"></span></code></pre></div><p>awk常用内建函数</p><ul><li>index(string,search_string):返回search_string在string中出现的位置 sub(regex,replacement_str,string):将正则匹配到的第一处内容替换为replacement_str;</li><li>match(regex,string):检查正则表达式是否能够匹配字符串；</li><li>length(string)：返回字符串长度</li></ul><div class="language-bash" data-highlighter="prismjs" data-ext="sh" data-title="sh"><pre><code><span class="line"><span class="token builtin class-name">echo</span> <span class="token operator">|</span> <span class="token function">awk</span> <span class="token string">&#39;{&quot;grep root /etc/passwd&quot; | getline cmdout; print length(cmdout) }&#39;</span></span>
<span class="line"><span class="token comment">#printf 类似c语言中的printf，对输出进行格式化</span></span>
<span class="line"><span class="token function">seq</span> <span class="token number">10</span><span class="token operator">|</span> <span class="token function">awk</span> <span class="token string">&#39;{printf &quot;-&gt;%4s &quot;, $1}&#39;</span>  <span class="token comment">#迭代文件中的行、单词和字符</span></span>
<span class="line"></span></code></pre></div><ol><li>迭代文件中的每一行</li></ol><div class="language-bash" data-highlighter="prismjs" data-ext="sh" data-title="sh"><pre><code><span class="line"><span class="token keyword">while</span> 循环法</span>
<span class="line"><span class="token keyword">while</span> <span class="token builtin class-name">read</span> line<span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">do</span></span>
<span class="line"><span class="token builtin class-name">echo</span> <span class="token variable">$line</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">done</span> <span class="token operator">&lt;</span> file.txt</span>
<span class="line"></span></code></pre></div><p>改成子shell:</p><div class="language-bash" data-highlighter="prismjs" data-ext="sh" data-title="sh"><pre><code><span class="line"><span class="token function">cat</span> file.txt <span class="token operator">|</span> <span class="token punctuation">(</span></span>
<span class="line"><span class="token keyword">while</span> <span class="token builtin class-name">read</span> line<span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">do</span></span>
<span class="line"> <span class="token builtin class-name">echo</span> <span class="token variable">$line</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">done</span></span>
<span class="line"><span class="token punctuation">)</span></span>
<span class="line"></span></code></pre></div><p>awk法：</p><div class="language-bash" data-highlighter="prismjs" data-ext="sh" data-title="sh"><pre><code><span class="line"><span class="token function">cat</span> file.txt<span class="token operator">|</span> <span class="token function">awk</span> <span class="token string">&#39;{print}&#39;</span></span>
<span class="line"></span></code></pre></div><p>2.迭代一行中的每一个单词</p><div class="language-bash" data-highlighter="prismjs" data-ext="sh" data-title="sh"><pre><code><span class="line"><span class="token keyword">for</span> <span class="token for-or-select variable">word</span> <span class="token keyword">in</span> <span class="token variable">$line</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">do</span></span>
<span class="line"><span class="token builtin class-name">echo</span> <span class="token variable">$word</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">done</span></span>
<span class="line"></span></code></pre></div><ol><li>迭代每一个字符{#word}:返回变量word的长度</li></ol><div class="language-bash" data-highlighter="prismjs" data-ext="sh" data-title="sh"><pre><code><span class="line"><span class="token keyword">for</span> <span class="token variable"><span class="token punctuation">((</span>i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>\${#word}<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">))</span></span></span>
<span class="line"><span class="token keyword">do</span></span>
<span class="line"><span class="token builtin class-name">echo</span> $<span class="token punctuation">{</span>word:i:1<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">done</span></span>
<span class="line"></span></code></pre></div><p>作者 | 大CC 来源 | www.cnblogs.com/me15/p/3427319.html</p>`,137)]))}const o=a(t,[["render",l]]),r=JSON.parse('{"path":"/linux-tutor/linux-tips/linux-common-shells.html","title":"linux-shell常用","lang":"zh-CN","frontmatter":{"description":"linux-shell常用 本文将介绍Linux下使用Shell处理文本时最常用的工具：find、grep、xargs、sort、uniq、tr、cut、paste、wc、sed、awk；提供的例子和参数都是最常用和最为实用的；对shell脚本使用的原则是命令单行书写，尽量不要超过2行；如果有更为复杂的任务需求，还是考虑python吧. 1、find ...","head":[["meta",{"property":"og:url","content":"https://yzqdev.github.io/cs-guide/cs-guide/linux-tutor/linux-tips/linux-common-shells.html"}],["meta",{"property":"og:site_name","content":"cs-guide"}],["meta",{"property":"og:title","content":"linux-shell常用"}],["meta",{"property":"og:description","content":"linux-shell常用 本文将介绍Linux下使用Shell处理文本时最常用的工具：find、grep、xargs、sort、uniq、tr、cut、paste、wc、sed、awk；提供的例子和参数都是最常用和最为实用的；对shell脚本使用的原则是命令单行书写，尽量不要超过2行；如果有更为复杂的任务需求，还是考虑python吧. 1、find ..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2022-04-05T13:45:58.000Z"}],["meta",{"property":"article:modified_time","content":"2022-04-05T13:45:58.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"linux-shell常用\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2022-04-05T13:45:58.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"yzqdev\\",\\"url\\":\\"http://www.yzqdev.top\\"}]}"]]},"headers":[{"level":2,"title":"1、find 文件查找","slug":"_1、find-文件查找","link":"#_1、find-文件查找","children":[]},{"level":2,"title":"2、grep 文本搜索","slug":"_2、grep-文本搜索","link":"#_2、grep-文本搜索","children":[]},{"level":2,"title":"3、sort 排序","slug":"_3、sort-排序","link":"#_3、sort-排序","children":[]},{"level":2,"title":"4、uniq 消除重复行","slug":"_4、uniq-消除重复行","link":"#_4、uniq-消除重复行","children":[]},{"level":2,"title":"5、用 tr 进行转换","slug":"_5、用-tr-进行转换","link":"#_5、用-tr-进行转换","children":[]},{"level":2,"title":"6、cut 按列切分文本","slug":"_6、cut-按列切分文本","link":"#_6、cut-按列切分文本","children":[]},{"level":2,"title":"7、paste 按列拼接文本","slug":"_7、paste-按列拼接文本","link":"#_7、paste-按列拼接文本","children":[]},{"level":2,"title":"8、wc 统计行和字符的工具","slug":"_8、wc-统计行和字符的工具","link":"#_8、wc-统计行和字符的工具","children":[]},{"level":2,"title":"9、sed 文本替换利器","slug":"_9、sed-文本替换利器","link":"#_9、sed-文本替换利器","children":[]},{"level":2,"title":"10、awk 数据流处理工具","slug":"_10、awk-数据流处理工具","link":"#_10、awk-数据流处理工具","children":[]}],"git":{"createdTime":1647861419000,"updatedTime":1649166358000,"contributors":[{"name":"yzqdev","username":"yzqdev","email":"yzqdev@outlook.com","commits":3,"url":"https://github.com/yzqdev"}]},"readingTime":{"minutes":8.7,"words":2610},"filePathRelative":"linux-tutor/linux-tips/linux-common-shells.md","localizedDate":"2022年3月21日","autoDesc":true}');export{o as comp,r as data};
