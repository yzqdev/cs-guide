import{_ as s,c as t,a as e,o as n}from"./app-C8DxhDIZ.js";const o={};function p(c,a){return n(),t("div",null,a[0]||(a[0]=[e(`<h1 id="如何测试-private-方法-变量或者内部类" tabindex="-1"><a class="header-anchor" href="#如何测试-private-方法-变量或者内部类"><span>如何测试 private 方法，变量或者内部类</span></a></h1><p>当你需要测试一个遗留的应用程序，且不能更改方法的可见性时，那么，测试私有方法/属性的最好方式就是使用<a href="https://en.wikipedia.org/wiki/Reflection_%28computer_programming%29" target="_blank" rel="noopener noreferrer">反射</a>。</p><p>实际测试时，可以通过一些反射辅助类，设置和获取私有(静态)的变量、调用私有(静态)方法。遵循下面的窍门，你可以很好地处理私有方法和变量的测试。</p><div class="language-java" data-highlighter="prismjs" data-ext="java" data-title="java"><pre><code><span class="line"><span class="token class-name">Method</span> method <span class="token operator">=</span> targetClass<span class="token punctuation">.</span><span class="token function">getDeclaredMethod</span><span class="token punctuation">(</span>methodName<span class="token punctuation">,</span> argClasses<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">method<span class="token punctuation">.</span><span class="token function">setAccessible</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">return</span> method<span class="token punctuation">.</span><span class="token function">invoke</span><span class="token punctuation">(</span>targetObject<span class="token punctuation">,</span> argObjects<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre></div><p>私有变量:</p><div class="language-java" data-highlighter="prismjs" data-ext="java" data-title="java"><pre><code><span class="line"><span class="token class-name">Field</span> field <span class="token operator">=</span> targetClass<span class="token punctuation">.</span><span class="token function">getDeclaredField</span><span class="token punctuation">(</span>fieldName<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">field<span class="token punctuation">.</span><span class="token function">setAccessible</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">field<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span>object<span class="token punctuation">,</span> value<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"></span></code></pre></div><blockquote><p>note：</p><ol><li><code>targetClass.getDeclaredMethod(methodName, argClasses)</code>这个方法能让你获取到私有方法。<code>getDeclaredField</code>让你获取到私有变量</li><li>在对私有变量（方法）进行处理前，需要先<code>setAccessible(true)</code></li></ol></blockquote><p>stackoverflow原址：<a href="http://stackoverflow.com/questions/34571/how-to-test-a-class-that-has-private-methods-fields-or-inner-classes" target="_blank" rel="noopener noreferrer">http://stackoverflow.com/questions/34571/how-to-test-a-class-that-has-private-methods-fields-or-inner-classes</a></p>`,8)]))}const i=s(o,[["render",p]]),r=JSON.parse('{"path":"/cs-tips/java-tip/stackoverflow/how-to-test-a-class-that-has-private-methods-fields-or-inner-classes.html","title":"如何测试 private 方法，变量或者内部类","lang":"zh-CN","frontmatter":{"description":"如何测试 private 方法，变量或者内部类 当你需要测试一个遗留的应用程序，且不能更改方法的可见性时，那么，测试私有方法/属性的最好方式就是使用反射。 实际测试时，可以通过一些反射辅助类，设置和获取私有(静态)的变量、调用私有(静态)方法。遵循下面的窍门，你可以很好地处理私有方法和变量的测试。 私有变量: note： targetClass.get...","head":[["meta",{"property":"og:url","content":"https://yzqdev.github.io/cs-guide/cs-guide/cs-tips/java-tip/stackoverflow/how-to-test-a-class-that-has-private-methods-fields-or-inner-classes.html"}],["meta",{"property":"og:site_name","content":"cs-guide"}],["meta",{"property":"og:title","content":"如何测试 private 方法，变量或者内部类"}],["meta",{"property":"og:description","content":"如何测试 private 方法，变量或者内部类 当你需要测试一个遗留的应用程序，且不能更改方法的可见性时，那么，测试私有方法/属性的最好方式就是使用反射。 实际测试时，可以通过一些反射辅助类，设置和获取私有(静态)的变量、调用私有(静态)方法。遵循下面的窍门，你可以很好地处理私有方法和变量的测试。 私有变量: note： targetClass.get..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-03-15T01:56:32.000Z"}],["meta",{"property":"article:modified_time","content":"2024-03-15T01:56:32.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"如何测试 private 方法，变量或者内部类\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2024-03-15T01:56:32.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"yzqdev\\",\\"url\\":\\"http://www.yzqdev.top\\"}]}"]]},"headers":[],"git":{"createdTime":1684989246000,"updatedTime":1710467792000,"contributors":[{"name":"yzqdev","username":"yzqdev","email":"yzqdev@outlook.com","commits":2,"url":"https://github.com/yzqdev"}]},"readingTime":{"minutes":0.73,"words":219},"filePathRelative":"cs-tips/java-tip/stackoverflow/how-to-test-a-class-that-has-private-methods-fields-or-inner-classes.md","localizedDate":"2023年5月25日","autoDesc":true}');export{i as comp,r as data};
