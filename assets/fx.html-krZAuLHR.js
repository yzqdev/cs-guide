import{_ as s,c as a,a as p,o as t}from"./app-C8DxhDIZ.js";const e={};function o(c,n){return t(),a("div",null,n[0]||(n[0]=[p(`<h1 id="函数" tabindex="-1"><a class="header-anchor" href="#函数"><span>函数</span></a></h1><p>函数这个章节内容有点多，对于新手，也有些不好理解。建议各位多看几篇，多敲几次代码。</p><p><img src="http://twowaterimage.oss-cn-beijing.aliyuncs.com/2019-10-07-函数.png" alt=""></p><blockquote><p>一、Python 自定义函数的基本步骤 #</p></blockquote><h2 id="_1、什么是函数" tabindex="-1"><a class="header-anchor" href="#_1、什么是函数"><span>1、什么是函数</span></a></h2><p>函数，其实我们一开始学 Python 的时候就接触过。</p><p>不过我们使用的大多数都是 Python 的内置函数。</p><p>比如基本每个章节都会出现的 <code>print()</code> 函数。</p><p>而现在，我们主要学习的是自定义函数。</p><p><strong>各位有没有想过为什么需要函数呢？</strong></p><p>如果要想回答这个问题，我们需要先了解函数是什么？</p><p>函数就是组织好的，可重复使用的，用来实现单一，或相关联功能的代码段。</p><p>没错，函数其实就是把代码抽象出来的代码段。</p><p>那为什么要抽象出来呢？</p><p><strong>方便我们使用，方便我们重复使用。</strong></p><p><strong>函数的本质就是我们把一些数据喂给函数，让他内部消化，然后吐出你想要的东西，至于他怎么消化的，我们不需要知道，它内部解决。</strong></p><p>怎么理解这句话呢？</p><p>举个例子，好比每次用到的 print 函数，我们都知道这个函数的作用是可以把我们的数据输出到控制台，让我们看到。所以 <code>print(&#39;两点水&#39;)</code> , 我们想打印 <code>两点水</code> 出来，就把 <code>两点水</code> 这个数据喂给 <code>print</code> 函数，然后他就直接把结果打印到控制台上了。</p><h2 id="_2、怎么自定义函数" tabindex="-1"><a class="header-anchor" href="#_2、怎么自定义函数"><span>2、怎么自定义函数</span></a></h2><p>怎么自定义函数？</p><p>要知道怎么定义函数，就要知道函数的组成部分是怎样的。</p><div class="language-python" data-highlighter="prismjs" data-ext="py" data-title="py"><pre><code><span class="line"><span class="token keyword">def</span> 函数名<span class="token punctuation">(</span>参数<span class="token number">1</span>，参数<span class="token number">2.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>参数n<span class="token punctuation">)</span><span class="token punctuation">:</span></span>
<span class="line">    函数体</span>
<span class="line">    <span class="token keyword">return</span> 语句</span>
<span class="line"></span></code></pre></div><p>这就是 Python 函数的组成部分。</p><p>所以自定义函数，基本有以下规则步骤：</p><ul><li>函数代码块以 def 关键词开头，后接函数标识符名称和圆括号()</li><li>任何传入参数和自变量必须放在圆括号中间。圆括号之间可以用于定义参数</li><li>函数的第一行语句可以选择性地使用文档字符串（用于存放函数说明）</li><li>函数内容以冒号起始，并且缩进</li><li>return [表达式] 结束函数，选择性地返回一个值给调用方。不带表达式的 return 相当于返回 None。</li></ul><p>语法示例：</p><div class="language-python" data-highlighter="prismjs" data-ext="py" data-title="py"><pre><code><span class="line"><span class="token keyword">def</span> <span class="token function">functionname</span><span class="token punctuation">(</span> parameters <span class="token punctuation">)</span><span class="token punctuation">:</span></span>
<span class="line">   <span class="token string">&quot;函数_文档字符串&quot;</span></span>
<span class="line">   function_suite</span>
<span class="line">   <span class="token keyword">return</span> <span class="token punctuation">[</span>expression<span class="token punctuation">]</span></span>
<span class="line"></span></code></pre></div><p>实例：</p><ol><li>def 定义一个函数，给定一个函数名 sum</li><li>声明两个参数 num1 和 num2</li><li>函数的第一行语句进行函数说明：两数之和</li><li>最终 return 语句结束函数，并返回两数之和</li></ol><div class="language-python" data-highlighter="prismjs" data-ext="py" data-title="py"><pre><code><span class="line"><span class="token keyword">def</span> <span class="token function">sum</span><span class="token punctuation">(</span>num1<span class="token punctuation">,</span>num2<span class="token punctuation">)</span><span class="token punctuation">:</span></span>
<span class="line"> <span class="token string">&quot;两数之和&quot;</span></span>
<span class="line"> <span class="token keyword">return</span> num1<span class="token operator">+</span>num2</span>
<span class="line"></span>
<span class="line"><span class="token comment"># 调用函数</span></span>
<span class="line"><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token builtin">sum</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">6</span><span class="token punctuation">)</span><span class="token punctuation">)</span></span>
<span class="line"></span></code></pre></div><p>输出结果：</p><div class="language-python" data-highlighter="prismjs" data-ext="py" data-title="py"><pre><code><span class="line"><span class="token number">11</span></span>
<span class="line"></span></code></pre></div><h1 id="二、函数返回值" tabindex="-1"><a class="header-anchor" href="#二、函数返回值"><span>二、函数返回值</span></a></h1><p>通过上面的学习，可以知道通过 return [表达式] 语句用于退出函数，选择性地向调用方返回一个表达式。</p><p><strong>不带参数值的 return 语句返回 None。</strong></p><p>具体示例：</p><div class="language-python" data-highlighter="prismjs" data-ext="py" data-title="py"><pre><code><span class="line"><span class="token comment"># -*- coding: UTF-8 -*-</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">def</span> <span class="token function">sum</span><span class="token punctuation">(</span>num1<span class="token punctuation">,</span>num2<span class="token punctuation">)</span><span class="token punctuation">:</span></span>
<span class="line"> <span class="token comment"># 两数之和</span></span>
<span class="line"> <span class="token keyword">if</span> <span class="token keyword">not</span> <span class="token punctuation">(</span><span class="token builtin">isinstance</span> <span class="token punctuation">(</span>num1<span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token builtin">int</span> <span class="token punctuation">,</span><span class="token builtin">float</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">and</span> <span class="token builtin">isinstance</span> <span class="token punctuation">(</span>num2<span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token builtin">int</span> <span class="token punctuation">,</span><span class="token builtin">float</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">:</span></span>
<span class="line">  <span class="token keyword">raise</span> TypeError<span class="token punctuation">(</span><span class="token string">&#39;参数类型错误&#39;</span><span class="token punctuation">)</span></span>
<span class="line"> <span class="token keyword">return</span> num1<span class="token operator">+</span>num2</span>
<span class="line"></span>
<span class="line"><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token builtin">sum</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span></span>
<span class="line"></span></code></pre></div><p>返回结果：</p><div class="language-txt" data-highlighter="prismjs" data-ext="txt" data-title="txt"><pre><code><span class="line">3</span>
<span class="line"></span></code></pre></div><p>这个示例，还通过内置函数<code>isinstance()</code>进行数据类型检查，检查调用函数时参数是否是整形和浮点型。如果参数类型不对，会报错，提示 <code>参数类型错误</code>,如图：</p><p><img src="http://upload-images.jianshu.io/upload_images/2136918-cfe5907d67e912d8?imageMogr2/auto-orient/strip|imageView2/2/w/1240" alt="检查函数参数是否正确"></p><p>当然，函数也可以返回多个值，具体实例如下：</p><div class="language-python" data-highlighter="prismjs" data-ext="py" data-title="py"><pre><code><span class="line"><span class="token comment"># -*- coding: UTF-8 -*-</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">def</span>  <span class="token function">division</span> <span class="token punctuation">(</span> num1<span class="token punctuation">,</span> num2 <span class="token punctuation">)</span><span class="token punctuation">:</span></span>
<span class="line"> <span class="token comment"># 求商与余数</span></span>
<span class="line">         a <span class="token operator">=</span> num1 <span class="token operator">%</span> num2</span>
<span class="line">         b <span class="token operator">=</span> <span class="token punctuation">(</span>num1<span class="token operator">-</span>a<span class="token punctuation">)</span> <span class="token operator">/</span> num2</span>
<span class="line">         <span class="token keyword">return</span> b <span class="token punctuation">,</span> a</span>
<span class="line"></span>
<span class="line">num1 <span class="token punctuation">,</span> num2 <span class="token operator">=</span> division<span class="token punctuation">(</span><span class="token number">9</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">)</span></span>
<span class="line">tuple1 <span class="token operator">=</span> division<span class="token punctuation">(</span><span class="token number">9</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">)</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">print</span> <span class="token punctuation">(</span>num1<span class="token punctuation">,</span>num2<span class="token punctuation">)</span></span>
<span class="line"><span class="token keyword">print</span> <span class="token punctuation">(</span>tuple1<span class="token punctuation">)</span></span>
<span class="line"></span></code></pre></div><p>输出的值：</p><div class="language-txt" data-highlighter="prismjs" data-ext="txt" data-title="txt"><pre><code><span class="line">2.0 1</span>
<span class="line">(2.0, 1)</span>
<span class="line"></span></code></pre></div><p>认真观察就可以发现，尽管从第一个输出值来看，返回了多个值，实际上是先创建了一个元组然后返回的。</p><p>回忆一下，元组是可以直接用逗号来创建的，观察例子中的 ruturn ，可以发现实际上我们使用的是逗号来生成一个元组。</p><p>Python 语言中的函数返回值可以是多个，而其他语言都不行，这是Python 相比其他语言的简便和灵活之处。</p><p><strong>Python 一次接受多个返回值的数据类型就是元组。</strong></p><p>不知道此刻你还记不记得元组的相关知识，如果不记得，建议现在立刻写几个例子回忆一下，比如如何获取元组的第一个元素出来。</p><h1 id="三、函数的参数" tabindex="-1"><a class="header-anchor" href="#三、函数的参数"><span>三、函数的参数</span></a></h1><h2 id="_1、函数的参数类型" tabindex="-1"><a class="header-anchor" href="#_1、函数的参数类型"><span>1、函数的参数类型</span></a></h2><p>设置与传递参数是函数的重点，而 Python 的函数对参数的支持非常的灵活。</p><p>主要的参数类型有：默认参数、关键字参数（位置参数）、不定长参数。</p><p>下面我们将一一了解这几种参数。</p><h2 id="_2、默认参数" tabindex="-1"><a class="header-anchor" href="#_2、默认参数"><span>2、默认参数</span></a></h2><p>有时候，我们自定义的函数中，如果调用的时候没有设置参数，需要给个默认值，这时候就需要用到默认值参数了。</p><p>默认参数，只要在构造函数参数的时候，给参数赋值就可以了</p><p>例如：</p><div class="language-python" data-highlighter="prismjs" data-ext="py" data-title="py"><pre><code><span class="line"><span class="token comment"># -*- coding: UTF-8 -*-</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">def</span> <span class="token function">print_user_info</span><span class="token punctuation">(</span> name <span class="token punctuation">,</span> age <span class="token punctuation">,</span> sex <span class="token operator">=</span> <span class="token string">&#39;男&#39;</span> <span class="token punctuation">)</span><span class="token punctuation">:</span></span>
<span class="line">    <span class="token comment"># 打印用户信息</span></span>
<span class="line">    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&#39;昵称：{}&#39;</span><span class="token punctuation">.</span><span class="token builtin">format</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span> <span class="token punctuation">,</span> end <span class="token operator">=</span> <span class="token string">&#39; &#39;</span><span class="token punctuation">)</span></span>
<span class="line">    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&#39;年龄：{}&#39;</span><span class="token punctuation">.</span><span class="token builtin">format</span><span class="token punctuation">(</span>age<span class="token punctuation">)</span> <span class="token punctuation">,</span> end <span class="token operator">=</span> <span class="token string">&#39; &#39;</span><span class="token punctuation">)</span></span>
<span class="line">    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&#39;性别：{}&#39;</span><span class="token punctuation">.</span><span class="token builtin">format</span><span class="token punctuation">(</span>sex<span class="token punctuation">)</span><span class="token punctuation">)</span></span>
<span class="line">    <span class="token keyword">return</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token comment"># 调用 print_user_info 函数</span></span>
<span class="line"></span>
<span class="line">print_user_info<span class="token punctuation">(</span> <span class="token string">&#39;两点水&#39;</span> <span class="token punctuation">,</span> <span class="token number">18</span> <span class="token punctuation">,</span> <span class="token string">&#39;女&#39;</span><span class="token punctuation">)</span></span>
<span class="line">print_user_info<span class="token punctuation">(</span> <span class="token string">&#39;三点水&#39;</span> <span class="token punctuation">,</span> <span class="token number">25</span> <span class="token punctuation">)</span></span>
<span class="line"></span></code></pre></div><p>输出结果：</p><div class="language-txt" data-highlighter="prismjs" data-ext="txt" data-title="txt"><pre><code><span class="line">昵称：两点水 年龄：18 性别：女</span>
<span class="line">昵称：三点水 年龄：25 性别：男</span>
<span class="line"></span></code></pre></div><p>从输出结果可以看到，当你设置了默认参数的时候，在调用函数的时候，不传该参数，就会使用默认值。</p><p>但是这里需要注意的一点是：<strong>只有在形参表末尾的那些参数可以有默认参数值</strong>，也就是说你不能在声明函数形参的时候，先声明有默认值的形参而后声明没有默认值的形参。</p><p>这是因为赋给形参的值是根据位置而赋值的。例如，def func(a, b=1) 是有效的，但是 def func(a=1, b) 是 无效 的。</p><p>默认值参数就这样结束了吗？</p><p>还没有的，细想一下，如果参数中是一个可修改的容器比如一个 lsit （列表）或者 dict （字典），那么我们使用什么来作为默认值呢？</p><p>我们可以使用 None 作为默认值。就像下面这个例子一样：</p><div class="language-python" data-highlighter="prismjs" data-ext="py" data-title="py"><pre><code><span class="line"><span class="token comment"># 如果 b 是一个 list ，可以使用 None 作为默认值</span></span>
<span class="line"><span class="token keyword">def</span> <span class="token function">print_info</span><span class="token punctuation">(</span> a <span class="token punctuation">,</span> b <span class="token operator">=</span> <span class="token boolean">None</span> <span class="token punctuation">)</span><span class="token punctuation">:</span></span>
<span class="line">    <span class="token keyword">if</span> b <span class="token keyword">is</span> <span class="token boolean">None</span> <span class="token punctuation">:</span></span>
<span class="line">        b<span class="token operator">=</span><span class="token punctuation">[</span><span class="token punctuation">]</span></span>
<span class="line">    <span class="token keyword">return</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre></div><p>认真看下例子，会不会有这样的疑问呢？在参数中我们直接 <code>b=[]</code> 不就行了吗？</p><p>也就是写成下面这个样子：</p><div class="language-python" data-highlighter="prismjs" data-ext="py" data-title="py"><pre><code><span class="line"><span class="token keyword">def</span> <span class="token function">print_info</span><span class="token punctuation">(</span> a <span class="token punctuation">,</span> b <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token punctuation">)</span><span class="token punctuation">:</span></span>
<span class="line">    <span class="token keyword">return</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre></div><p>对不对呢？</p><p>运行一下也没发现错误啊，可以这样写吗？</p><p>这里需要特别注意的一点：<strong>默认参数的值是不可变的对象，比如None、True、False、数字或字符串</strong>，如果你像上面的那样操作，当默认值在其他地方被修改后你将会遇到各种麻烦。</p><p>这些修改会影响到下次调用这个函数时的默认值。</p><p>示例如下：</p><div class="language-python" data-highlighter="prismjs" data-ext="py" data-title="py"><pre><code><span class="line"><span class="token comment"># -*- coding: UTF-8 -*-</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">def</span> <span class="token function">print_info</span><span class="token punctuation">(</span> a <span class="token punctuation">,</span> b <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token punctuation">)</span><span class="token punctuation">:</span></span>
<span class="line">    <span class="token keyword">print</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span></span>
<span class="line">    <span class="token keyword">return</span> b <span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">result <span class="token operator">=</span> print_info<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span></span>
<span class="line"></span>
<span class="line">result<span class="token punctuation">.</span>append<span class="token punctuation">(</span><span class="token string">&#39;error&#39;</span><span class="token punctuation">)</span></span>
<span class="line"></span>
<span class="line">print_info<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span></span>
<span class="line"></span></code></pre></div><p>输出的结果：</p><div class="language-txt" data-highlighter="prismjs" data-ext="txt" data-title="txt"><pre><code><span class="line">[]</span>
<span class="line">[&#39;error&#39;]</span>
<span class="line"></span></code></pre></div><p>认真观察，你会发现第二次输出的值根本不是你想要的，因此切忌不能这样操作。</p><p>还有一点，有时候我就是不想要默认值啊，只是想单单判断默认参数有没有值传递进来，那该怎么办？</p><p>我们可以这样做：</p><div class="language-python" data-highlighter="prismjs" data-ext="py" data-title="py"><pre><code><span class="line">_no_value <span class="token operator">=</span><span class="token builtin">object</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">def</span> <span class="token function">print_info</span><span class="token punctuation">(</span> a <span class="token punctuation">,</span> b <span class="token operator">=</span> _no_value <span class="token punctuation">)</span><span class="token punctuation">:</span></span>
<span class="line">    <span class="token keyword">if</span> b <span class="token keyword">is</span> _no_value <span class="token punctuation">:</span></span>
<span class="line">        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&#39;b 没有赋值&#39;</span><span class="token punctuation">)</span></span>
<span class="line">    <span class="token keyword">return</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre></div><p>这里的 <code>object</code> 是 python 中所有类的基类。 你可以创建 <code>object</code> 类的实例，但是这些实例没什么实际用处，因为它并没有任何有用的方法， 也没有任何实例数据(因为它没有任何的实例字典，你甚至都不能设置任何属性值)。 你唯一能做的就是测试同一性。也正好利用这个特性，来判断是否有值输入。</p><h2 id="_3、关键字参数-位置参数" tabindex="-1"><a class="header-anchor" href="#_3、关键字参数-位置参数"><span>3、关键字参数（位置参数）</span></a></h2><p>一般情况下，我们需要给函数传参的时候，是要按顺序来的，如果不对应顺序，就会传错值。</p><p>不过在 Python 中，可以通过参数名来给函数传递参数，而不用关心参数列表定义时的顺序，这被称之为关键字参数。</p><p>使用关键参数有两个优势 ：</p><ul><li><p>由于我们不必担心参数的顺序，使用函数变得更加简单了。</p></li><li><p>假设其他参数都有默认值，我们可以只给我们想要的那些参数赋值</p></li></ul><p>具体看例子：</p><div class="language-python" data-highlighter="prismjs" data-ext="py" data-title="py"><pre><code><span class="line"><span class="token comment"># -*- coding: UTF-8 -*-</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">def</span> <span class="token function">print_user_info</span><span class="token punctuation">(</span> name <span class="token punctuation">,</span>  age  <span class="token punctuation">,</span> sex <span class="token operator">=</span> <span class="token string">&#39;男&#39;</span> <span class="token punctuation">)</span><span class="token punctuation">:</span></span>
<span class="line">    <span class="token comment"># 打印用户信息</span></span>
<span class="line">    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&#39;昵称：{}&#39;</span><span class="token punctuation">.</span><span class="token builtin">format</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span> <span class="token punctuation">,</span> end <span class="token operator">=</span> <span class="token string">&#39; &#39;</span><span class="token punctuation">)</span></span>
<span class="line">    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&#39;年龄：{}&#39;</span><span class="token punctuation">.</span><span class="token builtin">format</span><span class="token punctuation">(</span>age<span class="token punctuation">)</span> <span class="token punctuation">,</span> end <span class="token operator">=</span> <span class="token string">&#39; &#39;</span><span class="token punctuation">)</span></span>
<span class="line">    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&#39;性别：{}&#39;</span><span class="token punctuation">.</span><span class="token builtin">format</span><span class="token punctuation">(</span>sex<span class="token punctuation">)</span><span class="token punctuation">)</span></span>
<span class="line">    <span class="token keyword">return</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token comment"># 调用 print_user_info 函数</span></span>
<span class="line"></span>
<span class="line">print_user_info<span class="token punctuation">(</span> name <span class="token operator">=</span> <span class="token string">&#39;两点水&#39;</span> <span class="token punctuation">,</span>age <span class="token operator">=</span> <span class="token number">18</span> <span class="token punctuation">,</span> sex <span class="token operator">=</span> <span class="token string">&#39;女&#39;</span><span class="token punctuation">)</span></span>
<span class="line">print_user_info<span class="token punctuation">(</span> name <span class="token operator">=</span> <span class="token string">&#39;两点水&#39;</span> <span class="token punctuation">,</span>sex <span class="token operator">=</span> <span class="token string">&#39;女&#39;</span><span class="token punctuation">,</span> age <span class="token operator">=</span> <span class="token number">18</span> <span class="token punctuation">)</span></span>
<span class="line"></span>
<span class="line"></span></code></pre></div><p>输出的值：</p><div class="language-txt" data-highlighter="prismjs" data-ext="txt" data-title="txt"><pre><code><span class="line">昵称：两点水 年龄：18 性别：女</span>
<span class="line">昵称：两点水 年龄：18 性别：女</span>
<span class="line"></span></code></pre></div><h2 id="_4、不定长参数" tabindex="-1"><a class="header-anchor" href="#_4、不定长参数"><span>4、不定长参数</span></a></h2><p>或许有些时候，我们在设计函数的时候，我们有时候无法确定传入的参数个数。</p><p>那么我们就可以使用不定长参数。</p><p>Python 提供了一种元组的方式来接受没有直接定义的参数。这种方式在参数前边加星号 <code>*</code> 。</p><p>如果在函数调用时没有指定参数，它就是一个空元组。我们也可以不向函数传递未命名的变量。</p><p>例如：</p><div class="language-python" data-highlighter="prismjs" data-ext="py" data-title="py"><pre><code><span class="line"><span class="token comment"># -*- coding: UTF-8 -*-</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">def</span> <span class="token function">print_user_info</span><span class="token punctuation">(</span> name <span class="token punctuation">,</span>  age  <span class="token punctuation">,</span> sex <span class="token operator">=</span> <span class="token string">&#39;男&#39;</span> <span class="token punctuation">,</span> <span class="token operator">*</span> hobby<span class="token punctuation">)</span><span class="token punctuation">:</span></span>
<span class="line">    <span class="token comment"># 打印用户信息</span></span>
<span class="line">    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&#39;昵称：{}&#39;</span><span class="token punctuation">.</span><span class="token builtin">format</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span> <span class="token punctuation">,</span> end <span class="token operator">=</span> <span class="token string">&#39; &#39;</span><span class="token punctuation">)</span></span>
<span class="line">    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&#39;年龄：{}&#39;</span><span class="token punctuation">.</span><span class="token builtin">format</span><span class="token punctuation">(</span>age<span class="token punctuation">)</span> <span class="token punctuation">,</span> end <span class="token operator">=</span> <span class="token string">&#39; &#39;</span><span class="token punctuation">)</span></span>
<span class="line">    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&#39;性别：{}&#39;</span><span class="token punctuation">.</span><span class="token builtin">format</span><span class="token punctuation">(</span>sex<span class="token punctuation">)</span> <span class="token punctuation">,</span>end <span class="token operator">=</span> <span class="token string">&#39; &#39;</span> <span class="token punctuation">)</span></span>
<span class="line">    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&#39;爱好：{}&#39;</span><span class="token punctuation">.</span><span class="token builtin">format</span><span class="token punctuation">(</span>hobby<span class="token punctuation">)</span><span class="token punctuation">)</span></span>
<span class="line">    <span class="token keyword">return</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token comment"># 调用 print_user_info 函数</span></span>
<span class="line">print_user_info<span class="token punctuation">(</span> <span class="token string">&#39;两点水&#39;</span> <span class="token punctuation">,</span><span class="token number">18</span> <span class="token punctuation">,</span> <span class="token string">&#39;女&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;打篮球&#39;</span><span class="token punctuation">,</span><span class="token string">&#39;打羽毛球&#39;</span><span class="token punctuation">,</span><span class="token string">&#39;跑步&#39;</span><span class="token punctuation">)</span></span>
<span class="line"></span>
<span class="line"></span></code></pre></div><p>输出的结果：</p><div class="language-python" data-highlighter="prismjs" data-ext="py" data-title="py"><pre><code><span class="line">昵称：两点水 年龄：<span class="token number">18</span> 性别：女 爱好：<span class="token punctuation">(</span><span class="token string">&#39;打篮球&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;打羽毛球&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;跑步&#39;</span><span class="token punctuation">)</span></span>
<span class="line"></span></code></pre></div><p>通过输出的结果可以知道，<code>*hobby</code>是可变参数，且 hobby 其实就是一个 tuple （元祖）</p><p>可变长参数也支持关键字参数（位置参数），没有被定义的关键参数会被放到一个字典里。</p><p>这种方式即是在参数前边加 <code>**</code>,更改上面的示例如下：</p><div class="language-python" data-highlighter="prismjs" data-ext="py" data-title="py"><pre><code><span class="line"><span class="token comment"># -*- coding: UTF-8 -*-</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">def</span> <span class="token function">print_user_info</span><span class="token punctuation">(</span> name <span class="token punctuation">,</span>  age  <span class="token punctuation">,</span> sex <span class="token operator">=</span> <span class="token string">&#39;男&#39;</span> <span class="token punctuation">,</span> <span class="token operator">**</span> hobby <span class="token punctuation">)</span><span class="token punctuation">:</span></span>
<span class="line">    <span class="token comment"># 打印用户信息</span></span>
<span class="line">    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&#39;昵称：{}&#39;</span><span class="token punctuation">.</span><span class="token builtin">format</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span> <span class="token punctuation">,</span> end <span class="token operator">=</span> <span class="token string">&#39; &#39;</span><span class="token punctuation">)</span></span>
<span class="line">    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&#39;年龄：{}&#39;</span><span class="token punctuation">.</span><span class="token builtin">format</span><span class="token punctuation">(</span>age<span class="token punctuation">)</span> <span class="token punctuation">,</span> end <span class="token operator">=</span> <span class="token string">&#39; &#39;</span><span class="token punctuation">)</span></span>
<span class="line">    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&#39;性别：{}&#39;</span><span class="token punctuation">.</span><span class="token builtin">format</span><span class="token punctuation">(</span>sex<span class="token punctuation">)</span> <span class="token punctuation">,</span>end <span class="token operator">=</span> <span class="token string">&#39; &#39;</span> <span class="token punctuation">)</span></span>
<span class="line">    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&#39;爱好：{}&#39;</span><span class="token punctuation">.</span><span class="token builtin">format</span><span class="token punctuation">(</span>hobby<span class="token punctuation">)</span><span class="token punctuation">)</span></span>
<span class="line">    <span class="token keyword">return</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token comment"># 调用 print_user_info 函数</span></span>
<span class="line">print_user_info<span class="token punctuation">(</span> name <span class="token operator">=</span> <span class="token string">&#39;两点水&#39;</span> <span class="token punctuation">,</span> age <span class="token operator">=</span> <span class="token number">18</span> <span class="token punctuation">,</span> sex <span class="token operator">=</span> <span class="token string">&#39;女&#39;</span><span class="token punctuation">,</span> hobby <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token string">&#39;打篮球&#39;</span><span class="token punctuation">,</span><span class="token string">&#39;打羽毛球&#39;</span><span class="token punctuation">,</span><span class="token string">&#39;跑步&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span></span>
<span class="line"></span>
<span class="line"></span></code></pre></div><p>输出的结果：</p><div class="language-txt" data-highlighter="prismjs" data-ext="txt" data-title="txt"><pre><code><span class="line">昵称：两点水 年龄：18 性别：女 爱好：{&#39;hobby&#39;: (&#39;打篮球&#39;, &#39;打羽毛球&#39;, &#39;跑步&#39;)} </span>
<span class="line"></span></code></pre></div><p>通过对比上面的例子和这个例子，可以知道，<code>*hobby</code>是可变参数，且 hobby其实就是一个 tuple （元祖），<code>**hobby</code>是关键字参数，且 hobby 就是一个 dict （字典）</p><h2 id="_5、只接受关键字参数" tabindex="-1"><a class="header-anchor" href="#_5、只接受关键字参数"><span>5、只接受关键字参数</span></a></h2><p>关键字参数使用起来简单，不容易参数出错，那么有些时候，我们定义的函数希望某些参数强制使用关键字参数传递，这时候该怎么办呢？</p><p>将强制关键字参数放到某个<code>*</code>参数或者单个<code>*</code>后面就能达到这种效果,比如：</p><div class="language-python line-numbers-mode" data-highlighter="prismjs" data-ext="py" data-title="py"><pre><code><span class="line"><span class="token comment"># -*- coding: UTF-8 -*-</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">def</span> <span class="token function">print_user_info</span><span class="token punctuation">(</span> name <span class="token punctuation">,</span> <span class="token operator">*</span><span class="token punctuation">,</span> age  <span class="token punctuation">,</span> sex <span class="token operator">=</span> <span class="token string">&#39;男&#39;</span> <span class="token punctuation">)</span><span class="token punctuation">:</span></span>
<span class="line">    <span class="token comment"># 打印用户信息</span></span>
<span class="line">    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&#39;昵称：{}&#39;</span><span class="token punctuation">.</span><span class="token builtin">format</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span> <span class="token punctuation">,</span> end <span class="token operator">=</span> <span class="token string">&#39; &#39;</span><span class="token punctuation">)</span></span>
<span class="line">    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&#39;年龄：{}&#39;</span><span class="token punctuation">.</span><span class="token builtin">format</span><span class="token punctuation">(</span>age<span class="token punctuation">)</span> <span class="token punctuation">,</span> end <span class="token operator">=</span> <span class="token string">&#39; &#39;</span><span class="token punctuation">)</span></span>
<span class="line">    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&#39;性别：{}&#39;</span><span class="token punctuation">.</span><span class="token builtin">format</span><span class="token punctuation">(</span>sex<span class="token punctuation">)</span><span class="token punctuation">)</span></span>
<span class="line">    <span class="token keyword">return</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token comment"># 调用 print_user_info 函数</span></span>
<span class="line">print_user_info<span class="token punctuation">(</span> name <span class="token operator">=</span> <span class="token string">&#39;两点水&#39;</span> <span class="token punctuation">,</span>age <span class="token operator">=</span> <span class="token number">18</span> <span class="token punctuation">,</span> sex <span class="token operator">=</span> <span class="token string">&#39;女&#39;</span> <span class="token punctuation">)</span></span>
<span class="line"></span>
<span class="line"><span class="token comment"># 这种写法会报错，因为 age ，sex 这两个参数强制使用关键字参数</span></span>
<span class="line"><span class="token comment">#print_user_info( &#39;两点水&#39; , 18 , &#39;女&#39; )</span></span>
<span class="line">print_user_info<span class="token punctuation">(</span><span class="token string">&#39;两点水&#39;</span><span class="token punctuation">,</span>age<span class="token operator">=</span><span class="token string">&#39;22&#39;</span><span class="token punctuation">,</span>sex<span class="token operator">=</span><span class="token string">&#39;男&#39;</span><span class="token punctuation">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>通过例子可以看，如果 <code>age</code> , <code>sex</code> 不使用关键字参数是会报错的。</p><p>很多情况下，使用强制关键字参数会比使用位置参数表意更加清晰，程序也更加具有可读性。使用强制关键字参数也会比使用 <code>**kw</code> 参数更好且强制关键字参数在一些更高级场合同样也很有用。</p><h1 id="四、函数传值问题" tabindex="-1"><a class="header-anchor" href="#四、函数传值问题"><span>四、函数传值问题</span></a></h1><p>先看一个例子：</p><div class="language-python" data-highlighter="prismjs" data-ext="py" data-title="py"><pre><code><span class="line"><span class="token comment"># -*- coding: UTF-8 -*-</span></span>
<span class="line"><span class="token keyword">def</span> <span class="token function">chagne_number</span><span class="token punctuation">(</span> b <span class="token punctuation">)</span><span class="token punctuation">:</span></span>
<span class="line">    b <span class="token operator">=</span> <span class="token number">1000</span></span>
<span class="line"></span>
<span class="line">b <span class="token operator">=</span> <span class="token number">1</span></span>
<span class="line">chagne_number<span class="token punctuation">(</span>b<span class="token punctuation">)</span></span>
<span class="line"><span class="token keyword">print</span><span class="token punctuation">(</span> b <span class="token punctuation">)</span></span>
<span class="line"></span></code></pre></div><p>最后输出的结果为：</p><div class="language-txt" data-highlighter="prismjs" data-ext="txt" data-title="txt"><pre><code><span class="line">1</span>
<span class="line"></span></code></pre></div><p>先看看运行的结果？</p><p>想一下为什么打印的结果是 1 ，而不是 1000 ？</p><p>其实把问题归根结底就是，为什么通过函数 <code>chagne_number</code> 没有更改到 b 的值？</p><p>这个问题很多编程语言都会讲到，原理解释也是差不多的。</p><p>这里主要是函数参数的传递中，传递的是类型对象，之前也介绍了 Python 中基本的数据类型等。而这些类型对象可以分为可更改类型和不可更改的类型</p><p><strong>在 Python 中，字符串，整形，浮点型，tuple 是不可更改的对象，而 list ， dict 等是可以更改的对象。</strong></p><p>例如：</p><p><strong>不可更改的类型</strong>：变量赋值 <code>a = 1</code>，其实就是生成一个整形对象 1 ，然后变量 a 指向 1，当 <code>a = 1000</code> 其实就是再生成一个整形对象 1000，然后改变 a 的指向，不再指向整形对象 1 ，而是指向 1000，最后 1 会被丢弃</p><p><strong>可更改的类型</strong>：变量赋值 <code>a = [1,2,3,4,5,6]</code> ，就是生成一个对象 list ，list 里面有 6 个元素，而变量 a 指向 list ，<code>a[2] = 5</code>则是将 list a 的第三个元素值更改,这里跟上面是不同的，并不是将 a 重新指向，而是直接修改 list 中的元素值。</p><p><img src="http://upload-images.jianshu.io/upload_images/2136918-31b1031d75e1cec9?imageMogr2/auto-orient/strip|imageView2/2/w/1240" alt="指向问题"></p><p>这也将影响到函数中参数的传递了：</p><p><strong>不可更改的类型</strong>：类似 c++ 的值传递，如 整数、字符串、元组。如fun（a），传递的只是 a 的值，没有影响 a 对象本身。比如在 fun（a）内部修改 a 的值，只是修改另一个复制的对象，不会影响 a 本身。</p><p><strong>可更改的类型</strong>：类似 c++ 的引用传递，如 列表，字典。如 fun（a），则是将 a 真正的传过去，修改后 fun 外部的 a 也会受影响</p><p>因此，在一开始的例子中，<code>b = 1</code>,创建了一个整形对象 1 ，变量 b 指向了这个对象，然后通过函数 chagne_number 时，按传值的方式复制了变量 b ，传递的只是 b 的值，并没有影响到 b 的本身。具体可以看下修改后的实例，通过打印的结果更好的理解。</p><div class="language-python" data-highlighter="prismjs" data-ext="py" data-title="py"><pre><code><span class="line"><span class="token comment"># -*- coding: UTF-8 -*-</span></span>
<span class="line"><span class="token keyword">def</span> <span class="token function">chagne_number</span><span class="token punctuation">(</span> b <span class="token punctuation">)</span><span class="token punctuation">:</span></span>
<span class="line">    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&#39;函数中一开始 b 的值：{}&#39;</span> <span class="token punctuation">.</span><span class="token builtin">format</span><span class="token punctuation">(</span> b <span class="token punctuation">)</span> <span class="token punctuation">)</span></span>
<span class="line">    b <span class="token operator">=</span> <span class="token number">1000</span></span>
<span class="line">    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&#39;函数中 b 赋值后的值：{}&#39;</span> <span class="token punctuation">.</span><span class="token builtin">format</span><span class="token punctuation">(</span> b <span class="token punctuation">)</span> <span class="token punctuation">)</span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line">b <span class="token operator">=</span> <span class="token number">1</span></span>
<span class="line">chagne_number<span class="token punctuation">(</span> b <span class="token punctuation">)</span></span>
<span class="line"><span class="token keyword">print</span><span class="token punctuation">(</span> <span class="token string">&#39;最后输出 b 的值：{}&#39;</span> <span class="token punctuation">.</span><span class="token builtin">format</span><span class="token punctuation">(</span> b <span class="token punctuation">)</span>  <span class="token punctuation">)</span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"></span></code></pre></div><p>打印的结果：</p><div class="language-txt" data-highlighter="prismjs" data-ext="txt" data-title="txt"><pre><code><span class="line">函数中一开始 b 的值：1</span>
<span class="line">函数中 b 赋值后的值：1000</span>
<span class="line">最后输出 b 的值：1</span>
<span class="line"></span></code></pre></div><p>当然，如果参数中的是可更改的类型，那么调用了这个函数后，原来的值也会被更改，具体实例如下：</p><div class="language-python" data-highlighter="prismjs" data-ext="py" data-title="py"><pre><code><span class="line"><span class="token comment"># -*- coding: UTF-8 -*-</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">def</span> <span class="token function">chagne_list</span><span class="token punctuation">(</span> b <span class="token punctuation">)</span><span class="token punctuation">:</span></span>
<span class="line">    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&#39;函数中一开始 b 的值：{}&#39;</span> <span class="token punctuation">.</span><span class="token builtin">format</span><span class="token punctuation">(</span> b <span class="token punctuation">)</span> <span class="token punctuation">)</span></span>
<span class="line">    b<span class="token punctuation">.</span>append<span class="token punctuation">(</span><span class="token number">1000</span><span class="token punctuation">)</span></span>
<span class="line">    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&#39;函数中 b 赋值后的值：{}&#39;</span> <span class="token punctuation">.</span><span class="token builtin">format</span><span class="token punctuation">(</span> b <span class="token punctuation">)</span> <span class="token punctuation">)</span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line">b <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">]</span></span>
<span class="line">chagne_list<span class="token punctuation">(</span> b <span class="token punctuation">)</span></span>
<span class="line"><span class="token keyword">print</span><span class="token punctuation">(</span> <span class="token string">&#39;最后输出 b 的值：{}&#39;</span> <span class="token punctuation">.</span><span class="token builtin">format</span><span class="token punctuation">(</span> b <span class="token punctuation">)</span>  <span class="token punctuation">)</span></span>
<span class="line"></span></code></pre></div><p>输出的结果：</p><div class="language-txt" data-highlighter="prismjs" data-ext="txt" data-title="txt"><pre><code><span class="line">函数中一开始 b 的值：[1, 2, 3, 4, 5]</span>
<span class="line">函数中 b 赋值后的值：[1, 2, 3, 4, 5, 1000]</span>
<span class="line">最后输出 b 的值：[1, 2, 3, 4, 5, 1000]</span>
<span class="line"></span></code></pre></div><h1 id="五、匿名函数" tabindex="-1"><a class="header-anchor" href="#五、匿名函数"><span>五、匿名函数</span></a></h1><p>有没有想过定义一个很短的回调函数，但又不想用 <code>def</code> 的形式去写一个那么长的函数，那么有没有快捷方式呢？</p><p>答案是有的。</p><p>python 使用 lambda 来创建匿名函数，也就是不再使用 def 语句这样标准的形式定义一个函数。</p><p>匿名函数主要有以下特点：</p><ul><li>lambda 只是一个表达式，函数体比 def 简单很多。</li><li>lambda 的主体是一个表达式，而不是一个代码块。仅仅能在 lambda 表达式中封装有限的逻辑进去。</li><li>lambda 函数拥有自己的命名空间，且不能访问自有参数列表之外或全局命名空间里的参数。</li></ul><p><strong>基本语法</strong></p><div class="language-python" data-highlighter="prismjs" data-ext="py" data-title="py"><pre><code><span class="line"><span class="token keyword">lambda</span> <span class="token punctuation">[</span>arg1 <span class="token punctuation">[</span><span class="token punctuation">,</span>arg2<span class="token punctuation">,</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>argn<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">:</span>expression</span>
<span class="line"></span></code></pre></div><p>示例：</p><div class="language-python" data-highlighter="prismjs" data-ext="py" data-title="py"><pre><code><span class="line"><span class="token comment"># -*- coding: UTF-8 -*-</span></span>
<span class="line"></span>
<span class="line"><span class="token builtin">sum</span> <span class="token operator">=</span> <span class="token keyword">lambda</span> num1 <span class="token punctuation">,</span> num2 <span class="token punctuation">:</span> num1 <span class="token operator">+</span> num2<span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">print</span><span class="token punctuation">(</span> <span class="token builtin">sum</span><span class="token punctuation">(</span> <span class="token number">1</span> <span class="token punctuation">,</span> <span class="token number">2</span> <span class="token punctuation">)</span> <span class="token punctuation">)</span></span>
<span class="line"></span>
<span class="line"></span></code></pre></div><p>输出的结果：</p><div class="language-txt" data-highlighter="prismjs" data-ext="txt" data-title="txt"><pre><code><span class="line">3</span>
<span class="line"></span></code></pre></div><p>注意：<strong>尽管 lambda 表达式允许你定义简单函数，但是它的使用是有限制的。 你只能指定单个表达式，它的值就是最后的返回值。也就是说不能包含其他的语言特性了， 包括多个语句、条件表达式、迭代以及异常处理等等。</strong></p><p>匿名函数中，有一个特别需要注意的问题，比如，把上面的例子改一下：</p><div class="language-python" data-highlighter="prismjs" data-ext="py" data-title="py"><pre><code><span class="line"><span class="token comment"># -*- coding: UTF-8 -*-</span></span>
<span class="line"></span>
<span class="line">num2 <span class="token operator">=</span> <span class="token number">100</span></span>
<span class="line">sum1 <span class="token operator">=</span> <span class="token keyword">lambda</span> num1 <span class="token punctuation">:</span> num1 <span class="token operator">+</span> num2 <span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">num2 <span class="token operator">=</span> <span class="token number">10000</span></span>
<span class="line">sum2 <span class="token operator">=</span> <span class="token keyword">lambda</span> num1 <span class="token punctuation">:</span> num1 <span class="token operator">+</span> num2 <span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">print</span><span class="token punctuation">(</span> sum1<span class="token punctuation">(</span> <span class="token number">1</span> <span class="token punctuation">)</span> <span class="token punctuation">)</span></span>
<span class="line"><span class="token keyword">print</span><span class="token punctuation">(</span> sum2<span class="token punctuation">(</span> <span class="token number">1</span> <span class="token punctuation">)</span> <span class="token punctuation">)</span></span>
<span class="line"></span></code></pre></div><p>你会认为输出什么呢？第一个输出是 101，第二个是 10001，结果不是的，输出的结果是这样：</p><div class="language-txt" data-highlighter="prismjs" data-ext="txt" data-title="txt"><pre><code><span class="line">10001</span>
<span class="line">10001</span>
<span class="line"></span></code></pre></div><p><strong>这主要在于 lambda 表达式中的 num2 是一个自由变量，在运行时绑定值，而不是定义时就绑定，这跟函数的默认值参数定义是不同的。所以建议还是遇到这种情况还是使用第一种解法。</strong></p>`,160)]))}const i=s(e,[["render",o]]),u=JSON.parse('{"path":"/python-tutor/basics/fx.html","title":"函数","lang":"zh-CN","frontmatter":{"description":"函数 函数这个章节内容有点多，对于新手，也有些不好理解。建议各位多看几篇，多敲几次代码。 一、Python 自定义函数的基本步骤 # 1、什么是函数 函数，其实我们一开始学 Python 的时候就接触过。 不过我们使用的大多数都是 Python 的内置函数。 比如基本每个章节都会出现的 print() 函数。 而现在，我们主要学习的是自定义函数。 各位...","head":[["meta",{"property":"og:url","content":"https://yzqdev.github.io/cs-guide/cs-guide/python-tutor/basics/fx.html"}],["meta",{"property":"og:site_name","content":"cs-guide"}],["meta",{"property":"og:title","content":"函数"}],["meta",{"property":"og:description","content":"函数 函数这个章节内容有点多，对于新手，也有些不好理解。建议各位多看几篇，多敲几次代码。 一、Python 自定义函数的基本步骤 # 1、什么是函数 函数，其实我们一开始学 Python 的时候就接触过。 不过我们使用的大多数都是 Python 的内置函数。 比如基本每个章节都会出现的 print() 函数。 而现在，我们主要学习的是自定义函数。 各位..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:image","content":"http://twowaterimage.oss-cn-beijing.aliyuncs.com/2019-10-07-%E5%87%BD%E6%95%B0.png"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2022-06-05T12:43:44.000Z"}],["meta",{"property":"article:modified_time","content":"2022-06-05T12:43:44.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"函数\\",\\"image\\":[\\"http://twowaterimage.oss-cn-beijing.aliyuncs.com/2019-10-07-%E5%87%BD%E6%95%B0.png\\",\\"http://upload-images.jianshu.io/upload_images/2136918-cfe5907d67e912d8?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\\",\\"http://upload-images.jianshu.io/upload_images/2136918-31b1031d75e1cec9?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\\"],\\"dateModified\\":\\"2022-06-05T12:43:44.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"yzqdev\\",\\"url\\":\\"http://www.yzqdev.top\\"}]}"]]},"headers":[{"level":2,"title":"1、什么是函数","slug":"_1、什么是函数","link":"#_1、什么是函数","children":[]},{"level":2,"title":"2、怎么自定义函数","slug":"_2、怎么自定义函数","link":"#_2、怎么自定义函数","children":[]},{"level":2,"title":"1、函数的参数类型","slug":"_1、函数的参数类型","link":"#_1、函数的参数类型","children":[]},{"level":2,"title":"2、默认参数","slug":"_2、默认参数","link":"#_2、默认参数","children":[]},{"level":2,"title":"3、关键字参数（位置参数）","slug":"_3、关键字参数-位置参数","link":"#_3、关键字参数-位置参数","children":[]},{"level":2,"title":"4、不定长参数","slug":"_4、不定长参数","link":"#_4、不定长参数","children":[]},{"level":2,"title":"5、只接受关键字参数","slug":"_5、只接受关键字参数","link":"#_5、只接受关键字参数","children":[]}],"git":{"createdTime":1653565176000,"updatedTime":1654433024000,"contributors":[{"name":"yzqdev","username":"yzqdev","email":"yzqdev@outlook.com","commits":2,"url":"https://github.com/yzqdev"}]},"readingTime":{"minutes":14.55,"words":4365},"filePathRelative":"python-tutor/basics/fx.md","localizedDate":"2022年5月26日","autoDesc":true}');export{i as comp,u as data};
