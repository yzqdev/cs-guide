import{_ as s,c as a,a as p,o as t}from"./app-C8DxhDIZ.js";const e={};function c(l,n){return t(),a("div",null,n[0]||(n[0]=[p(`<h1 id="dart-ffi使用" tabindex="-1"><a class="header-anchor" href="#dart-ffi使用"><span>Dart ffi使用</span></a></h1><p>本篇博客研究Dart语言如何调用C语言代码混合编程，最后我们实现一个简单示例，在C语言中编写简单加解密函数，使用dart调用并传入字符串，返回加密结果，调用解密函数，恢复字符串内容。</p><p><strong>随着Dart SDK版本迭代，本文章部分内容已过时，最新版本教程已经上传B站，请查看 <a href="https://www.bilibili.com/video/BV1v44y1i7ed" target="_blank" rel="noopener noreferrer">Dart FFI 入门</a></strong></p><h2 id="环境准备" tabindex="-1"><a class="header-anchor" href="#环境准备"><span>环境准备</span></a></h2><h3 id="编译器环境" tabindex="-1"><a class="header-anchor" href="#编译器环境"><span>编译器环境</span></a></h3><p>如未安装过VS编译器，则推荐使用GCC编译器，下载一个64位Windows版本的GCC——<code>MinGW-W64</code><a href="https://sourceforge.net/projects/mingw-w64/files/" target="_blank" rel="noopener noreferrer">下载地址</a></p><p>如上，它有两个版本，<code>sjlj</code>和<code>seh</code>后缀表示异常处理模式，<code>seh</code> 性能较好，但不支持 32位。 <code>sjlj</code> 稳定性好，可支持 32位，推荐下载<code>seh</code> 版本</p><p>将编译器安装到指定的目录，完成安装后，还需要配置一下环境变量，将安装目录下的<code>bin</code>目录加入到系统Path环境变量中，<code>bin</code>目录下包含<code>gcc.exe</code>、<code>make.exe</code>等工具链。</p><p><strong>测试环境</strong> 配置完成后，检测一下环境是否搭建成功，打开<code>cmd</code>命令行，输入<code>gcc -v</code>能查看版本号则成功。</p><h3 id="dart-sdk环境" tabindex="-1"><a class="header-anchor" href="#dart-sdk环境"><span>Dart SDK环境</span></a></h3><p>去往Dart 官网下载最新的2.3 版本SDK，注意，旧版本不支持<code>ffi</code> <a href="https://dart.dev/tools/sdk/archive" target="_blank" rel="noopener noreferrer">下载地址</a></p><p>下载安装后，同样需要配置环境变量，将<code>dart-sdk\\bin</code>配置到系统Path环境变量中。</p><h2 id="测试dart-ffi接口" tabindex="-1"><a class="header-anchor" href="#测试dart-ffi接口"><span>测试Dart <code>ffi</code>接口</span></a></h2><p>关于C语言相关的各种知识，包括构建、动态库编译与加载，请学习我的<a href="https://blog.csdn.net/yingshukun/category_9291402.html" target="_blank" rel="noopener noreferrer">《C语言专栏》</a>，只有掌握这些基础知识，才能应对各种报错问题。</p><h3 id="简单示例" tabindex="-1"><a class="header-anchor" href="#简单示例"><span>简单示例</span></a></h3><p>创建测试工程，打开<code>cmd</code>命令行</p><div class="language-text" data-highlighter="prismjs" data-ext="text" data-title="text"><pre><code><span class="line">mkdir ffi-proj</span>
<span class="line">cd ffi-proj</span>
<span class="line">mkdir bin src</span>
<span class="line"></span></code></pre></div><p>创建工程目录<code>ffi-proj</code>，在其下创建<code>bin</code>、<code>src</code>文件夹，在<code>bin</code>中创建<code>main.dart</code>文件，在<code>src</code>中创建<code>test.c</code>文件</p><p>编写<code>test.c</code> 我们在其中包含了windows头文件，用于<code>showBox</code>函数，调用Win32 API，创建一个对话框</p><div class="language-c" data-highlighter="prismjs" data-ext="c" data-title="c"><pre><code><span class="line"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;windows.h&gt;</span></span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">int</span> <span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">int</span> a<span class="token punctuation">,</span> <span class="token keyword">int</span> b<span class="token punctuation">)</span><span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">return</span> a <span class="token operator">+</span> b<span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"><span class="token keyword">void</span> <span class="token function">showBox</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span></span>
<span class="line">    <span class="token function">MessageBox</span><span class="token punctuation">(</span><span class="token constant">NULL</span><span class="token punctuation">,</span><span class="token string">&quot;Hello Dart&quot;</span><span class="token punctuation">,</span><span class="token string">&quot;Title&quot;</span><span class="token punctuation">,</span>MB_OK<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre></div><p>进入<code>src</code>目录下，使用gcc编译器，将C语言代码编译为dll动态库</p><div class="language-bash" data-highlighter="prismjs" data-ext="sh" data-title="sh"><pre><code><span class="line">gcc test.c <span class="token parameter variable">-shared</span> <span class="token parameter variable">-o</span> test.dll</span>
<span class="line"></span></code></pre></div><p>编写<code>main.dart</code></p><div class="language-dart line-numbers-mode" data-highlighter="prismjs" data-ext="dart" data-title="dart"><pre><code><span class="line"><span class="token keyword">import</span>  <span class="token string-literal"><span class="token string">&#39;dart:ffi&#39;</span></span>  <span class="token operator">as</span> ffi<span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">import</span>  <span class="token string-literal"><span class="token string">&#39;dart:io&#39;</span></span>  <span class="token keyword">show</span> <span class="token class-name">Platform</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">/// 根据C中的函数来定义方法签名（所谓方法签名，就是对一个方法或函数的描述，包括返回值类型，形参类型）</span></span>
<span class="line"><span class="token comment">/// 这里需要定义两个方法签名，一个是C语言中的，一个是转换为Dart之后的</span></span>
<span class="line"><span class="token keyword">typedef</span> <span class="token class-name">NativeAddSign</span> <span class="token operator">=</span> <span class="token class-name"><span class="token namespace">ffi<span class="token punctuation">.</span></span>Int32</span> <span class="token class-name">Function</span><span class="token punctuation">(</span><span class="token class-name"><span class="token namespace">ffi<span class="token punctuation">.</span></span>Int32</span><span class="token punctuation">,</span><span class="token class-name"><span class="token namespace">ffi<span class="token punctuation">.</span></span>Int32</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">typedef</span> <span class="token class-name">DartAddSign</span> <span class="token operator">=</span> int <span class="token class-name">Function</span><span class="token punctuation">(</span>int<span class="token punctuation">,</span> int<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">/// showBox函数方法签名</span></span>
<span class="line"><span class="token keyword">typedef</span> <span class="token class-name">NativeShowSign</span> <span class="token operator">=</span> <span class="token class-name"><span class="token namespace">ffi<span class="token punctuation">.</span></span>Void</span> <span class="token class-name">Function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">typedef</span> <span class="token class-name">DartShowSign</span> <span class="token operator">=</span> <span class="token keyword">void</span> <span class="token class-name">Function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token class-name">Platform</span><span class="token punctuation">.</span>isWindows<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token comment">// 加载dll动态库</span></span>
<span class="line">    <span class="token class-name"><span class="token namespace">ffi<span class="token punctuation">.</span></span>DynamicLibrary</span> dl <span class="token operator">=</span> <span class="token class-name"><span class="token namespace">ffi<span class="token punctuation">.</span></span>DynamicLibrary</span><span class="token punctuation">.</span><span class="token function">open</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">&quot;../src/test.dll&quot;</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">    <span class="token comment">// lookupFunction有两个作用，1、去动态库中查找指定的函数；2、将Native类型的C函数转化为Dart的Function类型</span></span>
<span class="line">    <span class="token keyword">var</span> add <span class="token operator">=</span> dl<span class="token punctuation">.</span>lookupFunction<span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">NativeAddSign</span><span class="token punctuation">,</span> <span class="token class-name">DartAddSign</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">&quot;add&quot;</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token keyword">var</span> showBox <span class="token operator">=</span> dl<span class="token punctuation">.</span>lookupFunction<span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">NativeShowSign</span><span class="token punctuation">,</span> <span class="token class-name">DartShowSign</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">&quot;showBox&quot;</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">    <span class="token comment">// 调用add函数</span></span>
<span class="line">    <span class="token function">print</span><span class="token punctuation">(</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token number">8</span><span class="token punctuation">,</span> <span class="token number">9</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"> <span class="token comment">// 调用showBox函数</span></span>
<span class="line">    <span class="token function">showBox</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="深入用法" tabindex="-1"><a class="header-anchor" href="#深入用法"><span>深入用法</span></a></h3><p>这里写一个稍微深入一点的示例，我们在C语言中写一个简单加密算法，然后使用dart调用C函数加密解密</p><p>编写<code>encrypt_test.c</code>，这里写一个最简单的异或加密算法，可以看到加密和解密实际上是一样的</p><div class="language-c line-numbers-mode" data-highlighter="prismjs" data-ext="c" data-title="c"><pre><code><span class="line"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;string.h&gt;</span></span></span>
<span class="line"> </span>
<span class="line"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">KEY</span> <span class="token char">&#39;abc&#39;</span></span></span>
<span class="line"> </span>
<span class="line"><span class="token keyword">void</span> <span class="token function">encrypt</span><span class="token punctuation">(</span><span class="token keyword">char</span> <span class="token operator">*</span>str<span class="token punctuation">,</span> <span class="token keyword">char</span> <span class="token operator">*</span>r<span class="token punctuation">,</span> <span class="token keyword">int</span> r_len<span class="token punctuation">)</span><span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">int</span> len <span class="token operator">=</span> <span class="token function">strlen</span><span class="token punctuation">(</span>str<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> len <span class="token operator">&amp;&amp;</span> i <span class="token operator">&lt;</span> r_len<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span></span>
<span class="line">        r<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> str<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">^</span> KEY<span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">    <span class="token keyword">if</span> <span class="token punctuation">(</span>r_len <span class="token operator">&gt;</span> len<span class="token punctuation">)</span> r<span class="token punctuation">[</span>len<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token char">&#39;\\0&#39;</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token keyword">else</span> r<span class="token punctuation">[</span>r_len<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token char">&#39;\\0&#39;</span><span class="token punctuation">;</span></span>
<span class="line">    </span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">void</span> <span class="token function">decrypt</span><span class="token punctuation">(</span><span class="token keyword">char</span> <span class="token operator">*</span>str<span class="token punctuation">,</span> <span class="token keyword">char</span> <span class="token operator">*</span>r<span class="token punctuation">,</span> <span class="token keyword">int</span> r_len<span class="token punctuation">)</span><span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">int</span> len <span class="token operator">=</span> <span class="token function">strlen</span><span class="token punctuation">(</span>str<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> len <span class="token operator">&amp;&amp;</span> i <span class="token operator">&lt;</span> r_len<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span></span>
<span class="line">        r<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> str<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">^</span> KEY<span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">    <span class="token keyword">if</span> <span class="token punctuation">(</span>r_len <span class="token operator">&gt;</span> len<span class="token punctuation">)</span> r<span class="token punctuation">[</span>len<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token char">&#39;\\0&#39;</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token keyword">else</span> r<span class="token punctuation">[</span>r_len<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token char">&#39;\\0&#39;</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>编译为动态库</p><div class="language-text" data-highlighter="prismjs" data-ext="text" data-title="text"><pre><code><span class="line">gcc encrypt_test.c -shared -o encrypt_test.dll</span>
<span class="line"></span></code></pre></div><p>编写<code>main.dart</code></p><div class="language-dart line-numbers-mode" data-highlighter="prismjs" data-ext="dart" data-title="dart"><pre><code><span class="line"><span class="token keyword">import</span> <span class="token string-literal"><span class="token string">&#39;dart:ffi&#39;</span></span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">import</span> <span class="token string-literal"><span class="token string">&#39;dart:io&#39;</span></span> <span class="token keyword">show</span> <span class="token class-name">Platform</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">import</span> <span class="token string-literal"><span class="token string">&quot;dart:convert&quot;</span></span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"><span class="token comment">/// encrypt函数方法签名，注意，这里encrypt和decrypt的方法签名实际上是一样的，两个函数返回值类型和参数类型完全相同</span></span>
<span class="line"><span class="token keyword">typedef</span> <span class="token class-name">NativeEncrypt</span> <span class="token operator">=</span> <span class="token class-name">Void</span> <span class="token class-name">Function</span><span class="token punctuation">(</span><span class="token class-name">CString</span><span class="token punctuation">,</span><span class="token class-name">CString</span><span class="token punctuation">,</span><span class="token class-name">Int32</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">typedef</span> <span class="token class-name">DartEncrypt</span> <span class="token operator">=</span> <span class="token keyword">void</span> <span class="token class-name">Function</span><span class="token punctuation">(</span><span class="token class-name">CString</span><span class="token punctuation">,</span><span class="token class-name">CString</span><span class="token punctuation">,</span>int<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"><span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token class-name">Platform</span><span class="token punctuation">.</span>isWindows<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token comment">// 加载dll动态库</span></span>
<span class="line">    <span class="token class-name">DynamicLibrary</span> dl <span class="token operator">=</span> <span class="token class-name">DynamicLibrary</span><span class="token punctuation">.</span><span class="token function">open</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">&quot;../src/encrypt_test.dll&quot;</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token keyword">var</span> encrypt <span class="token operator">=</span> dl<span class="token punctuation">.</span>lookupFunction<span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">NativeEncrypt</span><span class="token punctuation">,</span> <span class="token class-name">DartEncrypt</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">&quot;encrypt&quot;</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token keyword">var</span> decrypt <span class="token operator">=</span> dl<span class="token punctuation">.</span>lookupFunction<span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">NativeEncrypt</span><span class="token punctuation">,</span> <span class="token class-name">DartEncrypt</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">&quot;decrypt&quot;</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line">    <span class="token class-name">CString</span> data <span class="token operator">=</span> <span class="token class-name">CString</span><span class="token punctuation">.</span><span class="token function">allocate</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">&quot;helloworld&quot;</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token class-name">CString</span> enResult <span class="token operator">=</span> <span class="token class-name">CString</span><span class="token punctuation">.</span><span class="token function">malloc</span><span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token function">encrypt</span><span class="token punctuation">(</span>data<span class="token punctuation">,</span>enResult<span class="token punctuation">,</span><span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token function">print</span><span class="token punctuation">(</span><span class="token class-name">CString</span><span class="token punctuation">.</span><span class="token function">fromUtf8</span><span class="token punctuation">(</span>enResult<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">    <span class="token function">print</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">&quot;-------------------------&quot;</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">    <span class="token class-name">CString</span> deResult <span class="token operator">=</span> <span class="token class-name">CString</span><span class="token punctuation">.</span><span class="token function">malloc</span><span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token function">decrypt</span><span class="token punctuation">(</span>enResult<span class="token punctuation">,</span>deResult<span class="token punctuation">,</span><span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token function">print</span><span class="token punctuation">(</span><span class="token class-name">CString</span><span class="token punctuation">.</span><span class="token function">fromUtf8</span><span class="token punctuation">(</span>deResult<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">/// 创建一个类继承Pointer&lt;Int8&gt;指针，用于处理C语言字符串和Dart字符串的映射</span></span>
<span class="line"><span class="token keyword">class</span> <span class="token class-name">CString</span> <span class="token keyword">extends</span> <span class="token class-name">Pointer</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Int8</span><span class="token punctuation">&gt;</span></span> <span class="token punctuation">{</span></span>
<span class="line"></span>
<span class="line">  <span class="token comment">/// 申请内存空间，将Dart字符串转为C语言字符串</span></span>
<span class="line">  <span class="token keyword">factory</span> <span class="token class-name">CString</span><span class="token punctuation">.</span><span class="token function">allocate</span><span class="token punctuation">(</span><span class="token class-name">String</span> dartStr<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span>int<span class="token punctuation">&gt;</span></span> units <span class="token operator">=</span> <span class="token class-name">Utf8Encoder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">convert</span><span class="token punctuation">(</span>dartStr<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token class-name">Pointer</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Int8</span><span class="token punctuation">&gt;</span></span> str <span class="token operator">=</span> <span class="token function">allocate</span><span class="token punctuation">(</span>count<span class="token punctuation">:</span> units<span class="token punctuation">.</span>length <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token keyword">for</span> <span class="token punctuation">(</span>int i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> units<span class="token punctuation">.</span>length<span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">      str<span class="token punctuation">.</span><span class="token function">elementAt</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">store</span><span class="token punctuation">(</span>units<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line">    str<span class="token punctuation">.</span><span class="token function">elementAt</span><span class="token punctuation">(</span>units<span class="token punctuation">.</span>length<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">store</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">    <span class="token keyword">return</span> str<span class="token punctuation">.</span><span class="token function">cast</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"> <span class="token comment">// 申请指定大小的堆内存空间</span></span>
<span class="line">  <span class="token keyword">factory</span> <span class="token class-name">CString</span><span class="token punctuation">.</span><span class="token function">malloc</span><span class="token punctuation">(</span>int size<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token class-name">Pointer</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Int8</span><span class="token punctuation">&gt;</span></span> str <span class="token operator">=</span> <span class="token function">allocate</span><span class="token punctuation">(</span>count<span class="token punctuation">:</span> size<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token keyword">return</span> str<span class="token punctuation">.</span><span class="token function">cast</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">  <span class="token comment">/// 将C语言中的字符串转为Dart中的字符串</span></span>
<span class="line">  <span class="token keyword">static</span> <span class="token class-name">String</span> <span class="token function">fromUtf8</span><span class="token punctuation">(</span><span class="token class-name">CString</span> str<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">if</span> <span class="token punctuation">(</span>str <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token keyword">null</span><span class="token punctuation">;</span></span>
<span class="line">    int len <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token keyword">while</span> <span class="token punctuation">(</span>str<span class="token punctuation">.</span><span class="token function">elementAt</span><span class="token punctuation">(</span><span class="token operator">++</span>len<span class="token punctuation">)</span><span class="token punctuation">.</span>load<span class="token generics"><span class="token punctuation">&lt;</span>int<span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span>int<span class="token punctuation">&gt;</span></span> units <span class="token operator">=</span> <span class="token class-name">List</span><span class="token punctuation">(</span>len<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token keyword">for</span> <span class="token punctuation">(</span>int i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> len<span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span> units<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> str<span class="token punctuation">.</span><span class="token function">elementAt</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">load</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token keyword">return</span> <span class="token class-name">Utf8Decoder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">convert</span><span class="token punctuation">(</span>units<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>可以看到将<code>&quot;helloworld&quot;</code>字符串加密后变成一串乱码，解密字符串后，恢复内容</p><h4 id="完善代码" tabindex="-1"><a class="header-anchor" href="#完善代码"><span>完善代码</span></a></h4><p>上述代码虽然实现了我们的目标，但是存在明显的内存泄露，我们使用CString 的<code>allocate</code>和<code>malloc</code>申请了堆内存，但是却没有手动释放，这样运行一段时间后可能会耗尽内存空间，手动管理内存往往是<code>C/C++</code>中最容易出问题的地方，这里我们只能进行一个简单的设计来回收内存</p><div class="language-dart line-numbers-mode" data-highlighter="prismjs" data-ext="dart" data-title="dart"><pre><code><span class="line"><span class="token comment">/// 创建Reference 类来跟踪CString申请的内存</span></span>
<span class="line"><span class="token keyword">class</span> <span class="token class-name">Reference</span> <span class="token punctuation">{</span></span>
<span class="line">   <span class="token keyword">final</span> <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Pointer</span><span class="token punctuation">&lt;</span><span class="token class-name">Void</span><span class="token punctuation">&gt;</span><span class="token punctuation">&gt;</span></span> _allocations <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">    <span class="token class-name">T</span> ref<span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span> <span class="token keyword">extends</span> <span class="token class-name">Pointer</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token class-name">T</span> ptr<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">     _allocations<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>ptr<span class="token punctuation">.</span><span class="token function">cast</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">     <span class="token keyword">return</span> ptr<span class="token punctuation">;</span></span>
<span class="line">   <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"> <span class="token comment">// 使用完后手动释放内存</span></span>
<span class="line">    <span class="token keyword">void</span> <span class="token function">finalize</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">     <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">final</span> ptr <span class="token keyword">in</span> _allocations<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">       ptr<span class="token punctuation">.</span><span class="token function">free</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">     <span class="token punctuation">}</span></span>
<span class="line">     _allocations<span class="token punctuation">.</span><span class="token function">clear</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>修改代码</p><div class="language-dart line-numbers-mode" data-highlighter="prismjs" data-ext="dart" data-title="dart"><pre><code><span class="line"><span class="token keyword">import</span> <span class="token string-literal"><span class="token string">&#39;dart:ffi&#39;</span></span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">import</span> <span class="token string-literal"><span class="token string">&#39;dart:io&#39;</span></span> <span class="token keyword">show</span> <span class="token class-name">Platform</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">import</span> <span class="token string-literal"><span class="token string">&quot;dart:convert&quot;</span></span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"><span class="token comment">/// encrypt函数方法签名，注意，这里encrypt和decrypt的方法签名实际上是一样的，两个函数返回值类型和参数类型完全相同</span></span>
<span class="line"><span class="token keyword">typedef</span> <span class="token class-name">NativeEncrypt</span> <span class="token operator">=</span> <span class="token class-name">Void</span> <span class="token class-name">Function</span><span class="token punctuation">(</span><span class="token class-name">CString</span><span class="token punctuation">,</span><span class="token class-name">CString</span><span class="token punctuation">,</span><span class="token class-name">Int32</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">typedef</span> <span class="token class-name">DartEncrypt</span> <span class="token operator">=</span> <span class="token keyword">void</span> <span class="token class-name">Function</span><span class="token punctuation">(</span><span class="token class-name">CString</span><span class="token punctuation">,</span><span class="token class-name">CString</span><span class="token punctuation">,</span>int<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"><span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token class-name">Platform</span><span class="token punctuation">.</span>isWindows<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token comment">// 加载dll动态库</span></span>
<span class="line">    <span class="token class-name">DynamicLibrary</span> dl <span class="token operator">=</span> <span class="token class-name">DynamicLibrary</span><span class="token punctuation">.</span><span class="token function">open</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">&quot;../src/hello.dll&quot;</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token keyword">var</span> encrypt <span class="token operator">=</span> dl<span class="token punctuation">.</span>lookupFunction<span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">NativeEncrypt</span><span class="token punctuation">,</span> <span class="token class-name">DartEncrypt</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">&quot;encrypt&quot;</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token keyword">var</span> decrypt <span class="token operator">=</span> dl<span class="token punctuation">.</span>lookupFunction<span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">NativeEncrypt</span><span class="token punctuation">,</span> <span class="token class-name">DartEncrypt</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">&quot;decrypt&quot;</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"> <span class="token comment">// 创建Reference 跟踪CString</span></span>
<span class="line">    <span class="token class-name">Reference</span> ref <span class="token operator">=</span> <span class="token class-name">Reference</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">    <span class="token class-name">CString</span> data <span class="token operator">=</span> <span class="token class-name">CString</span><span class="token punctuation">.</span><span class="token function">allocate</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">&quot;helloworld&quot;</span></span><span class="token punctuation">,</span>ref<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token class-name">CString</span> enResult <span class="token operator">=</span> <span class="token class-name">CString</span><span class="token punctuation">.</span><span class="token function">malloc</span><span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">,</span>ref<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token function">encrypt</span><span class="token punctuation">(</span>data<span class="token punctuation">,</span>enResult<span class="token punctuation">,</span><span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token function">print</span><span class="token punctuation">(</span><span class="token class-name">CString</span><span class="token punctuation">.</span><span class="token function">fromUtf8</span><span class="token punctuation">(</span>enResult<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">    <span class="token function">print</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">&quot;-------------------------&quot;</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">    <span class="token class-name">CString</span> deResult <span class="token operator">=</span> <span class="token class-name">CString</span><span class="token punctuation">.</span><span class="token function">malloc</span><span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">,</span>ref<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token function">decrypt</span><span class="token punctuation">(</span>enResult<span class="token punctuation">,</span>deResult<span class="token punctuation">,</span><span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token function">print</span><span class="token punctuation">(</span><span class="token class-name">CString</span><span class="token punctuation">.</span><span class="token function">fromUtf8</span><span class="token punctuation">(</span>deResult<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"> <span class="token comment">// 用完后手动释放</span></span>
<span class="line">    ref<span class="token punctuation">.</span><span class="token function">finalize</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">class</span> <span class="token class-name">CString</span> <span class="token keyword">extends</span> <span class="token class-name">Pointer</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Int8</span><span class="token punctuation">&gt;</span></span> <span class="token punctuation">{</span></span>
<span class="line"></span>
<span class="line">  <span class="token comment">/// 开辟内存控件，将Dart字符串转为C语言字符串</span></span>
<span class="line">  <span class="token keyword">factory</span> <span class="token class-name">CString</span><span class="token punctuation">.</span><span class="token function">allocate</span><span class="token punctuation">(</span><span class="token class-name">String</span> dartStr<span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token class-name">Reference</span> ref<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span>int<span class="token punctuation">&gt;</span></span> units <span class="token operator">=</span> <span class="token class-name">Utf8Encoder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">convert</span><span class="token punctuation">(</span>dartStr<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token class-name">Pointer</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Int8</span><span class="token punctuation">&gt;</span></span> str <span class="token operator">=</span> <span class="token function">allocate</span><span class="token punctuation">(</span>count<span class="token punctuation">:</span> units<span class="token punctuation">.</span>length <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token keyword">for</span> <span class="token punctuation">(</span>int i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> units<span class="token punctuation">.</span>length<span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">      str<span class="token punctuation">.</span><span class="token function">elementAt</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">store</span><span class="token punctuation">(</span>units<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line">    str<span class="token punctuation">.</span><span class="token function">elementAt</span><span class="token punctuation">(</span>units<span class="token punctuation">.</span>length<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">store</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">    ref<span class="token operator">?</span><span class="token punctuation">.</span><span class="token function">ref</span><span class="token punctuation">(</span>str<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token keyword">return</span> str<span class="token punctuation">.</span><span class="token function">cast</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">  <span class="token keyword">factory</span> <span class="token class-name">CString</span><span class="token punctuation">.</span><span class="token function">malloc</span><span class="token punctuation">(</span>int size<span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token class-name">Reference</span> ref<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token class-name">Pointer</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Int8</span><span class="token punctuation">&gt;</span></span> str <span class="token operator">=</span> <span class="token function">allocate</span><span class="token punctuation">(</span>count<span class="token punctuation">:</span> size<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    ref<span class="token operator">?</span><span class="token punctuation">.</span><span class="token function">ref</span><span class="token punctuation">(</span>str<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token keyword">return</span> str<span class="token punctuation">.</span><span class="token function">cast</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">  <span class="token comment">/// 将C语言中的字符串转为Dart中的字符串</span></span>
<span class="line">  <span class="token keyword">static</span> <span class="token class-name">String</span> <span class="token function">fromUtf8</span><span class="token punctuation">(</span><span class="token class-name">CString</span> str<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">if</span> <span class="token punctuation">(</span>str <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token keyword">null</span><span class="token punctuation">;</span></span>
<span class="line">    int len <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token keyword">while</span> <span class="token punctuation">(</span>str<span class="token punctuation">.</span><span class="token function">elementAt</span><span class="token punctuation">(</span><span class="token operator">++</span>len<span class="token punctuation">)</span><span class="token punctuation">.</span>load<span class="token generics"><span class="token punctuation">&lt;</span>int<span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span>int<span class="token punctuation">&gt;</span></span> units <span class="token operator">=</span> <span class="token class-name">List</span><span class="token punctuation">(</span>len<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token keyword">for</span> <span class="token punctuation">(</span>int i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> len<span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span> units<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> str<span class="token punctuation">.</span><span class="token function">elementAt</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">load</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token keyword">return</span> <span class="token class-name">Utf8Decoder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">convert</span><span class="token punctuation">(</span>units<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="总结" tabindex="-1"><a class="header-anchor" href="#总结"><span>总结</span></a></h2><p><code>dart:ffi</code>包目前正处理开发中，暂时释放的只有基础功能，且使用<code>dart:ffi</code>包后，Dart代码不能进行<code>aot</code>编译，不过Dart开发了<code>ffi</code>接口后，极大的扩展了dart语言的能力边界，就如同的Java的Jni一样，如果<code>ffi</code>接口开发得足够好用，Dart就能像Python那样成为一门真正的胶水语言。</p><p>大家如果有兴趣进一步研究，可以查看<code>dart:ffi</code>包源码，目前该包总共才5个dart文件，源码很少，适合学习。</p><p>参考资料： <a href="https://github.com/dart-lang/sdk/tree/master/sdk/lib/ffi" target="_blank" rel="noopener noreferrer">dart:ffi 源码</a><a href="https://github.com/dart-lang/sdk/blob/master/samples/ffi/sqlite/docs/sqlite-tutorial.md" target="_blank" rel="noopener noreferrer">dart:ffi 官方示例</a></p>`,42)]))}const i=s(e,[["render",c]]),u=JSON.parse('{"path":"/flutter-tutor/dart/ffi.html","title":"Dart ffi使用","lang":"zh-CN","frontmatter":{"description":"Dart ffi使用 本篇博客研究Dart语言如何调用C语言代码混合编程，最后我们实现一个简单示例，在C语言中编写简单加解密函数，使用dart调用并传入字符串，返回加密结果，调用解密函数，恢复字符串内容。 随着Dart SDK版本迭代，本文章部分内容已过时，最新版本教程已经上传B站，请查看 Dart FFI 入门 环境准备 编译器环境 如未安装过VS编...","head":[["meta",{"property":"og:url","content":"https://yzqdev.github.io/cs-guide/cs-guide/flutter-tutor/dart/ffi.html"}],["meta",{"property":"og:site_name","content":"cs-guide"}],["meta",{"property":"og:title","content":"Dart ffi使用"}],["meta",{"property":"og:description","content":"Dart ffi使用 本篇博客研究Dart语言如何调用C语言代码混合编程，最后我们实现一个简单示例，在C语言中编写简单加解密函数，使用dart调用并传入字符串，返回加密结果，调用解密函数，恢复字符串内容。 随着Dart SDK版本迭代，本文章部分内容已过时，最新版本教程已经上传B站，请查看 Dart FFI 入门 环境准备 编译器环境 如未安装过VS编..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2023-06-25T05:00:38.000Z"}],["meta",{"property":"article:modified_time","content":"2023-06-25T05:00:38.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"Dart ffi使用\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2023-06-25T05:00:38.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"yzqdev\\",\\"url\\":\\"http://www.yzqdev.top\\"}]}"]]},"headers":[{"level":2,"title":"环境准备","slug":"环境准备","link":"#环境准备","children":[{"level":3,"title":"编译器环境","slug":"编译器环境","link":"#编译器环境","children":[]},{"level":3,"title":"Dart SDK环境","slug":"dart-sdk环境","link":"#dart-sdk环境","children":[]}]},{"level":2,"title":"测试Dart ffi接口","slug":"测试dart-ffi接口","link":"#测试dart-ffi接口","children":[{"level":3,"title":"简单示例","slug":"简单示例","link":"#简单示例","children":[]},{"level":3,"title":"深入用法","slug":"深入用法","link":"#深入用法","children":[{"level":4,"title":"完善代码","slug":"完善代码","link":"#完善代码","children":[]}]}]},{"level":2,"title":"总结","slug":"总结","link":"#总结","children":[]}],"git":{"createdTime":1684738995000,"updatedTime":1687669238000,"contributors":[{"name":"yzqdev","username":"yzqdev","email":"yzqdev@outlook.com","commits":2,"url":"https://github.com/yzqdev"}]},"readingTime":{"minutes":6.38,"words":1913},"filePathRelative":"flutter-tutor/dart/ffi.md","localizedDate":"2023年5月22日","autoDesc":true}');export{i as comp,u as data};
