import{_ as n,c as a,a as e,o as t}from"./app-C8DxhDIZ.js";const p={};function o(c,s){return t(),a("div",null,s[0]||(s[0]=[e(`<h1 id="一些常用操作" tabindex="-1"><a class="header-anchor" href="#一些常用操作"><span>一些常用操作</span></a></h1><h2 id="解析json" tabindex="-1"><a class="header-anchor" href="#解析json"><span>解析json</span></a></h2><h3 id="json字符转dart对象" tabindex="-1"><a class="header-anchor" href="#json字符转dart对象"><span>json字符转dart对象</span></a></h3><div class="language-dart line-numbers-mode" data-highlighter="prismjs" data-ext="dart" data-title="dart"><pre><code><span class="line"><span class="token keyword">import</span> <span class="token string-literal"><span class="token string">&#39;package:json_annotation/json_annotation.dart&#39;</span></span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">/// This allows the \`User\` class to access private members in</span></span>
<span class="line"><span class="token comment">/// the generated file. The value for this is *.g.dart, where</span></span>
<span class="line"><span class="token comment">/// the star denotes the source file name.</span></span>
<span class="line"><span class="token keyword">part</span> <span class="token string-literal"><span class="token string">&#39;user.g.dart&#39;</span></span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">/// An annotation for the code generator to know that this class needs the</span></span>
<span class="line"><span class="token comment">/// JSON serialization logic to be generated.</span></span>
<span class="line"><span class="token metadata function">@JsonSerializable</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line"><span class="token keyword">class</span> <span class="token class-name">User</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token class-name">User</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>name<span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">.</span>email<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">  <span class="token class-name">String</span> name<span class="token punctuation">;</span></span>
<span class="line">  <span class="token class-name">String</span> email<span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">  <span class="token comment">/// A necessary factory constructor for creating a new User instance</span></span>
<span class="line">  <span class="token comment">/// from a map. Pass the map to the generated \`_$UserFromJson()\` constructor.</span></span>
<span class="line">  <span class="token comment">/// The constructor is named after the source class, in this case, User.</span></span>
<span class="line">  <span class="token keyword">factory</span> <span class="token class-name">User</span><span class="token punctuation">.</span><span class="token function">fromJson</span><span class="token punctuation">(</span><span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token keyword">dynamic</span><span class="token punctuation">&gt;</span></span> json<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">&gt;</span> _$<span class="token class-name">UserFromJson</span><span class="token punctuation">(</span>json<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">  <span class="token comment">/// \`toJson\` is the convention for a class to declare support for serialization</span></span>
<span class="line">  <span class="token comment">/// to JSON. The implementation simply calls the private, generated</span></span>
<span class="line">  <span class="token comment">/// helper method \`_$UserToJson\`.</span></span>
<span class="line">  <span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token keyword">dynamic</span><span class="token punctuation">&gt;</span></span> <span class="token function">toJson</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">&gt;</span> _$<span class="token class-name">UserToJson</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>然后</p><div class="language-bash" data-highlighter="prismjs" data-ext="sh" data-title="sh"><pre><code><span class="line">flutter pub run build_runner <span class="token function">watch</span> </span>
<span class="line"></span></code></pre></div><p>json数组转dart对象</p><div class="language-dart" data-highlighter="prismjs" data-ext="dart" data-title="dart"><pre><code><span class="line"><span class="token class-name">List</span> responseJson <span class="token operator">=</span> json<span class="token punctuation">.</span><span class="token function">decode</span><span class="token punctuation">(</span>response<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">CardBean</span><span class="token punctuation">&gt;</span></span> cardbeanList <span class="token operator">=</span> responseJson<span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token punctuation">(</span>m<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">&gt;</span> <span class="token keyword">new</span> <span class="token class-name">CardBean</span><span class="token punctuation">.</span><span class="token function">fromJson</span><span class="token punctuation">(</span>m<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token class-name">CardBean</span> cardBean <span class="token operator">=</span> cardbeanList<span class="token punctuation">.</span>first<span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"></span></code></pre></div>`,8)]))}const i=n(p,[["render",o]]),r=JSON.parse('{"path":"/flutter-tutor/functions.html","title":"一些常用操作","lang":"zh-CN","frontmatter":{"description":"一些常用操作 解析json json字符转dart对象 然后 json数组转dart对象","head":[["meta",{"property":"og:url","content":"https://yzqdev.github.io/cs-guide/cs-guide/flutter-tutor/functions.html"}],["meta",{"property":"og:site_name","content":"cs-guide"}],["meta",{"property":"og:title","content":"一些常用操作"}],["meta",{"property":"og:description","content":"一些常用操作 解析json json字符转dart对象 然后 json数组转dart对象"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2023-06-25T05:00:38.000Z"}],["meta",{"property":"article:modified_time","content":"2023-06-25T05:00:38.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"一些常用操作\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2023-06-25T05:00:38.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"yzqdev\\",\\"url\\":\\"http://www.yzqdev.top\\"}]}"]]},"headers":[{"level":2,"title":"解析json","slug":"解析json","link":"#解析json","children":[{"level":3,"title":"json字符转dart对象","slug":"json字符转dart对象","link":"#json字符转dart对象","children":[]}]}],"git":{"createdTime":1684738995000,"updatedTime":1687669238000,"contributors":[{"name":"yzqdev","username":"yzqdev","email":"yzqdev@outlook.com","commits":2,"url":"https://github.com/yzqdev"}]},"readingTime":{"minutes":0.66,"words":197},"filePathRelative":"flutter-tutor/functions.md","localizedDate":"2023年5月22日","autoDesc":true}');export{i as comp,r as data};
