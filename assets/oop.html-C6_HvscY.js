import{_ as s,c as a,a as p,o as e}from"./app-C8DxhDIZ.js";const t={};function l(c,n){return e(),a("div",null,n[0]||(n[0]=[p(`<h1 id="面向对象" tabindex="-1"><a class="header-anchor" href="#面向对象"><span>面向对象</span></a></h1><p>之前的文章都是使用<a href="http://www.sublimetext.com/" target="_blank" rel="noopener noreferrer">Sublime Text</a>来编写 Python 的，主要是为了更好的熟悉和了解 Python ，可是开发效率不高，也不方便，从这章开始，改为使用 Pycharm 了，在之前的篇节<a href="https://www.readwithu.com/python1/IDE.html" target="_blank" rel="noopener noreferrer">集成开发环境（IDE）: PyCharm</a>中介绍了 PyCharm ，如果如要激活软件可以通过授权服务器来激活，具体看这个网址。<a href="http://www.imsxm.com/jetbrains-license-server.html" target="_blank" rel="noopener noreferrer">JetBrains激活（http://www.imsxm.com/jetbrains-license-server.html）</a>当然你也可以尝试破解， <a href="http://blog.csdn.net/zyfortirude/article/details/70800681" target="_blank" rel="noopener noreferrer">Pycharm2017.1.1破解方式</a>，不过对于软件的升级不方便。</p><p>这篇内容非常的重要，也是我用了很多时间写的。基本上把以前写的东西都重新改了一遍。里面的代码都是我一个一个的敲的，图片也是我一个一个制作的。</p><h1 id="目录" tabindex="-1"><a class="header-anchor" href="#目录"><span>目录</span></a></h1><h1 id="一、面向对象的概念" tabindex="-1"><a class="header-anchor" href="#一、面向对象的概念"><span>一、面向对象的概念</span></a></h1><h2 id="_1、面向对象的两个基本概念" tabindex="-1"><a class="header-anchor" href="#_1、面向对象的两个基本概念"><span>1、面向对象的两个基本概念</span></a></h2><p>编程语言中，一般有两种编程思维，面向过程和面向对象。</p><p>面向过程，看重的是解决问题的过程。</p><p>这好比我们解决日常生活问题差不多，分析解决问题的步骤，然后一步一步的解决。</p><p>而面向对象是一种抽象，抽象是指用分类的眼光去看世界的一种方法。</p><p>Python 就是一门面向对象的语言,</p><p>如果你学过 Java ，就知道 Java 的编程思想就是：万事万物皆对象。Python 也不例外，在解决实际问题的过程中，可以把构成问题事务分解成各个对象。</p><p>面向对象都有两个基本的概念，分别是类和对象。</p><ul><li><strong>类</strong></li></ul><p>用来描述具有相同的属性和方法的对象的集合。它定义了该集合中每个对象所共有的属性和方法。对象是类的实例。</p><ul><li><strong>对象</strong></li></ul><p>通过类定义的数据结构实例</p><h2 id="_2、面向对象的三大特性" tabindex="-1"><a class="header-anchor" href="#_2、面向对象的三大特性"><span>2、面向对象的三大特性</span></a></h2><p>面向对象的编程语言，也有三大特性，继承，多态和封装性。</p><ul><li><strong>继承</strong></li></ul><p>即一个派生类（derived class）继承基类（base class）的字段和方法。继承也允许把一个派生类的对象作为一个基类对象对待。</p><p>例如：一个 Dog 类型的对象派生自 Animal 类，这是模拟&quot;是一个（is-a）&quot;关系（例图，Dog 是一个 Animal ）。</p><ul><li><strong>多态</strong></li></ul><p>它是指对不同类型的变量进行相同的操作，它会根据对象（或类）类型的不同而表现出不同的行为。</p><ul><li><strong>封装性</strong></li></ul><p>“封装”就是将抽象得到的数据和行为（或功能）相结合，形成一个有机的整体（即类）；封装的目的是增强安全性和简化编程，使用者不必了解具体的实现细节，而只是要通过外部接口，一特定的访问权限来使用类的成员。</p><p><strong>如果你是初次接触面向对象的编程语言，看到这里还一脸懵逼，不要紧，这是正常的。下面我们会通过大量的例子逐步了解 Python 的面向对象的知识。</strong></p><h1 id="二、类的定义和调用" tabindex="-1"><a class="header-anchor" href="#二、类的定义和调用"><span>二、类的定义和调用</span></a></h1><h2 id="_1、怎么理解类" tabindex="-1"><a class="header-anchor" href="#_1、怎么理解类"><span>1、怎么理解类？</span></a></h2><p>类是什么？</p><p>个人认为理解类，最简单的方式就是：类是一个变量和函数的集合。</p><p>可以看下下面的这张图。</p><p><img src="http://twowaterimage.oss-cn-beijing.aliyuncs.com/2020-03-09-014706.jpg" alt=""></p><p>这张图很好的诠释了类，就是把变量和函数包装在一起。</p><p>当然我们包装也不是毫无目的的包装，我们会把同性质的包装在一个类里，这样就方便我们重复使用。</p><p>所以学到现在，你会发现很多编程的设计，都是为了我们能偷懒，重复使用。</p><h2 id="_2、怎么定义类" tabindex="-1"><a class="header-anchor" href="#_2、怎么定义类"><span>2、怎么定义类</span></a></h2><p>知道了类是什么样子的，我们接下来就要学习怎么去定义类了。</p><p>类定义语法格式如下：</p><div class="language-python" data-highlighter="prismjs" data-ext="py" data-title="py"><pre><code><span class="line"><span class="token keyword">class</span> <span class="token class-name">ClassName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span></span>
<span class="line">    <span class="token operator">&lt;</span>statement<span class="token operator">-</span><span class="token number">1</span><span class="token operator">&gt;</span></span>
<span class="line">    <span class="token punctuation">.</span></span>
<span class="line">    <span class="token punctuation">.</span></span>
<span class="line">    <span class="token punctuation">.</span></span>
<span class="line">    <span class="token operator">&lt;</span>statement<span class="token operator">-</span>N<span class="token operator">&gt;</span></span>
<span class="line"></span></code></pre></div><p>可以看到，我们是用 <code>class</code> 语句来自定义一个类的，其实这就好比我们是用 <code>def</code> 语句来定义一个函数一样。</p><p>竟然说类是变量和方法的集合包，那么我们来创建一个类。</p><div class="language-python" data-highlighter="prismjs" data-ext="py" data-title="py"><pre><code><span class="line"><span class="token keyword">class</span> <span class="token class-name">ClassA</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span></span>
<span class="line">    var1 <span class="token operator">=</span> <span class="token number">100</span></span>
<span class="line">    var2 <span class="token operator">=</span> <span class="token number">0.01</span></span>
<span class="line">    var3 <span class="token operator">=</span> <span class="token string">&#39;两点水&#39;</span></span>
<span class="line"></span>
<span class="line">    <span class="token keyword">def</span> <span class="token function">fun1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span></span>
<span class="line">        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&#39;我是 fun1&#39;</span><span class="token punctuation">)</span></span>
<span class="line"></span>
<span class="line">    <span class="token keyword">def</span> <span class="token function">fun2</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span></span>
<span class="line">        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&#39;我是 fun1&#39;</span><span class="token punctuation">)</span></span>
<span class="line"></span>
<span class="line">    <span class="token keyword">def</span> <span class="token function">fun3</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span></span>
<span class="line">        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&#39;我是 fun1&#39;</span><span class="token punctuation">)</span></span>
<span class="line"></span></code></pre></div><p>你看，上面我们就定义了一个类，类名叫做 <code>ClassA</code> , 类里面的变量我们称之为属性，那么就是这个类里面有 3 个属性，分别是 <code>var1</code> , <code>var2</code> 和 <code>var3</code> 。除此之外，类里面还有 3 个类方法 <code>fun1()</code> , <code>fun2()</code> 和 <code>fun3()</code> 。</p><h2 id="_3、怎么调用类属性和类方法" tabindex="-1"><a class="header-anchor" href="#_3、怎么调用类属性和类方法"><span>3、怎么调用类属性和类方法</span></a></h2><p>我们定义了类之后，那么我们怎么调用类里面的属性和方法呢？</p><p>直接看下图：</p><p><img src="http://twowaterimage.oss-cn-beijing.aliyuncs.com/2020-03-09-014728.jpg" alt=""></p><p>这里就不文字解释了（注：做图也不容易啊，只有写过技术文章才知道，这系列文章，多耗时）</p><p>好了，知道怎么调用之后，我们尝试一下：</p><p><img src="http://twowaterimage.oss-cn-beijing.aliyuncs.com/2020-03-09-014742.jpg" alt=""></p><h1 id="三、类方法" tabindex="-1"><a class="header-anchor" href="#三、类方法"><span>三、类方法</span></a></h1><h2 id="_1、类方法如何调用类属性" tabindex="-1"><a class="header-anchor" href="#_1、类方法如何调用类属性"><span>1、类方法如何调用类属性</span></a></h2><p>通过上面我们已经会定义类了，那么这里讲一下在同一个类里，类方法如何调用类属性的。</p><p>直接看个例子吧：</p><p><img src="http://twowaterimage.oss-cn-beijing.aliyuncs.com/2019-10-08-110451.png" alt=""></p><p>注意看，在类方法上面多了个 <code>@classmethod</code> ，这是干嘛用的呢？</p><p>这是用于声明下面的函数是类函数。其实从名字就很好理解了。</p><p>class 就是类，method 就是方法。</p><p>那是不是一定需要注明这个呢？</p><p>答案是是的。</p><p>如果你没使用，是会报错的。</p><p><img src="http://twowaterimage.oss-cn-beijing.aliyuncs.com/2019-10-08-110822.png" alt=""></p><p>如果没有声明是类方法，方法参数中就没有 <code>cls</code> , 就没法通过 <code>cls</code> 获取到类属性。</p><p>因此类方法，想要调用类属性，需要以下步骤：</p><ul><li>在方法上面，用 <code>@classmethod</code> 声明该方法是类方法。只有声明了是类方法，才能使用类属性</li><li>类方法想要使用类属性，在第一个参数中，需要写上 <code>cls</code> , cls 是 class 的缩写，其实意思就是把这个类作为参数，传给自己，这样就可以使用类属性了。</li><li>类属性的使用方式就是 <code>cls.变量名</code></li></ul><p>记住喔，无论是 <code>@classmethod</code> 还是 <code>cls</code> ,都是不能省去的。</p><p>省了都会报错。</p><h2 id="_2、类方法传参" tabindex="-1"><a class="header-anchor" href="#_2、类方法传参"><span>2、类方法传参</span></a></h2><p>上面我们学习了类方法如何调用类属性，那么类方法如何传参呢？</p><p>其实很简单，跟普通的函数一样，直接增加参数就好了。</p><p>这个就直接上例子了：</p><p><img src="http://twowaterimage.oss-cn-beijing.aliyuncs.com/2019-10-08-113458.png" alt=""></p><h1 id="四、修改和增加类属性" tabindex="-1"><a class="header-anchor" href="#四、修改和增加类属性"><span>四、修改和增加类属性</span></a></h1><h2 id="_1、从内部增加和修改类属性" tabindex="-1"><a class="header-anchor" href="#_1、从内部增加和修改类属性"><span>1、从内部增加和修改类属性</span></a></h2><p>来，我们先来温习一下类的结构。</p><p><img src="http://twowaterimage.oss-cn-beijing.aliyuncs.com/2019-10-08-034102.png" alt=""></p><p>看着这个结构，提一个问题，如何修改类属性，也就是类里面的变量？</p><p>从类结构来看，我们可以猜测，从类方法来修改，也就是从类内部来修改和增加类属性。</p><p>看下具体的实例：</p><p><img src="http://twowaterimage.oss-cn-beijing.aliyuncs.com/2019-10-08-120146.png" alt=""></p><p>这里还是强调一下，例子还是要自己多写，不要只看，自己运行， 看效果。多想。</p><h2 id="_2、从外部增加和修改类属性" tabindex="-1"><a class="header-anchor" href="#_2、从外部增加和修改类属性"><span>2、从外部增加和修改类属性</span></a></h2><p>我们刚刚看了通过类方法来修改类的属性，这时我们看下从外部如何修改和增加类属性。</p><p>例子如下：</p><p><img src="http://twowaterimage.oss-cn-beijing.aliyuncs.com/2019-10-08-121135.png" alt=""></p><h1 id="五、类和对象" tabindex="-1"><a class="header-anchor" href="#五、类和对象"><span>五、类和对象</span></a></h1><h2 id="_1、类和对象之间的关系" tabindex="-1"><a class="header-anchor" href="#_1、类和对象之间的关系"><span>1、类和对象之间的关系</span></a></h2><p>这部分内容主要讲类和对象，我们先来说说类和对象之间的关系。</p><p><strong>类是对象的模板</strong></p><p>我们得先有了类，才能制作出对象。</p><p>类就相对于工厂里面的模具，对象就是根据模具制造出来的产品。</p><p><strong>从模具变成产品的过程，我们就称为类的实例化。</strong></p><p><strong>类实例化之后，就变成对象了。也就是相当于例子中的产品。</strong></p><h2 id="_2、类的实例化" tabindex="-1"><a class="header-anchor" href="#_2、类的实例化"><span>2、类的实例化</span></a></h2><p>这里强调一下，类的实例化和直接使用类的格式是不一样的。</p><p>之前我们就学过，直接使用类格式是这样的：</p><div class="language-python" data-highlighter="prismjs" data-ext="py" data-title="py"><pre><code><span class="line"><span class="token keyword">class</span> <span class="token class-name">ClassA</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span></span>
<span class="line">    var1 <span class="token operator">=</span> <span class="token string">&#39;两点水&#39;</span></span>
<span class="line"></span>
<span class="line">    <span class="token decorator annotation punctuation">@classmethod</span></span>
<span class="line">    <span class="token keyword">def</span> <span class="token function">fun1</span><span class="token punctuation">(</span>cls<span class="token punctuation">)</span><span class="token punctuation">:</span></span>
<span class="line">        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&#39;var1 值为：&#39;</span> <span class="token operator">+</span> cls<span class="token punctuation">.</span>var1<span class="token punctuation">)</span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line">ClassA<span class="token punctuation">.</span>fun1<span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line"></span></code></pre></div><p>而类的实例化是怎样的呢？</p><p>是这样的，可以仔细对比一下，类的实例化和直接使用类的格式有什么不同？</p><p><img src="http://twowaterimage.oss-cn-beijing.aliyuncs.com/2019-10-09-025401.png" alt=""></p><p>主要的不同点有：</p><ul><li>类方法里面没有了 <code>@classmethod</code> 声明了，不用声明他是类方法</li><li>类方法里面的参数 <code>cls</code> 改为 <code>self</code></li><li>类的使用，变成了先通过 <code>实例名 = 类()</code> 的方式实例化对象，为类创建一个实例，然后再使用 <code>实例名.函数()</code> 的方式调用对应的方法 ，使用 <code>实例名.变量名</code> 的方法调用类的属性</li></ul><p>这里说明一下，类方法的参数为什么 <code>cls</code> 改为 <code>self</code> ？</p><p>其实这并不是说一定要写这个，你改为什么字母，什么名字都可以。</p><p>不妨试一下：</p><p><img src="http://twowaterimage.oss-cn-beijing.aliyuncs.com/2019-10-09-032030.png" alt=""></p><p>你看，把 <code>self</code> 改为 <code>aaaaaaaa</code> 还是可以一样运行的。</p><p>只不过使用 <code>cls</code> 和 <code>self</code> 是我们的编程习惯，这也是我们的编程规范。</p><p>因为 cls 是 class 的缩写，代表这类 ， 而 self 代表这对象的意思。</p><p>所以啊，这里我们实例化对象的时候，就使用 self 。</p><p><strong>而且 self 是所有类方法位于首位、默认的特殊参数。</strong></p><p>除此之外，在这里，还要强调一个概念，当你把类实例化之后，里面的属性和方法，就不叫类属性和类方法了，改为叫实例属性和实例方法，也可以叫对象属性和对象方法。</p><p>为什么要这样强调呢？</p><p><strong>因为一个类是可以创造出多个实例对象出来的。</strong></p><p>你看下面的例子：</p><p><img src="http://twowaterimage.oss-cn-beijing.aliyuncs.com/2019-10-09-034453.png" alt=""></p><p>我不仅能用这个类创建 a 对象，还能创建 b 对象</p><h2 id="_3、实例属性和类属性" tabindex="-1"><a class="header-anchor" href="#_3、实例属性和类属性"><span>3、实例属性和类属性</span></a></h2><p>一个类可以实例化多个对象出来。</p><p><img src="http://twowaterimage.oss-cn-beijing.aliyuncs.com/2019-10-09-040408.png" alt=""></p><p>根据这个图，我们探究一下实例对象的属性和类属性之间有什么关系呢？</p><p><strong>先提出第一个问题，如果类属性改变了，实例属性会不会跟着改变呢？</strong></p><p>还是跟以前一样，提出了问题，我们直接用程序来验证就好。</p><p>看程序：</p><p><img src="http://twowaterimage.oss-cn-beijing.aliyuncs.com/2019-10-09-061015.png" alt=""></p><p>从程序运行的结果来看，<strong>类属性改变了，实例属性会跟着改变。</strong></p><p>这很好理解，因为我们的实例对象就是根据类来复制出来的，类属性改变了，实例对象的属性也会跟着改变。</p><p><strong>那么相反，如果实例属性改变了，类属性会改变吗？</strong></p><p>答案当然是不能啦。因为每个实例都是单独的个体，不能影响到类的。</p><p>具体我们做下实验：</p><p><img src="http://twowaterimage.oss-cn-beijing.aliyuncs.com/2019-10-09-062437.png" alt=""></p><p>可以看到，<strong>不管实例对象怎么修改属性值，对类的属性还是没有影响的。</strong></p><h2 id="_4、实例方法和类方法" tabindex="-1"><a class="header-anchor" href="#_4、实例方法和类方法"><span>4、实例方法和类方法</span></a></h2><p>那这里跟上面一样，还是提出同样的问题。</p><p><strong>如果类方法改变了，实例方法会不会跟着改变呢？</strong></p><p>看下下面的例子：</p><p><img src="http://twowaterimage.oss-cn-beijing.aliyuncs.com/2019-10-09-063242.png" alt=""></p><p>这里建议我的例子，各位都要仔细看一下，自己重新敲一遍。相信为什么要这么做，这么证明。</p><p>还是那句话多想，多敲。</p><p>回归正题，从运行的结果来看，类方法改变了，实例方法也是会跟着改变的。</p><p>在这个例子中，我们需要改变类方法，就用到了<strong>类的重写</strong>。</p><p>我们使用了 <code>类.原始函数 = 新函数</code> 就完了类的重写了。</p><p>要注意的是，这里的赋值是在替换方法，并不是调用函数。所以是不能加上括号的，也就是 <code>类.原始函数() = 新函数()</code> 这个写法是不对的。</p><p><strong>那么如果实例方法改变了，类方法会改变吗？</strong></p><p>如果这个问题我们需要验证的话，是不是要重写实例的方法，然后观察结果，看看类方法有没有改变，这样就能得出结果了。</p><p>可是我们是不能重写实例方法。</p><p>你看，会直接报错。</p><p><img src="http://twowaterimage.oss-cn-beijing.aliyuncs.com/2019-10-09-064303.png" alt=""></p><h1 id="六、初始化函数" tabindex="-1"><a class="header-anchor" href="#六、初始化函数"><span>六、初始化函数</span></a></h1><h2 id="_1、什么是初始化函数" tabindex="-1"><a class="header-anchor" href="#_1、什么是初始化函数"><span>1、什么是初始化函数</span></a></h2><p>初始化函数的意思是，当你创建一个实例的时候，这个函数就会被调用。</p><p>比如：</p><p><img src="http://twowaterimage.oss-cn-beijing.aliyuncs.com/2019-10-09-071102.png" alt=""></p><p>当代码在执行 <code>a = ClassA()</code> 的语句时，就自动调用了 <code>__init__(self)</code> 函数。</p><p><strong>而这个 <code>__init__(self)</code> 函数就是初始化函数，也叫构造函数。</strong></p><p>初始化函数的写法是固定的格式：中间是 <code>init</code>，意思是初始化，然后前后都要有【两个下划线】，然后 <code>__init__()</code> 的括号中，第一个参数一定要写上 <code>self</code>，不然会报错。</p><p>构造函数（初始化函数）格式如下：</p><div class="language-python" data-highlighter="prismjs" data-ext="py" data-title="py"><pre><code><span class="line"><span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">)</span><span class="token punctuation">:</span></span>
<span class="line"></span></code></pre></div><p>初始化函数一样可以传递参数的，例如：</p><p><img src="http://twowaterimage.oss-cn-beijing.aliyuncs.com/2019-10-09-073421.png" alt=""></p><h2 id="_2、析构函数" tabindex="-1"><a class="header-anchor" href="#_2、析构函数"><span>2、析构函数</span></a></h2><p>竟然一个在创建的时候，会调用构造函数，那么理所当然，这个当一个类销毁的时候，就会调用析构函数。</p><p>析构函数语法如下：</p><div class="language-python" data-highlighter="prismjs" data-ext="py" data-title="py"><pre><code><span class="line"><span class="token keyword">def</span> <span class="token function">__del__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">)</span><span class="token punctuation">:</span></span>
<span class="line"></span></code></pre></div><p>看下具体的示例：</p><p><img src="http://twowaterimage.oss-cn-beijing.aliyuncs.com/2019-10-09-084417.png" alt=""></p><h2 id="_3、python-定义类的历史遗留问题" tabindex="-1"><a class="header-anchor" href="#_3、python-定义类的历史遗留问题"><span>3、Python 定义类的历史遗留问题</span></a></h2><p>Python 在版本的迭代中，有一个关于类的历史遗留问题，就是新式类和旧式类的问题，具体先看以下的代码：</p><div class="language-python" data-highlighter="prismjs" data-ext="py" data-title="py"><pre><code><span class="line"><span class="token comment">#!/usr/bin/env python</span></span>
<span class="line"><span class="token comment"># -*- coding: UTF-8 -*-</span></span>
<span class="line"></span>
<span class="line"><span class="token comment"># 旧式类</span></span>
<span class="line"><span class="token keyword">class</span> <span class="token class-name">OldClass</span><span class="token punctuation">:</span></span>
<span class="line">    <span class="token keyword">pass</span></span>
<span class="line"></span>
<span class="line"><span class="token comment"># 新式类</span></span>
<span class="line"><span class="token keyword">class</span> <span class="token class-name">NewClass</span><span class="token punctuation">(</span><span class="token builtin">object</span><span class="token punctuation">)</span><span class="token punctuation">:</span></span>
<span class="line">    <span class="token keyword">pass</span></span>
<span class="line"></span>
<span class="line"></span></code></pre></div><p>可以看到，这里使用了两者中不同的方式定义类，可以看到最大的不同就是，新式类继承了<code>object</code> 类，在 Python2 中，我们定义类的时候最好定义新式类，当然在 Python3 中不存在这个问题了，因为 Python3 中所有类都是新式类。</p><p>那么新式类和旧式类有什么区别呢？</p><p>运行下下面的那段代码：</p><div class="language-python line-numbers-mode" data-highlighter="prismjs" data-ext="py" data-title="py"><pre><code><span class="line"><span class="token comment">#!/usr/bin/env python</span></span>
<span class="line"><span class="token comment"># -*- coding: UTF-8 -*-</span></span>
<span class="line"></span>
<span class="line"><span class="token comment"># 旧式类</span></span>
<span class="line"><span class="token keyword">class</span> <span class="token class-name">OldClass</span><span class="token punctuation">:</span></span>
<span class="line">    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> account<span class="token punctuation">,</span> name<span class="token punctuation">)</span><span class="token punctuation">:</span></span>
<span class="line">        self<span class="token punctuation">.</span>account <span class="token operator">=</span> account</span>
<span class="line">        self<span class="token punctuation">.</span>name <span class="token operator">=</span> name</span>
<span class="line"></span>
<span class="line"></span>
<span class="line"><span class="token comment"># 新式类</span></span>
<span class="line"><span class="token keyword">class</span> <span class="token class-name">NewClass</span><span class="token punctuation">(</span><span class="token builtin">object</span><span class="token punctuation">)</span><span class="token punctuation">:</span></span>
<span class="line">    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> account<span class="token punctuation">,</span> name<span class="token punctuation">)</span><span class="token punctuation">:</span></span>
<span class="line">        self<span class="token punctuation">.</span>account <span class="token operator">=</span> account</span>
<span class="line">        self<span class="token punctuation">.</span>name <span class="token operator">=</span> name</span>
<span class="line"></span>
<span class="line"></span>
<span class="line"><span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">&#39;__main__&#39;</span><span class="token punctuation">:</span></span>
<span class="line">    old_class <span class="token operator">=</span> OldClass<span class="token punctuation">(</span><span class="token number">111111</span><span class="token punctuation">,</span> <span class="token string">&#39;OldClass&#39;</span><span class="token punctuation">)</span></span>
<span class="line">    <span class="token keyword">print</span><span class="token punctuation">(</span>old_class<span class="token punctuation">)</span></span>
<span class="line">    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token builtin">type</span><span class="token punctuation">(</span>old_class<span class="token punctuation">)</span><span class="token punctuation">)</span></span>
<span class="line">    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token builtin">dir</span><span class="token punctuation">(</span>old_class<span class="token punctuation">)</span><span class="token punctuation">)</span></span>
<span class="line">    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&#39;\\n&#39;</span><span class="token punctuation">)</span></span>
<span class="line">    new_class <span class="token operator">=</span> NewClass<span class="token punctuation">(</span><span class="token number">222222</span><span class="token punctuation">,</span> <span class="token string">&#39;NewClass&#39;</span><span class="token punctuation">)</span></span>
<span class="line">    <span class="token keyword">print</span><span class="token punctuation">(</span>new_class<span class="token punctuation">)</span></span>
<span class="line">    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token builtin">type</span><span class="token punctuation">(</span>new_class<span class="token punctuation">)</span><span class="token punctuation">)</span></span>
<span class="line">    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token builtin">dir</span><span class="token punctuation">(</span>new_class<span class="token punctuation">)</span><span class="token punctuation">)</span></span>
<span class="line"></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这是 python 2.7 运行的结果：</p><div class="language-text" data-highlighter="prismjs" data-ext="text" data-title="text"><pre><code><span class="line">/Users/twowater/dev/python/test/venv/bin/python /Users/twowater/dev/python/test/com/twowater/test.py</span>
<span class="line">&lt;__main__.OldClass instance at 0x109a50560&gt;</span>
<span class="line">&lt;type &#39;instance&#39;&gt;</span>
<span class="line">[&#39;__doc__&#39;, &#39;__init__&#39;, &#39;__module__&#39;, &#39;account&#39;, &#39;name&#39;]</span>
<span class="line"></span>
<span class="line"></span>
<span class="line">&lt;__main__.NewClass object at 0x109a4b150&gt;</span>
<span class="line">&lt;class &#39;__main__.NewClass&#39;&gt;</span>
<span class="line">[&#39;__class__&#39;, &#39;__delattr__&#39;, &#39;__dict__&#39;, &#39;__doc__&#39;, &#39;__format__&#39;, &#39;__getattribute__&#39;, &#39;__hash__&#39;, &#39;__init__&#39;, &#39;__module__&#39;, &#39;__new__&#39;, &#39;__reduce__&#39;, &#39;__reduce_ex__&#39;, &#39;__repr__&#39;, &#39;__setattr__&#39;, &#39;__sizeof__&#39;, &#39;__str__&#39;, &#39;__subclasshook__&#39;, &#39;__weakref__&#39;, &#39;account&#39;, &#39;name&#39;]</span>
<span class="line"></span>
<span class="line">Process finished with exit code 0</span>
<span class="line"></span>
<span class="line"></span></code></pre></div><p>这是 Python 3.6 运行的结果：</p><div class="language-text" data-highlighter="prismjs" data-ext="text" data-title="text"><pre><code><span class="line">/usr/local/bin/python3.6 /Users/twowater/dev/python/test/com/twowater/test.py</span>
<span class="line">&lt;__main__.OldClass object at 0x1038ba630&gt;</span>
<span class="line">&lt;class &#39;__main__.OldClass&#39;&gt;</span>
<span class="line">[&#39;__class__&#39;, &#39;__delattr__&#39;, &#39;__dict__&#39;, &#39;__dir__&#39;, &#39;__doc__&#39;, &#39;__eq__&#39;, &#39;__format__&#39;, &#39;__ge__&#39;, &#39;__getattribute__&#39;, &#39;__gt__&#39;, &#39;__hash__&#39;, &#39;__init__&#39;, &#39;__init_subclass__&#39;, &#39;__le__&#39;, &#39;__lt__&#39;, &#39;__module__&#39;, &#39;__ne__&#39;, &#39;__new__&#39;, &#39;__reduce__&#39;, &#39;__reduce_ex__&#39;, &#39;__repr__&#39;, &#39;__setattr__&#39;, &#39;__sizeof__&#39;, &#39;__str__&#39;, &#39;__subclasshook__&#39;, &#39;__weakref__&#39;, &#39;account&#39;, &#39;name&#39;]</span>
<span class="line"></span>
<span class="line"></span>
<span class="line">&lt;__main__.NewClass object at 0x103e3c9e8&gt;</span>
<span class="line">&lt;class &#39;__main__.NewClass&#39;&gt;</span>
<span class="line">[&#39;__class__&#39;, &#39;__delattr__&#39;, &#39;__dict__&#39;, &#39;__dir__&#39;, &#39;__doc__&#39;, &#39;__eq__&#39;, &#39;__format__&#39;, &#39;__ge__&#39;, &#39;__getattribute__&#39;, &#39;__gt__&#39;, &#39;__hash__&#39;, &#39;__init__&#39;, &#39;__init_subclass__&#39;, &#39;__le__&#39;, &#39;__lt__&#39;, &#39;__module__&#39;, &#39;__ne__&#39;, &#39;__new__&#39;, &#39;__reduce__&#39;, &#39;__reduce_ex__&#39;, &#39;__repr__&#39;, &#39;__setattr__&#39;, &#39;__sizeof__&#39;, &#39;__str__&#39;, &#39;__subclasshook__&#39;, &#39;__weakref__&#39;, &#39;account&#39;, &#39;name&#39;]</span>
<span class="line"></span>
<span class="line">Process finished with exit code 0</span>
<span class="line"></span>
<span class="line"></span></code></pre></div><p>仔细观察输出的结果，对比一下，就能观察出来，注意喔，Pyhton3 中输出的结果是一模一样的，因为Python3 中没有新式类旧式类的问题。</p><h1 id="七、类的继承" tabindex="-1"><a class="header-anchor" href="#七、类的继承"><span>七、类的继承</span></a></h1><h2 id="_1、定义类的继承" tabindex="-1"><a class="header-anchor" href="#_1、定义类的继承"><span>1、定义类的继承</span></a></h2><p>说到继承，你一定会联想到继承你老爸的家产之类的。</p><p>类的继承也是一样。</p><p>比如有一个旧类，是可以算平均数的。然后这时候有一个新类，也要用到算平均数，那么这时候我们就可以使用继承的方式。新类继承旧类，这样子新类也就有这个功能了。</p><p>通常情况下，我们叫旧类为父类，新类为子类。</p><p>首先我们来看下类的继承的基本语法：</p><div class="language-python" data-highlighter="prismjs" data-ext="py" data-title="py"><pre><code><span class="line"><span class="token keyword">class</span> <span class="token class-name">ClassName</span><span class="token punctuation">(</span>BaseClassName<span class="token punctuation">)</span><span class="token punctuation">:</span></span>
<span class="line">    <span class="token operator">&lt;</span>statement<span class="token operator">-</span><span class="token number">1</span><span class="token operator">&gt;</span></span>
<span class="line">    <span class="token punctuation">.</span></span>
<span class="line">    <span class="token punctuation">.</span></span>
<span class="line">    <span class="token punctuation">.</span></span>
<span class="line">    <span class="token operator">&lt;</span>statement<span class="token operator">-</span>N<span class="token operator">&gt;</span></span>
<span class="line"></span></code></pre></div><p>在定义类的时候，可以在括号里写继承的类，如果不用继承类的时候，也要写继承 object 类，因为在 Python 中 object 类是一切类的父类。</p><p>当然上面的是单继承，Python 也是支持多继承的，具体的语法如下：</p><div class="language-python" data-highlighter="prismjs" data-ext="py" data-title="py"><pre><code><span class="line"><span class="token keyword">class</span> <span class="token class-name">ClassName</span><span class="token punctuation">(</span>Base1<span class="token punctuation">,</span>Base2<span class="token punctuation">,</span>Base3<span class="token punctuation">)</span><span class="token punctuation">:</span></span>
<span class="line">    <span class="token operator">&lt;</span>statement<span class="token operator">-</span><span class="token number">1</span><span class="token operator">&gt;</span></span>
<span class="line">    <span class="token punctuation">.</span></span>
<span class="line">    <span class="token punctuation">.</span></span>
<span class="line">    <span class="token punctuation">.</span></span>
<span class="line">    <span class="token operator">&lt;</span>statement<span class="token operator">-</span>N<span class="token operator">&gt;</span></span>
<span class="line"></span></code></pre></div><p>多继承有一点需要注意的：若是父类中有相同的方法名，而在子类使用时未指定，python 在圆括号中父类的顺序，从左至右搜索 ， 即方法在子类中未找到时，从左到右查找父类中是否包含方法。</p><p>那么继承的子类可以干什么呢？</p><p>继承的子类的好处：</p><ul><li>会继承父类的属性和方法</li><li>可以自己定义，覆盖父类的属性和方法</li></ul><h2 id="_2、调用父类的方法" tabindex="-1"><a class="header-anchor" href="#_2、调用父类的方法"><span>2、调用父类的方法</span></a></h2><p>一个类继承了父类后，可以直接调用父类的方法的，比如下面的例子，<code>UserInfo2</code> 继承自父类 <code>UserInfo</code> ，可以直接调用父类的 <code>get_account</code> 方法。</p><div class="language-python line-numbers-mode" data-highlighter="prismjs" data-ext="py" data-title="py"><pre><code><span class="line"><span class="token comment">#!/usr/bin/env python</span></span>
<span class="line"><span class="token comment"># -*- coding: UTF-8 -*-</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">class</span> <span class="token class-name">UserInfo</span><span class="token punctuation">(</span><span class="token builtin">object</span><span class="token punctuation">)</span><span class="token punctuation">:</span></span>
<span class="line">    lv <span class="token operator">=</span> <span class="token number">5</span></span>
<span class="line"></span>
<span class="line">    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> name<span class="token punctuation">,</span> age<span class="token punctuation">,</span> account<span class="token punctuation">)</span><span class="token punctuation">:</span></span>
<span class="line">        self<span class="token punctuation">.</span>name <span class="token operator">=</span> name</span>
<span class="line">        self<span class="token punctuation">.</span>_age <span class="token operator">=</span> age</span>
<span class="line">        self<span class="token punctuation">.</span>__account <span class="token operator">=</span> account</span>
<span class="line"></span>
<span class="line">    <span class="token keyword">def</span> <span class="token function">get_account</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span></span>
<span class="line">        <span class="token keyword">return</span> self<span class="token punctuation">.</span>__account</span>
<span class="line"></span>
<span class="line"></span>
<span class="line"><span class="token keyword">class</span> <span class="token class-name">UserInfo2</span><span class="token punctuation">(</span>UserInfo<span class="token punctuation">)</span><span class="token punctuation">:</span></span>
<span class="line">    <span class="token keyword">pass</span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"><span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">&#39;__main__&#39;</span><span class="token punctuation">:</span></span>
<span class="line">    userInfo2 <span class="token operator">=</span> UserInfo2<span class="token punctuation">(</span><span class="token string">&#39;两点水&#39;</span><span class="token punctuation">,</span> <span class="token number">23</span><span class="token punctuation">,</span> <span class="token number">347073565</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token keyword">print</span><span class="token punctuation">(</span>userInfo2<span class="token punctuation">.</span>get_account<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span></span>
<span class="line"></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_3、父类方法的重写" tabindex="-1"><a class="header-anchor" href="#_3、父类方法的重写"><span>3、父类方法的重写</span></a></h2><p>当然，也可以重写父类的方法。</p><p>示例：</p><div class="language-python line-numbers-mode" data-highlighter="prismjs" data-ext="py" data-title="py"><pre><code><span class="line"><span class="token comment">#!/usr/bin/env python3</span></span>
<span class="line"><span class="token comment"># -*- coding: UTF-8 -*-</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">class</span> <span class="token class-name">UserInfo</span><span class="token punctuation">(</span><span class="token builtin">object</span><span class="token punctuation">)</span><span class="token punctuation">:</span></span>
<span class="line">    lv <span class="token operator">=</span> <span class="token number">5</span></span>
<span class="line"></span>
<span class="line">    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> name<span class="token punctuation">,</span> age<span class="token punctuation">,</span> account<span class="token punctuation">)</span><span class="token punctuation">:</span></span>
<span class="line">        self<span class="token punctuation">.</span>name <span class="token operator">=</span> name</span>
<span class="line">        self<span class="token punctuation">.</span>_age <span class="token operator">=</span> age</span>
<span class="line">        self<span class="token punctuation">.</span>__account <span class="token operator">=</span> account</span>
<span class="line"></span>
<span class="line">    <span class="token keyword">def</span> <span class="token function">get_account</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span></span>
<span class="line">        <span class="token keyword">return</span> self<span class="token punctuation">.</span>__account</span>
<span class="line"></span>
<span class="line">    <span class="token decorator annotation punctuation">@classmethod</span></span>
<span class="line">    <span class="token keyword">def</span> <span class="token function">get_name</span><span class="token punctuation">(</span>cls<span class="token punctuation">)</span><span class="token punctuation">:</span></span>
<span class="line">        <span class="token keyword">return</span> cls<span class="token punctuation">.</span>lv</span>
<span class="line"></span>
<span class="line">    <span class="token decorator annotation punctuation">@property</span></span>
<span class="line">    <span class="token keyword">def</span> <span class="token function">get_age</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span></span>
<span class="line">        <span class="token keyword">return</span> self<span class="token punctuation">.</span>_age</span>
<span class="line"></span>
<span class="line"></span>
<span class="line"><span class="token keyword">class</span> <span class="token class-name">UserInfo2</span><span class="token punctuation">(</span>UserInfo<span class="token punctuation">)</span><span class="token punctuation">:</span></span>
<span class="line">    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> name<span class="token punctuation">,</span> age<span class="token punctuation">,</span> account<span class="token punctuation">,</span> sex<span class="token punctuation">)</span><span class="token punctuation">:</span></span>
<span class="line">        <span class="token builtin">super</span><span class="token punctuation">(</span>UserInfo2<span class="token punctuation">,</span> self<span class="token punctuation">)</span><span class="token punctuation">.</span>__init__<span class="token punctuation">(</span>name<span class="token punctuation">,</span> age<span class="token punctuation">,</span> account<span class="token punctuation">)</span></span>
<span class="line">        self<span class="token punctuation">.</span>sex <span class="token operator">=</span> sex<span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"><span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">&#39;__main__&#39;</span><span class="token punctuation">:</span></span>
<span class="line">    userInfo2 <span class="token operator">=</span> UserInfo2<span class="token punctuation">(</span><span class="token string">&#39;两点水&#39;</span><span class="token punctuation">,</span> <span class="token number">23</span><span class="token punctuation">,</span> <span class="token number">347073565</span><span class="token punctuation">,</span> <span class="token string">&#39;男&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token comment"># 打印所有属性</span></span>
<span class="line">    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token builtin">dir</span><span class="token punctuation">(</span>userInfo2<span class="token punctuation">)</span><span class="token punctuation">)</span></span>
<span class="line">    <span class="token comment"># 打印构造函数中的属性</span></span>
<span class="line">    <span class="token keyword">print</span><span class="token punctuation">(</span>userInfo2<span class="token punctuation">.</span>__dict__<span class="token punctuation">)</span></span>
<span class="line">    <span class="token keyword">print</span><span class="token punctuation">(</span>UserInfo2<span class="token punctuation">.</span>get_name<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span></span>
<span class="line"></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>最后打印的结果：</p><p><img src="http://twowaterimage.oss-cn-beijing.aliyuncs.com/2019-10-09-Python 类的继承.png" alt=""></p><p>这里就是重写了父类的构造函数。</p><h2 id="_4、子类的类型判断" tabindex="-1"><a class="header-anchor" href="#_4、子类的类型判断"><span>4、子类的类型判断</span></a></h2><p>对于 class 的继承关系来说，有些时候我们需要判断 class 的类型，该怎么办呢？</p><p>可以使用 <code>isinstance()</code> 函数,</p><p>一个例子就能看懂 <code>isinstance()</code> 函数的用法了。</p><div class="language-python line-numbers-mode" data-highlighter="prismjs" data-ext="py" data-title="py"><pre><code><span class="line"><span class="token comment">#!/usr/bin/env python3</span></span>
<span class="line"><span class="token comment"># -*- coding: UTF-8 -*-</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">class</span> <span class="token class-name">User1</span><span class="token punctuation">(</span><span class="token builtin">object</span><span class="token punctuation">)</span><span class="token punctuation">:</span></span>
<span class="line">    <span class="token keyword">pass</span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"><span class="token keyword">class</span> <span class="token class-name">User2</span><span class="token punctuation">(</span>User1<span class="token punctuation">)</span><span class="token punctuation">:</span></span>
<span class="line">    <span class="token keyword">pass</span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"><span class="token keyword">class</span> <span class="token class-name">User3</span><span class="token punctuation">(</span>User2<span class="token punctuation">)</span><span class="token punctuation">:</span></span>
<span class="line">    <span class="token keyword">pass</span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"><span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">&#39;__main__&#39;</span><span class="token punctuation">:</span></span>
<span class="line">    user1 <span class="token operator">=</span> User1<span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line">    user2 <span class="token operator">=</span> User2<span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line">    user3 <span class="token operator">=</span> User3<span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line">    <span class="token comment"># isinstance()就可以告诉我们，一个对象是否是某种类型</span></span>
<span class="line">    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token builtin">isinstance</span><span class="token punctuation">(</span>user3<span class="token punctuation">,</span> User2<span class="token punctuation">)</span><span class="token punctuation">)</span></span>
<span class="line">    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token builtin">isinstance</span><span class="token punctuation">(</span>user3<span class="token punctuation">,</span> User1<span class="token punctuation">)</span><span class="token punctuation">)</span></span>
<span class="line">    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token builtin">isinstance</span><span class="token punctuation">(</span>user3<span class="token punctuation">,</span> User3<span class="token punctuation">)</span><span class="token punctuation">)</span></span>
<span class="line">    <span class="token comment"># 基本类型也可以用isinstance()判断</span></span>
<span class="line">    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token builtin">isinstance</span><span class="token punctuation">(</span><span class="token string">&#39;两点水&#39;</span><span class="token punctuation">,</span> <span class="token builtin">str</span><span class="token punctuation">)</span><span class="token punctuation">)</span></span>
<span class="line">    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token builtin">isinstance</span><span class="token punctuation">(</span><span class="token number">347073565</span><span class="token punctuation">,</span> <span class="token builtin">int</span><span class="token punctuation">)</span><span class="token punctuation">)</span></span>
<span class="line">    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token builtin">isinstance</span><span class="token punctuation">(</span><span class="token number">347073565</span><span class="token punctuation">,</span> <span class="token builtin">str</span><span class="token punctuation">)</span><span class="token punctuation">)</span></span>
<span class="line"></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>输出的结果如下：</p><div class="language-txt" data-highlighter="prismjs" data-ext="txt" data-title="txt"><pre><code><span class="line">True</span>
<span class="line">True</span>
<span class="line">True</span>
<span class="line">True</span>
<span class="line">True</span>
<span class="line">False</span>
<span class="line"></span></code></pre></div><p>可以看到 <code>isinstance()</code> 不仅可以告诉我们，一个对象是否是某种类型，也可以用于基本类型的判断。</p><h1 id="八、类的多态" tabindex="-1"><a class="header-anchor" href="#八、类的多态"><span>八、类的多态</span></a></h1><p>多态的概念其实不难理解，它是指对不同类型的变量进行相同的操作，它会根据对象（或类）类型的不同而表现出不同的行为。</p><p>事实上，我们经常用到多态的性质，比如：</p><div class="language-text" data-highlighter="prismjs" data-ext="text" data-title="text"><pre><code><span class="line">&gt;&gt;&gt; 1 + 2</span>
<span class="line">3</span>
<span class="line">&gt;&gt;&gt; &#39;a&#39; + &#39;b&#39;</span>
<span class="line">&#39;ab&#39;</span>
<span class="line"></span></code></pre></div><p>可以看到，我们对两个整数进行 + 操作，会返回它们的和，对两个字符进行相同的 + 操作，会返回拼接后的字符串。</p><p>也就是说，不同类型的对象对同一消息会作出不同的响应。</p><p>看下面的实例，来了解多态：</p><div class="language-python line-numbers-mode" data-highlighter="prismjs" data-ext="py" data-title="py"><pre><code><span class="line"><span class="token comment">#!/usr/bin/env python3</span></span>
<span class="line"><span class="token comment"># -*- coding: UTF-8 -*-</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">class</span> <span class="token class-name">User</span><span class="token punctuation">(</span><span class="token builtin">object</span><span class="token punctuation">)</span><span class="token punctuation">:</span></span>
<span class="line">    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> name<span class="token punctuation">)</span><span class="token punctuation">:</span></span>
<span class="line">        self<span class="token punctuation">.</span>name <span class="token operator">=</span> name</span>
<span class="line"></span>
<span class="line">    <span class="token keyword">def</span> <span class="token function">printUser</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span></span>
<span class="line">        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&#39;Hello !&#39;</span> <span class="token operator">+</span> self<span class="token punctuation">.</span>name<span class="token punctuation">)</span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"><span class="token keyword">class</span> <span class="token class-name">UserVip</span><span class="token punctuation">(</span>User<span class="token punctuation">)</span><span class="token punctuation">:</span></span>
<span class="line">    <span class="token keyword">def</span> <span class="token function">printUser</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span></span>
<span class="line">        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&#39;Hello ! 尊敬的Vip用户：&#39;</span> <span class="token operator">+</span> self<span class="token punctuation">.</span>name<span class="token punctuation">)</span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"><span class="token keyword">class</span> <span class="token class-name">UserGeneral</span><span class="token punctuation">(</span>User<span class="token punctuation">)</span><span class="token punctuation">:</span></span>
<span class="line">    <span class="token keyword">def</span> <span class="token function">printUser</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span></span>
<span class="line">        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&#39;Hello ! 尊敬的用户：&#39;</span> <span class="token operator">+</span> self<span class="token punctuation">.</span>name<span class="token punctuation">)</span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"><span class="token keyword">def</span> <span class="token function">printUserInfo</span><span class="token punctuation">(</span>user<span class="token punctuation">)</span><span class="token punctuation">:</span></span>
<span class="line">    user<span class="token punctuation">.</span>printUser<span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"><span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">&#39;__main__&#39;</span><span class="token punctuation">:</span></span>
<span class="line">    userVip <span class="token operator">=</span> UserVip<span class="token punctuation">(</span><span class="token string">&#39;两点水&#39;</span><span class="token punctuation">)</span></span>
<span class="line">    printUserInfo<span class="token punctuation">(</span>userVip<span class="token punctuation">)</span></span>
<span class="line">    userGeneral <span class="token operator">=</span> UserGeneral<span class="token punctuation">(</span><span class="token string">&#39;水水水&#39;</span><span class="token punctuation">)</span></span>
<span class="line">    printUserInfo<span class="token punctuation">(</span>userGeneral<span class="token punctuation">)</span></span>
<span class="line"></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>输出的结果:</p><div class="language-txt" data-highlighter="prismjs" data-ext="txt" data-title="txt"><pre><code><span class="line">Hello ! 尊敬的Vip用户：两点水</span>
<span class="line">Hello ! 尊敬的用户：水水水</span>
<span class="line"></span></code></pre></div><p>可以看到，userVip 和 userGeneral 是两个不同的对象，对它们调用 printUserInfo 方法，它们会自动调用实际类型的 printUser 方法，作出不同的响应。这就是多态的魅力。</p><p>要注意喔，有了继承，才有了多态，也会有不同类的对象对同一消息会作出不同的相应。</p><p>最后，本章的所有代码都可以在 <a href="https://github.com/TwoWater/Python" target="_blank" rel="noopener noreferrer">https://github.com/TwoWater/Python</a> 上面找到，文章的内容和源文件都放在上面。同步更新到 Gitbooks。</p><h1 id="九、类的访问控制" tabindex="-1"><a class="header-anchor" href="#九、类的访问控制"><span>九、类的访问控制</span></a></h1><h2 id="_1、类属性的访问控制" tabindex="-1"><a class="header-anchor" href="#_1、类属性的访问控制"><span>1、类属性的访问控制</span></a></h2><p>在 Java 中，有 public （公共）属性 和 private （私有）属性，这可以对属性进行访问控制。</p><p>那么在 Python 中有没有属性的访问控制呢？</p><p>一般情况下，我们会使用 <code>__private_attrs</code> 两个下划线开头，声明该属性为私有，不能在类地外部被使用或直接访问。在类内部的方法中使用时 <code>self.__private_attrs</code>。</p><p>为什么只能说一般情况下呢？</p><p>因为实际上， Python 中是没有提供私有属性等功能的。</p><p>但是 Python 对属性的访问控制是靠程序员自觉的。为什么这么说呢？</p><p>看看下面的示例：</p><p><img src="http://twowaterimage.oss-cn-beijing.aliyuncs.com/2019-10-09-Python 属性访问控制.png" alt=""></p><p>仔细看图片，为什么说双下划线不是真正的私有属性呢？我们看下下面的例子，用下面的例子来验证：</p><div class="language-python line-numbers-mode" data-highlighter="prismjs" data-ext="py" data-title="py"><pre><code><span class="line"></span>
<span class="line"><span class="token comment">#!/usr/bin/env python</span></span>
<span class="line"><span class="token comment"># -*- coding: UTF-8 -*-</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">class</span> <span class="token class-name">UserInfo</span><span class="token punctuation">(</span><span class="token builtin">object</span><span class="token punctuation">)</span><span class="token punctuation">:</span></span>
<span class="line">    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> name<span class="token punctuation">,</span> age<span class="token punctuation">,</span> account<span class="token punctuation">)</span><span class="token punctuation">:</span></span>
<span class="line">        self<span class="token punctuation">.</span>name <span class="token operator">=</span> name</span>
<span class="line">        self<span class="token punctuation">.</span>_age <span class="token operator">=</span> age</span>
<span class="line">        self<span class="token punctuation">.</span>__account <span class="token operator">=</span> account</span>
<span class="line"></span>
<span class="line">    <span class="token keyword">def</span> <span class="token function">get_account</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span></span>
<span class="line">        <span class="token keyword">return</span> self<span class="token punctuation">.</span>__account</span>
<span class="line"></span>
<span class="line"></span>
<span class="line"><span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">&#39;__main__&#39;</span><span class="token punctuation">:</span></span>
<span class="line">    userInfo <span class="token operator">=</span> UserInfo<span class="token punctuation">(</span><span class="token string">&#39;两点水&#39;</span><span class="token punctuation">,</span> <span class="token number">23</span><span class="token punctuation">,</span> <span class="token number">347073565</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token comment"># 打印所有属性</span></span>
<span class="line">    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token builtin">dir</span><span class="token punctuation">(</span>userInfo<span class="token punctuation">)</span><span class="token punctuation">)</span></span>
<span class="line">    <span class="token comment"># 打印构造函数中的属性</span></span>
<span class="line">    <span class="token keyword">print</span><span class="token punctuation">(</span>userInfo<span class="token punctuation">.</span>__dict__<span class="token punctuation">)</span></span>
<span class="line">    <span class="token keyword">print</span><span class="token punctuation">(</span>userInfo<span class="token punctuation">.</span>get_account<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span></span>
<span class="line">    <span class="token comment"># 用于验证双下划线是否是真正的私有属性</span></span>
<span class="line">    <span class="token keyword">print</span><span class="token punctuation">(</span>userInfo<span class="token punctuation">.</span>_UserInfo__account<span class="token punctuation">)</span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>输出的结果如下图：</p><p><img src="http://twowaterimage.oss-cn-beijing.aliyuncs.com/2019-10-09-Python双下划线属性.png" alt=""></p><h2 id="_2、类专有的方法" tabindex="-1"><a class="header-anchor" href="#_2、类专有的方法"><span>2、类专有的方法</span></a></h2><p>一个类创建的时候，就会包含一些方法，主要有以下方法：</p><p>类的专有方法：</p><table><thead><tr><th>方法</th><th>说明</th></tr></thead><tbody><tr><td><code>__init__</code></td><td>构造函数，在生成对象时调用</td></tr><tr><td><code>__del__</code></td><td>析构函数，释放对象时使用</td></tr><tr><td><code>__repr__</code></td><td>打印，转换</td></tr><tr><td><code>__setitem__</code></td><td>按照索引赋值</td></tr><tr><td><code>__getitem__</code></td><td>按照索引获取值</td></tr><tr><td><code>__len__</code></td><td>获得长度</td></tr><tr><td><code>__cmp__</code></td><td>比较运算</td></tr><tr><td><code>__call__</code></td><td>函数调用</td></tr><tr><td><code>__add__</code></td><td>加运算</td></tr><tr><td><code>__sub__</code></td><td>减运算</td></tr><tr><td><code>__mul__</code></td><td>乘运算</td></tr><tr><td><code>__div__</code></td><td>除运算</td></tr><tr><td><code>__mod__</code></td><td>求余运算</td></tr><tr><td><code>__pow__</code></td><td>乘方</td></tr></tbody></table><p>当然有些时候我们需要获取类的相关信息，我们可以使用如下的方法：</p><ul><li><code>type(obj)</code>：来获取对象的相应类型；</li><li><code>isinstance(obj, type)</code>：判断对象是否为指定的 type 类型的实例；</li><li><code>hasattr(obj, attr)</code>：判断对象是否具有指定属性/方法；</li><li><code>getattr(obj, attr[, default])</code> 获取属性/方法的值, 要是没有对应的属性则返回 default 值（前提是设置了 default），否则会抛出 AttributeError 异常；</li><li><code>setattr(obj, attr, value)</code>：设定该属性/方法的值，类似于 obj.attr=value；</li><li><code>dir(obj)</code>：可以获取相应对象的所有属性和方法名的列表：</li></ul><h2 id="_3、方法的访问控制" tabindex="-1"><a class="header-anchor" href="#_3、方法的访问控制"><span>3、方法的访问控制</span></a></h2><p>其实我们也可以把方法看成是类的属性的，那么方法的访问控制也是跟属性是一样的，也是没有实质上的私有方法。一切都是靠程序员自觉遵守 Python 的编程规范。</p><p>示例如下，具体规则也是跟属性一样的，</p><div class="language-python" data-highlighter="prismjs" data-ext="py" data-title="py"><pre><code><span class="line"><span class="token comment">#!/usr/bin/env python</span></span>
<span class="line"><span class="token comment"># -*- coding: UTF-8 -*-</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">class</span> <span class="token class-name">User</span><span class="token punctuation">(</span><span class="token builtin">object</span><span class="token punctuation">)</span><span class="token punctuation">:</span></span>
<span class="line">    <span class="token keyword">def</span> <span class="token function">upgrade</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span></span>
<span class="line">        <span class="token keyword">pass</span></span>
<span class="line"></span>
<span class="line">    <span class="token keyword">def</span> <span class="token function">_buy_equipment</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span></span>
<span class="line">        <span class="token keyword">pass</span></span>
<span class="line"></span>
<span class="line">    <span class="token keyword">def</span> <span class="token function">__pk</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span></span>
<span class="line">        <span class="token keyword">pass</span></span>
<span class="line"></span>
<span class="line"></span></code></pre></div>`,249)]))}const o=s(t,[["render",l]]),u=JSON.parse('{"path":"/python-tutor/basics/oop.html","title":"面向对象","lang":"zh-CN","frontmatter":{"description":"面向对象 之前的文章都是使用Sublime Text来编写 Python 的，主要是为了更好的熟悉和了解 Python ，可是开发效率不高，也不方便，从这章开始，改为使用 Pycharm 了，在之前的篇节集成开发环境（IDE）: PyCharm中介绍了 PyCharm ，如果如要激活软件可以通过授权服务器来激活，具体看这个网址。JetBrains激活（...","head":[["meta",{"property":"og:url","content":"https://yzqdev.github.io/cs-guide/cs-guide/python-tutor/basics/oop.html"}],["meta",{"property":"og:site_name","content":"cs-guide"}],["meta",{"property":"og:title","content":"面向对象"}],["meta",{"property":"og:description","content":"面向对象 之前的文章都是使用Sublime Text来编写 Python 的，主要是为了更好的熟悉和了解 Python ，可是开发效率不高，也不方便，从这章开始，改为使用 Pycharm 了，在之前的篇节集成开发环境（IDE）: PyCharm中介绍了 PyCharm ，如果如要激活软件可以通过授权服务器来激活，具体看这个网址。JetBrains激活（..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:image","content":"http://twowaterimage.oss-cn-beijing.aliyuncs.com/2020-03-09-014706.jpg"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2023-05-22T07:03:15.000Z"}],["meta",{"property":"article:modified_time","content":"2023-05-22T07:03:15.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"面向对象\\",\\"image\\":[\\"http://twowaterimage.oss-cn-beijing.aliyuncs.com/2020-03-09-014706.jpg\\",\\"http://twowaterimage.oss-cn-beijing.aliyuncs.com/2020-03-09-014728.jpg\\",\\"http://twowaterimage.oss-cn-beijing.aliyuncs.com/2020-03-09-014742.jpg\\",\\"http://twowaterimage.oss-cn-beijing.aliyuncs.com/2019-10-08-110451.png\\",\\"http://twowaterimage.oss-cn-beijing.aliyuncs.com/2019-10-08-110822.png\\",\\"http://twowaterimage.oss-cn-beijing.aliyuncs.com/2019-10-08-113458.png\\",\\"http://twowaterimage.oss-cn-beijing.aliyuncs.com/2019-10-08-034102.png\\",\\"http://twowaterimage.oss-cn-beijing.aliyuncs.com/2019-10-08-120146.png\\",\\"http://twowaterimage.oss-cn-beijing.aliyuncs.com/2019-10-08-121135.png\\",\\"http://twowaterimage.oss-cn-beijing.aliyuncs.com/2019-10-09-025401.png\\",\\"http://twowaterimage.oss-cn-beijing.aliyuncs.com/2019-10-09-032030.png\\",\\"http://twowaterimage.oss-cn-beijing.aliyuncs.com/2019-10-09-034453.png\\",\\"http://twowaterimage.oss-cn-beijing.aliyuncs.com/2019-10-09-040408.png\\",\\"http://twowaterimage.oss-cn-beijing.aliyuncs.com/2019-10-09-061015.png\\",\\"http://twowaterimage.oss-cn-beijing.aliyuncs.com/2019-10-09-062437.png\\",\\"http://twowaterimage.oss-cn-beijing.aliyuncs.com/2019-10-09-063242.png\\",\\"http://twowaterimage.oss-cn-beijing.aliyuncs.com/2019-10-09-064303.png\\",\\"http://twowaterimage.oss-cn-beijing.aliyuncs.com/2019-10-09-071102.png\\",\\"http://twowaterimage.oss-cn-beijing.aliyuncs.com/2019-10-09-073421.png\\",\\"http://twowaterimage.oss-cn-beijing.aliyuncs.com/2019-10-09-084417.png\\",\\"http://twowaterimage.oss-cn-beijing.aliyuncs.com/2019-10-09-Python%20%E7%B1%BB%E7%9A%84%E7%BB%A7%E6%89%BF.png\\",\\"http://twowaterimage.oss-cn-beijing.aliyuncs.com/2019-10-09-Python%20%E5%B1%9E%E6%80%A7%E8%AE%BF%E9%97%AE%E6%8E%A7%E5%88%B6.png\\",\\"http://twowaterimage.oss-cn-beijing.aliyuncs.com/2019-10-09-Python%E5%8F%8C%E4%B8%8B%E5%88%92%E7%BA%BF%E5%B1%9E%E6%80%A7.png\\"],\\"dateModified\\":\\"2023-05-22T07:03:15.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"yzqdev\\",\\"url\\":\\"http://www.yzqdev.top\\"}]}"]]},"headers":[{"level":2,"title":"1、面向对象的两个基本概念","slug":"_1、面向对象的两个基本概念","link":"#_1、面向对象的两个基本概念","children":[]},{"level":2,"title":"2、面向对象的三大特性","slug":"_2、面向对象的三大特性","link":"#_2、面向对象的三大特性","children":[]},{"level":2,"title":"1、怎么理解类？","slug":"_1、怎么理解类","link":"#_1、怎么理解类","children":[]},{"level":2,"title":"2、怎么定义类","slug":"_2、怎么定义类","link":"#_2、怎么定义类","children":[]},{"level":2,"title":"3、怎么调用类属性和类方法","slug":"_3、怎么调用类属性和类方法","link":"#_3、怎么调用类属性和类方法","children":[]},{"level":2,"title":"1、类方法如何调用类属性","slug":"_1、类方法如何调用类属性","link":"#_1、类方法如何调用类属性","children":[]},{"level":2,"title":"2、类方法传参","slug":"_2、类方法传参","link":"#_2、类方法传参","children":[]},{"level":2,"title":"1、从内部增加和修改类属性","slug":"_1、从内部增加和修改类属性","link":"#_1、从内部增加和修改类属性","children":[]},{"level":2,"title":"2、从外部增加和修改类属性","slug":"_2、从外部增加和修改类属性","link":"#_2、从外部增加和修改类属性","children":[]},{"level":2,"title":"1、类和对象之间的关系","slug":"_1、类和对象之间的关系","link":"#_1、类和对象之间的关系","children":[]},{"level":2,"title":"2、类的实例化","slug":"_2、类的实例化","link":"#_2、类的实例化","children":[]},{"level":2,"title":"3、实例属性和类属性","slug":"_3、实例属性和类属性","link":"#_3、实例属性和类属性","children":[]},{"level":2,"title":"4、实例方法和类方法","slug":"_4、实例方法和类方法","link":"#_4、实例方法和类方法","children":[]},{"level":2,"title":"1、什么是初始化函数","slug":"_1、什么是初始化函数","link":"#_1、什么是初始化函数","children":[]},{"level":2,"title":"2、析构函数","slug":"_2、析构函数","link":"#_2、析构函数","children":[]},{"level":2,"title":"3、Python 定义类的历史遗留问题","slug":"_3、python-定义类的历史遗留问题","link":"#_3、python-定义类的历史遗留问题","children":[]},{"level":2,"title":"1、定义类的继承","slug":"_1、定义类的继承","link":"#_1、定义类的继承","children":[]},{"level":2,"title":"2、调用父类的方法","slug":"_2、调用父类的方法","link":"#_2、调用父类的方法","children":[]},{"level":2,"title":"3、父类方法的重写","slug":"_3、父类方法的重写","link":"#_3、父类方法的重写","children":[]},{"level":2,"title":"4、子类的类型判断","slug":"_4、子类的类型判断","link":"#_4、子类的类型判断","children":[]},{"level":2,"title":"1、类属性的访问控制","slug":"_1、类属性的访问控制","link":"#_1、类属性的访问控制","children":[]},{"level":2,"title":"2、类专有的方法","slug":"_2、类专有的方法","link":"#_2、类专有的方法","children":[]},{"level":2,"title":"3、方法的访问控制","slug":"_3、方法的访问控制","link":"#_3、方法的访问控制","children":[]}],"git":{"createdTime":1653565176000,"updatedTime":1684738995000,"contributors":[{"name":"yzqdev","username":"yzqdev","email":"yzqdev@outlook.com","commits":2,"url":"https://github.com/yzqdev"}]},"readingTime":{"minutes":19.31,"words":5793},"filePathRelative":"python-tutor/basics/oop.md","localizedDate":"2022年5月26日","autoDesc":true}');export{o as comp,u as data};
