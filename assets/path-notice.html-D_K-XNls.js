import{_ as s,c as a,a as t,o as p}from"./app-C8DxhDIZ.js";const e={};function o(c,n){return p(),a("div",null,n[0]||(n[0]=[t(`<h1 id="路径的问题" tabindex="-1"><a class="header-anchor" href="#路径的问题"><span>路径的问题</span></a></h1><h2 id="path模块的引入" tabindex="-1"><a class="header-anchor" href="#path模块的引入"><span>path模块的引入</span></a></h2><div class="language-javascript" data-highlighter="prismjs" data-ext="js" data-title="js"><pre><code><span class="line"><span class="token keyword">import</span> path <span class="token keyword">from</span> <span class="token string">&#39;node:path&#39;</span><span class="token comment">// 直接引用node中自带的模块</span></span>
<span class="line"></span></code></pre></div><h2 id="path-join" tabindex="-1"><a class="header-anchor" href="#path-join"><span>path.join()</span></a></h2><p>使用平台特定的分隔符（window：/）作为定界符,将所有给定的path片段连接在一起,然后规范化生成的路径</p><div class="language-javascript" data-highlighter="prismjs" data-ext="js" data-title="js"><pre><code><span class="line">path<span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span><span class="token string">&#39;a&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;b&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;c&#39;</span><span class="token punctuation">)</span>   <span class="token comment">// 输出结果为： &#39;/a/b/c&#39;</span></span>
<span class="line">path<span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span><span class="token string">&#39;a&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;/b&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;c&#39;</span><span class="token punctuation">)</span>  <span class="token comment">// 输出结果为： &#39;/a/b/c&#39;</span></span>
<span class="line">path<span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span><span class="token string">&#39;a/b&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;../&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;c&#39;</span><span class="token punctuation">)</span> <span class="token comment">// 输出结果为： &#39;/a/c&#39;</span></span>
<span class="line">path<span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span><span class="token string">&#39;a&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;./&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;c&#39;</span><span class="token punctuation">)</span> <span class="token comment">// 输出结果为：&#39;/a/c&#39;</span></span>
<span class="line"></span></code></pre></div><h2 id="path-resolve" tabindex="-1"><a class="header-anchor" href="#path-resolve"><span>path.resolve()</span></a></h2><p>将路径或者路径片段序列化为绝对路径</p><div class="language-javascript" data-highlighter="prismjs" data-ext="js" data-title="js"><pre><code><span class="line"><span class="token comment">// 假设当前绝对路径为/admin/user</span></span>
<span class="line">path<span class="token punctuation">.</span><span class="token function">resolve</span><span class="token punctuation">(</span><span class="token string">&#39;a&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;b&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;c&#39;</span><span class="token punctuation">)</span> <span class="token comment">// 输出结果为：&#39;/admin/user/a/a/c&#39;</span></span>
<span class="line">path<span class="token punctuation">.</span><span class="token function">resolve</span><span class="token punctuation">(</span><span class="token string">&#39;a&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;/b&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;c&#39;</span><span class="token punctuation">)</span> <span class="token comment">// 输出结果为： &#39;/b/c&#39;</span></span>
<span class="line">path<span class="token punctuation">.</span><span class="token function">resolve</span><span class="token punctuation">(</span><span class="token string">&#39;a/b&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;../&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;c&#39;</span><span class="token punctuation">)</span> <span class="token comment">// 输出结果为：&#39;/admin/user/a/c&#39;</span></span>
<span class="line">path<span class="token punctuation">.</span><span class="token function">resolve</span><span class="token punctuation">(</span><span class="token string">&#39;a&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;./&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;c&#39;</span><span class="token punctuation">)</span> <span class="token comment">// 输出结果为：&#39;admin/user/a/c&#39;</span></span>
<span class="line">注意<span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">/</span><span class="token template-punctuation string">\`</span></span>的存在<span class="token punctuation">,</span> <span class="token string">&#39;/a&#39;</span>代表的是根目录下的a<span class="token punctuation">,</span> <span class="token string">&#39;a&#39;</span>代表的是当前目录下的a</span>
<span class="line"></span></code></pre></div><p>为了要获取到符合 <code>/</code> 格式的路径，我们可以使用 <code>PATH</code> 模块提供的 <code>path.sep</code> <a href="https://nodejs.org/dist/latest-v12.x/docs/api/path.html#path_path_sep" target="_blank" rel="noopener noreferrer">接口</a>进行字符串匹配截取，接口会根据系统环境的不同进行匹配截取。</p><p>在 Unix 系统下</p><div class="language-javascript" data-highlighter="prismjs" data-ext="js" data-title="js"><pre><code><span class="line">foo<span class="token operator">/</span>bar<span class="token operator">/</span>baz&#39;<span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span>path<span class="token punctuation">.</span>sep<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token comment">// Returns: [&#39;foo&#39;, &#39;bar&#39;, &#39;baz&#39;]</span></span>
<span class="line"></span></code></pre></div><p>Windows 系统下</p><div class="language-javascript" data-highlighter="prismjs" data-ext="js" data-title="js"><pre><code><span class="line">foo\\\\bar\\\\baz&#39;<span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span>path<span class="token punctuation">.</span>sep<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token comment">// Returns: [&#39;foo&#39;, &#39;bar&#39;, &#39;baz&#39;]</span></span>
<span class="line"></span></code></pre></div><p><code>path.sep</code> 的赋值也是根据操作系统来决定是 <code>/</code> 还是 \`\\</p><p>最终的方案自然是 <code>string.split(path.sep).join(&#39;/&#39;)</code> 来进行分隔符的替换。</p>`,16)]))}const l=s(e,[["render",o]]),r=JSON.parse('{"path":"/node-tutor/node-snippets/path-notice.html","title":"路径的问题","lang":"zh-CN","frontmatter":{"description":"路径的问题 path模块的引入 path.join() 使用平台特定的分隔符（window：/）作为定界符,将所有给定的path片段连接在一起,然后规范化生成的路径 path.resolve() 将路径或者路径片段序列化为绝对路径 为了要获取到符合 / 格式的路径，我们可以使用 PATH 模块提供的 path.sep 接口进行字符串匹配截取，接口会根据...","head":[["meta",{"property":"og:url","content":"https://yzqdev.github.io/cs-guide/cs-guide/node-tutor/node-snippets/path-notice.html"}],["meta",{"property":"og:site_name","content":"cs-guide"}],["meta",{"property":"og:title","content":"路径的问题"}],["meta",{"property":"og:description","content":"路径的问题 path模块的引入 path.join() 使用平台特定的分隔符（window：/）作为定界符,将所有给定的path片段连接在一起,然后规范化生成的路径 path.resolve() 将路径或者路径片段序列化为绝对路径 为了要获取到符合 / 格式的路径，我们可以使用 PATH 模块提供的 path.sep 接口进行字符串匹配截取，接口会根据..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-04-08T04:01:15.000Z"}],["meta",{"property":"article:modified_time","content":"2024-04-08T04:01:15.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"路径的问题\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2024-04-08T04:01:15.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"yzqdev\\",\\"url\\":\\"http://www.yzqdev.top\\"}]}"]]},"headers":[{"level":2,"title":"path模块的引入","slug":"path模块的引入","link":"#path模块的引入","children":[]},{"level":2,"title":"path.join()","slug":"path-join","link":"#path-join","children":[]},{"level":2,"title":"path.resolve()","slug":"path-resolve","link":"#path-resolve","children":[]}],"git":{"createdTime":1687669238000,"updatedTime":1712548875000,"contributors":[{"name":"yzqdev","username":"yzqdev","email":"yzqdev@outlook.com","commits":2,"url":"https://github.com/yzqdev"}]},"readingTime":{"minutes":1.16,"words":348},"filePathRelative":"node-tutor/node-snippets/path-notice.md","localizedDate":"2023年6月25日","autoDesc":true}');export{l as comp,r as data};
