import{_ as i,c as e,a as n,o as r}from"./app-C8DxhDIZ.js";const a={};function o(l,t){return r(),e("div",null,t[0]||(t[0]=[n('<h1 id="片段" tabindex="-1"><a class="header-anchor" href="#片段"><span>片段</span></a></h1><h2 id="android-片段-fragment" tabindex="-1"><a class="header-anchor" href="#android-片段-fragment"><span>Android 片段（Fragment）</span></a></h2><div class="hint-container tip"><p class="hint-container-title">提示</p><p>片段（Fragment） 是activity的一部分，这使得拥有更多的模块化activity设计。如果我们说片段（Fragment）是一种子Activity，那是没有错的。</p></div><p>以下是有关片段(Fragment)的重点-</p><ul><li><p>片段具有自己的布局和行为，以及自己的生命周期回调。</p></li><li><p>您可以在Activity运行时在Activity中添加或删除片段。</p></li><li><p>您可以在一个Activity中组合多个片段以构建多窗格UI。</p></li><li><p>一个片段可以用于多个Activity。</p></li><li><p>片段生命周期与其宿主Activity的生命周期密切相关，这意味着当Activity暂停时，Activity中所有可用的片段也将停止。</p></li><li><p>片段可以实现没有用户界面组件的行为。</p></li><li><p>片段已添加到Android版本的Honeycomb版本（版本为11）的Android API中。</p></li><li><p>您可以通过扩展<strong>Fragment</strong>类来创建片段，并且可以通过在Activity的布局文件中将片段声明为<code>&lt;fragment&gt;</code>元素，将片段插入到Activity布局中。</p><p>在引入片段之前，我们有一个局限性，因为我们只能在一个给定的时间点在屏幕上显示单个Activity。因此，我们无法划分设备屏幕并分别控制不同的部分。但是随着片段的引入，我们获得了更大的灵活性，并消除了一次只能在屏幕上进行单个Activity的限制。现在我们可以有一个Activity，但是每个Activity可以包含多个片段，这些片段将具有自己的布局，事件和完整的生命周期。</p><p>以下是一个典型示例，说明如何将由片段定义的两个UI模块组合到一个Activity中以进行平板电脑设计，而如何将其分开以进行手机设计。</p><p><img src="https://www.jc2182.com/images/android/fragment.jpg" alt="fragment"></p><p>在平板电脑大小的设备上运行时，该应用程序可以在Activity A中嵌入两个片段。但是，在手机大小的屏幕上，两个片段都没有足够的空间，因此Activity A仅包含文章列表中的片段，并且当用户选择文章时，它会启动Activity B，其中包含要读取的第二个片段文章。</p></li></ul><h2 id="片段生命周期" tabindex="-1"><a class="header-anchor" href="#片段生命周期"><span>片段生命周期</span></a></h2><p>Android片段的生命周期与android Activity非常相似。本节简要介绍了其生命周期的不同阶段。</p><p><img src="https://www.jc2182.com/images/android/fragment1.jpg" alt="fragment"></p><p>这是您可以在<strong>Fragment</strong>类中覆盖的方法的列表-</p><ul><li><strong>onAttach()</strong> - 片段实例与Activity实例相关联。片段和Activity未完全初始化。通常，您在此方法中获得对Activity的引用，该Activity使用该片段进行进一步的初始化工作。</li><li><strong>onCreate()</strong> - 系统在创建片段时调用此方法。您应该初始化在暂停或停止然后恢复片段时要保留的片段的基本组件。</li><li><strong>onCreateView()</strong> - 当片段第一次绘制其用户界面时，系统将调用此回调。要为片段绘制UI，必须从此方法返回一个View组件，该组件是片段布局的根。如果片段不提供UI，则可以返回null。</li><li><strong>onActivityCreated()</strong> - 创建主机Activity时，将在<strong>onCreateView()</strong> 方法之后调用<strong>onActivityCreated()</strong> 。Activity和片段实例以及Activity的视图层次结构已创建。此时，可以使用<strong>findViewById()</strong> 方法访问视图。例。在这种方法中，您可以实例化需要Context对象的对象</li><li><strong>onStart()</strong> - 一旦片段可见，就会调用<strong>onStart()</strong> 方法。</li><li><strong>onResume()</strong> - 片段变为Activity状态。</li><li><strong>onPause()</strong> - 系统调用此方法作为用户离开该片段的第一个指示。通常，这是您应提交应保留在当前用户会话之外的任何更改的地方。</li><li><strong>onStop()</strong> - 片段将通过调用<strong>onStop()</strong> 来停止</li><li><strong>onDestroyView()</strong> - 片段视图将在调用此方法后销毁</li><li><strong>onDestroy()</strong> - <strong>onDestroy()</strong> 被调用以对片段的状态进行最终清理，但不能保证由Android平台调用。</li></ul><h2 id="如何使用片段" tabindex="-1"><a class="header-anchor" href="#如何使用片段"><span>如何使用片段？</span></a></h2><p>这涉及创建片段的简单步骤。</p><ul><li>首先，确定要在一个Activity中使用多少个片段。例如，让我们使用两个片段来处理设备的横向和纵向模式。</li><li>接下来根据片段的数量，创建将扩展Fragment类的类。Fragment类具有上面提到的回调函数。您可以根据需要覆盖任何方法。</li><li>对应于每个片段，您将需要在XML文件中创建布局文件。这些文件将具有定义的片段的布局。</li><li>最后，修改Activity文件，以根据您的需求定义替换片段的实际逻辑。</li></ul><h2 id="片段类型" tabindex="-1"><a class="header-anchor" href="#片段类型"><span>片段类型</span></a></h2><p>片段基本上分为三个阶段，如下所示。</p><ul><li><a href="https://www.jc2182.com/andriod/android-single-fragments.html" target="_blank" rel="noopener noreferrer">单帧片段</a> - 单帧片段用于手持设备（如手机），在这里我们只能显示一个片段。</li><li><a href="https://www.jc2182.com/andriod/android-list-fragment.html" target="_blank" rel="noopener noreferrer">列表片段</a> - 具有特殊列表视图的片段称为列表片段</li><li><a href="https://www.jc2182.com/andriod/android-fragment-transitions.html" target="_blank" rel="noopener noreferrer">片段事务</a> - 与片段事务一起使用。我们可以将一个片段移动到另一个片段。</li></ul>',16)]))}const s=i(a,[["render",o]]),d=JSON.parse('{"path":"/android-tutor/basic/fragment.html","title":"片段","lang":"zh-CN","frontmatter":{"description":"片段 Android 片段（Fragment） 提示 片段（Fragment） 是activity的一部分，这使得拥有更多的模块化activity设计。如果我们说片段（Fragment）是一种子Activity，那是没有错的。 以下是有关片段(Fragment)的重点- 片段具有自己的布局和行为，以及自己的生命周期回调。 您可以在Activity运行时...","head":[["meta",{"property":"og:url","content":"https://yzqdev.github.io/cs-guide/cs-guide/android-tutor/basic/fragment.html"}],["meta",{"property":"og:site_name","content":"cs-guide"}],["meta",{"property":"og:title","content":"片段"}],["meta",{"property":"og:description","content":"片段 Android 片段（Fragment） 提示 片段（Fragment） 是activity的一部分，这使得拥有更多的模块化activity设计。如果我们说片段（Fragment）是一种子Activity，那是没有错的。 以下是有关片段(Fragment)的重点- 片段具有自己的布局和行为，以及自己的生命周期回调。 您可以在Activity运行时..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:image","content":"https://www.jc2182.com/images/android/fragment.jpg"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2023-06-25T05:00:38.000Z"}],["meta",{"property":"article:modified_time","content":"2023-06-25T05:00:38.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"片段\\",\\"image\\":[\\"https://www.jc2182.com/images/android/fragment.jpg\\",\\"https://www.jc2182.com/images/android/fragment1.jpg\\"],\\"dateModified\\":\\"2023-06-25T05:00:38.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"yzqdev\\",\\"url\\":\\"http://www.yzqdev.top\\"}]}"]]},"headers":[{"level":2,"title":"Android 片段（Fragment）","slug":"android-片段-fragment","link":"#android-片段-fragment","children":[]},{"level":2,"title":"片段生命周期","slug":"片段生命周期","link":"#片段生命周期","children":[]},{"level":2,"title":"如何使用片段？","slug":"如何使用片段","link":"#如何使用片段","children":[]},{"level":2,"title":"片段类型","slug":"片段类型","link":"#片段类型","children":[]}],"git":{"createdTime":1684738995000,"updatedTime":1687669238000,"contributors":[{"name":"yzqdev","username":"yzqdev","email":"yzqdev@outlook.com","commits":2,"url":"https://github.com/yzqdev"}]},"readingTime":{"minutes":4.22,"words":1265},"filePathRelative":"android-tutor/basic/fragment.md","localizedDate":"2023年5月22日","autoDesc":true}');export{s as comp,d as data};
