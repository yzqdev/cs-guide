import{_ as s,c as a,a as p,o as t}from"./app-C8DxhDIZ.js";const e={};function o(c,n){return t(),a("div",null,n[0]||(n[0]=[p(`<h1 id="configuration、-bean注解的使用详解" tabindex="-1"><a class="header-anchor" href="#configuration、-bean注解的使用详解"><span>@Configuration、@Bean注解的使用详解</span></a></h1><h2 id="_1-基本介绍" tabindex="-1"><a class="header-anchor" href="#_1-基本介绍"><span>1，基本介绍</span></a></h2><p><code>Spring Boot</code>推荐使用 <code>java</code> 配置完全代替 <code>XML</code> 配置，java 配置是通过 <code>@Configration</code> 和<code>@Bean</code> 注解实现的。二者作用如下：</p><ul><li>@Configration 注解：声明当前类是一个配置类，相当于 <code>Spring</code> 中的一个 <code>XML</code> 文件</li><li>@Bean 注解：作用在方法上，声明当前方法的返回值是一个 <code>Bean</code></li></ul><h1 id="_2-简单样例" tabindex="-1"><a class="header-anchor" href="#_2-简单样例"><span>2，简单样例</span></a></h1><p>（1）首先创建一个自定义的配置类 MyConfigration：</p><ul><li>使用 @Configration 注解将该类声明为一个配置类。</li><li>在 hello() 方法上添加 @Bean 注解则会往 Spring 容器中添加一个名为 hello 的 Bean，该 Bean 即为方法的返回值。</li></ul><div class="language-java" data-highlighter="prismjs" data-ext="java" data-title="java"><pre><code><span class="line"><span class="token keyword">package</span> <span class="token namespace">com<span class="token punctuation">.</span>example<span class="token punctuation">.</span>demo<span class="token punctuation">.</span>component</span><span class="token punctuation">;</span></span>
<span class="line"> </span>
<span class="line"><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>context<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span></span><span class="token class-name">Bean</span></span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>context<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span></span><span class="token class-name">Configuration</span></span><span class="token punctuation">;</span></span>
<span class="line"> </span>
<span class="line"><span class="token annotation punctuation">@Configuration</span></span>
<span class="line"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MyConfigration</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token annotation punctuation">@Bean</span></span>
<span class="line">    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">hello</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token keyword">return</span> <span class="token string">&quot;welcome to hangge.com&quot;</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre></div><p>（2）下面我们在一个 Controller 中获取并使用这个 Bean，代码如下：</p><div class="language-java line-numbers-mode" data-highlighter="prismjs" data-ext="java" data-title="java"><pre><code><span class="line"></span>
<span class="line"><span class="token keyword">package</span> <span class="token namespace">com<span class="token punctuation">.</span>example<span class="token punctuation">.</span>demo<span class="token punctuation">.</span>controller</span><span class="token punctuation">;</span></span>
<span class="line"> </span>
<span class="line"><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>beans<span class="token punctuation">.</span>factory<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span></span><span class="token class-name">Autowired</span></span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>web<span class="token punctuation">.</span>bind<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span></span><span class="token class-name">GetMapping</span></span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>web<span class="token punctuation">.</span>bind<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span></span><span class="token class-name">RestController</span></span><span class="token punctuation">;</span></span>
<span class="line"> </span>
<span class="line"><span class="token annotation punctuation">@RestController</span></span>
<span class="line"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">HelloController</span> <span class="token punctuation">{</span></span>
<span class="line"> </span>
<span class="line">    <span class="token annotation punctuation">@Autowired</span></span>
<span class="line">    <span class="token class-name">String</span> hello<span class="token punctuation">;</span></span>
<span class="line"> </span>
<span class="line">    <span class="token annotation punctuation">@GetMapping</span><span class="token punctuation">(</span><span class="token string">&quot;/test&quot;</span><span class="token punctuation">)</span></span>
<span class="line">    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">test</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token keyword">return</span> hello<span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>(3)访问这个 Controller，结果如下:</p><p><img src="https://www.hangge.com/blog_uploads/201907/2019071218422865712.png" alt="tu"></p><h2 id="二、-bean-注解详解" tabindex="-1"><a class="header-anchor" href="#二、-bean-注解详解"><span>二、@Bean 注解详解</span></a></h2><h3 id="_1-使用说明" tabindex="-1"><a class="header-anchor" href="#_1-使用说明"><span>1，使用说明</span></a></h3><ul><li>@Bean 注解作用在方法上</li><li>@Bean 指示一个方法返回一个 Spring 容器管理的 Bean</li><li>@Bean 方法名与返回类名一致，首字母小写</li><li>@Bean 一般和 @Component 或者 @Configuration 一起使用</li><li>@Bean 注解默认作用域为单例 singleton 作用域，可通过 @Scope(“prototype”) 设置为原型作用域</li></ul><h3 id="_2-bean-名称" tabindex="-1"><a class="header-anchor" href="#_2-bean-名称"><span>2，Bean 名称</span></a></h3><p>（1）默认情况下 Bean 名称就是方法名，比如下面 Bean 名称便是 myBean：</p><div class="language-java" data-highlighter="prismjs" data-ext="java" data-title="java"><pre><code><span class="line"><span class="token annotation punctuation">@Bean</span></span>
<span class="line"><span class="token keyword">public</span> <span class="token class-name">MyBean</span> <span class="token function">myBean</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">MyBean</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre></div><p>（2）<strong>@Bean</strong> 注解支持设置别名。比如下面除了主名称 <strong>myBean</strong> 外，还有个别名 <strong>myBean1</strong>（两个都可以使用）</p><div class="language-java" data-highlighter="prismjs" data-ext="java" data-title="java"><pre><code><span class="line"><span class="token annotation punctuation">@Bean</span><span class="token punctuation">(</span><span class="token string">&quot;myBean1&quot;</span><span class="token punctuation">)</span></span>
<span class="line"><span class="token keyword">public</span> <span class="token class-name">MyBean</span> <span class="token function">myBean</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">MyBean</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre></div><p>（3）<strong>@Bean</strong> 注解可以接受一个 <strong>String</strong> 数组设置多个别名。比如下面除了主名称 <strong>myBean</strong> 外，还有别名 <strong>myBean1</strong>、<strong>myBean2</strong>（三个都可以使用）</p><div class="language-java" data-highlighter="prismjs" data-ext="java" data-title="java"><pre><code><span class="line"><span class="token annotation punctuation">@Bean</span><span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token string">&quot;myBean1&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;myBean2&quot;</span><span class="token punctuation">}</span><span class="token punctuation">)</span></span>
<span class="line"><span class="token keyword">public</span> <span class="token class-name">MyBean</span> <span class="token function">myBean</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">MyBean</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre></div><h3 id="_3-bean-与其他注解一起使用" tabindex="-1"><a class="header-anchor" href="#_3-bean-与其他注解一起使用"><span>3，@Bean 与其他注解一起使用</span></a></h3><p>（1）<strong>@Bean</strong> 注解常常与 <strong>@Scope</strong>、<strong>@Lazy</strong>，<strong>@DependsOn</strong> 和 <strong>@link Primary</strong> 注解一起使用：</p><ul><li><strong>@Profile</strong> 注解：为在不同环境下使用不同的配置提供了支持，如开发环境和生产环境的数据库配置是不同的</li><li><strong>@Scope</strong> 注解：将 <strong>Bean</strong> 的作用域从单例改变为指定的作用域</li><li><strong>@Lazy</strong> 注解：只有在默认单例作用域的情况下才有实际效果</li><li><strong>@DependsOn</strong> 注解：表示在当前 <strong>Bean</strong> 创建之前需要先创建特定的其他 <strong>Bean</strong></li></ul><p>（2）比如下面样例，<strong>Bean</strong> 的作用域默认是单例的，我们配合 <strong>@Scope</strong> 注解将其改成 <strong>prototype</strong> 原型模式（每次获取 <strong>Bean</strong> 的时候会有一个新的实例）</p><div class="language-java" data-highlighter="prismjs" data-ext="java" data-title="java"><pre><code><span class="line"><span class="token annotation punctuation">@Bean</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line"><span class="token annotation punctuation">@Scope</span><span class="token punctuation">(</span><span class="token string">&quot;prototype&quot;</span><span class="token punctuation">)</span></span>
<span class="line"><span class="token keyword">public</span> <span class="token class-name">MyBean</span> <span class="token function">myBean</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">MyBean</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre></div><h3 id="_4-bean-初始化和销毁时调用相应的方法" tabindex="-1"><a class="header-anchor" href="#_4-bean-初始化和销毁时调用相应的方法"><span>4，Bean 初始化和销毁时调用相应的方法</span></a></h3><p>（1）实际开发中，经常会遇到在 <strong>Bean</strong> 使用之前或使用之后做些必要的操作，<strong>Spring</strong> 对 <strong>Bean</strong> 的生命周期的操作提供了支持：我们可以通过 <strong>@Bean</strong> 注解的 <strong>initMethod</strong> 和 <strong>destrodMethod</strong> 进行指定 <strong>Bean</strong> 在初始化和销毁时需要调用相应的方法。</p><p>（2）下面是一个简单的样例：</p><div class="language-java line-numbers-mode" data-highlighter="prismjs" data-ext="java" data-title="java"><pre><code><span class="line"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MyBean</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">init</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;MyBean开始初始化...&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"> </span>
<span class="line">    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">destroy</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;MyBean销毁...&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"> </span>
<span class="line">    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token keyword">return</span> <span class="token string">&quot;MyBean使用...&quot;</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"><span class="token annotation punctuation">@Bean</span><span class="token punctuation">(</span>initMethod<span class="token operator">=</span><span class="token string">&quot;init&quot;</span><span class="token punctuation">,</span> destroyMethod<span class="token operator">=</span><span class="token string">&quot;destroy&quot;</span><span class="token punctuation">)</span></span>
<span class="line"><span class="token keyword">public</span> <span class="token class-name">MyBean</span> <span class="token function">myBean</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">MyBean</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="三、-configration-注解详解" tabindex="-1"><a class="header-anchor" href="#三、-configration-注解详解"><span>三、@Configration 注解详解</span></a></h2><h3 id="_1-使用说明-1" tabindex="-1"><a class="header-anchor" href="#_1-使用说明-1"><span>1，使用说明</span></a></h3><ul><li><strong>@Configration</strong> 注解作用在类、接口（包含注解）上</li><li><strong>@Configuration</strong> 用于定义配置类，可替换 <strong>xml</strong> 配置文件</li><li><strong>@Configration</strong> 注解类中可以声明一个或多个 <strong>@Bean</strong> 方法</li><li><strong>@Configration</strong> 注解作用的类不能是 <strong>final</strong> 类型</li><li>嵌套的 <strong>@Configration</strong> 类必须是 <strong>static</strong> 的</li></ul><h3 id="_2-声明一个-bean-方法" tabindex="-1"><a class="header-anchor" href="#_2-声明一个-bean-方法"><span>2，声明一个 @Bean 方法</span></a></h3><p>（1）假设我们定义一个如下的 <strong>Bean</strong>：</p><div class="language-java line-numbers-mode" data-highlighter="prismjs" data-ext="java" data-title="java"><pre><code><span class="line"><span class="token keyword">package</span> <span class="token namespace">com<span class="token punctuation">.</span>example<span class="token punctuation">.</span>demo<span class="token punctuation">.</span>bean</span><span class="token punctuation">;</span></span>
<span class="line"> </span>
<span class="line"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MyBean</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">private</span> <span class="token class-name">String</span> port<span class="token punctuation">;</span></span>
<span class="line"> </span>
<span class="line">    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">init</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;MyBean开始初始化...&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"> </span>
<span class="line">    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">destroy</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;MyBean销毁...&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"> </span>
<span class="line">    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token keyword">return</span> <span class="token string">&quot;端口号： &quot;</span> <span class="token operator">+</span> <span class="token function">getPort</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"> </span>
<span class="line">    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">getPort</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token keyword">return</span> port<span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"> </span>
<span class="line">    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setPort</span><span class="token punctuation">(</span><span class="token class-name">String</span> port<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token keyword">this</span><span class="token punctuation">.</span>port <span class="token operator">=</span> port<span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>（2）然后在 <strong>Configuration</strong> 中进行声明：</p><div class="language-java" data-highlighter="prismjs" data-ext="java" data-title="java"><pre><code><span class="line"><span class="token annotation punctuation">@Configuration</span></span>
<span class="line"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MyConfigration</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token annotation punctuation">@Bean</span><span class="token punctuation">(</span>initMethod<span class="token operator">=</span><span class="token string">&quot;init&quot;</span><span class="token punctuation">,</span> destroyMethod<span class="token operator">=</span><span class="token string">&quot;destroy&quot;</span><span class="token punctuation">)</span></span>
<span class="line">    <span class="token keyword">public</span> <span class="token class-name">MyBean</span> <span class="token function">myBean</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token class-name">MyBean</span> myBean <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">MyBean</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        myBean<span class="token punctuation">.</span><span class="token function">setPort</span><span class="token punctuation">(</span><span class="token string">&quot;8080&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token keyword">return</span> myBean<span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre></div><p>（3）最后进行测试，我们获取这个 <strong>Bean</strong> 并输出其内容：</p><div class="language-java" data-highlighter="prismjs" data-ext="java" data-title="java"><pre><code><span class="line"><span class="token annotation punctuation">@SpringBootApplication</span></span>
<span class="line"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">DemoApplication</span> <span class="token punctuation">{</span></span>
<span class="line"> </span>
<span class="line">    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token class-name">ConfigurableApplicationContext</span> context</span>
<span class="line">                <span class="token operator">=</span> <span class="token class-name">SpringApplication</span><span class="token punctuation">.</span><span class="token function">run</span><span class="token punctuation">(</span><span class="token class-name">DemoApplication</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span> args<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token class-name">MyBean</span> myBean <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">MyBean</span><span class="token punctuation">)</span> context<span class="token punctuation">.</span><span class="token function">getBean</span><span class="token punctuation">(</span><span class="token string">&quot;myBean&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>myBean<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre></div><h3 id="_3-声明多个-bean-方法" tabindex="-1"><a class="header-anchor" href="#_3-声明多个-bean-方法"><span>3，声明多个 @Bean 方法</span></a></h3><p>（1）<strong>@Configration</strong> 注解类中可以声明多个 <strong>@Bean</strong> 方法，并且 <strong>bean</strong> 与 <strong>bean</strong> 之间是可以有依赖关系的。如果一个 <strong>bean</strong> 的定义依赖其他 <strong>bean</strong>，则直接调用对应的 <strong>JavaConfig</strong> 类中依赖 <strong>bean</strong> 的创建方法就可以了。 （2）下面是一个简单的样例，一共声明了 <strong>country</strong> 和 <strong>userInfo</strong> 两个 <strong>Bean</strong>。</p><p><strong>注意</strong>：<strong>@Configuration</strong> 注解的 <strong>bean</strong> 都已经变成了增强的类。因此上面的 <strong>country</strong> 这个 <strong>Bean</strong> 和下面直接调用 <strong>country()</strong> 方法返回的是同一个实例</p><div class="language-java" data-highlighter="prismjs" data-ext="java" data-title="java"><pre><code><span class="line"><span class="token annotation punctuation">@Configuration</span></span>
<span class="line"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MyBeanConfig</span> <span class="token punctuation">{</span></span>
<span class="line">  </span>
<span class="line">    <span class="token annotation punctuation">@Bean</span></span>
<span class="line">    <span class="token keyword">public</span> <span class="token class-name">Country</span> <span class="token function">country</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span></span>
<span class="line">        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Country</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line">  </span>
<span class="line">    <span class="token annotation punctuation">@Bean</span></span>
<span class="line">    <span class="token keyword">public</span> <span class="token class-name">UserInfo</span> <span class="token function">userInfo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span></span>
<span class="line">        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">UserInfo</span><span class="token punctuation">(</span><span class="token function">country</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre></div><p><a href="https://www.hangge.com/blog/cache/detail_2506.html#" target="_blank" rel="noopener noreferrer">原文:SpringBoot - @Configuration、@Bean注解的使用详解（配置类的实现）</a> 由yzqdev重新整理</p><p>推荐浏览<a href="https://www.hangge.com/" target="_blank" rel="noopener noreferrer">https://www.hangge.com/</a></p>`,47)]))}const i=s(e,[["render",o]]),u=JSON.parse('{"path":"/java-tutor/springboot/tips/configuration.html","title":"@Configuration、@Bean注解的使用详解","lang":"zh-CN","frontmatter":{"description":"@Configuration、@Bean注解的使用详解 1，基本介绍 Spring Boot推荐使用 java 配置完全代替 XML 配置，java 配置是通过 @Configration 和@Bean 注解实现的。二者作用如下： @Configration 注解：声明当前类是一个配置类，相当于 Spring 中的一个 XML 文件 @Bean 注解：...","head":[["meta",{"property":"og:url","content":"https://yzqdev.github.io/cs-guide/cs-guide/java-tutor/springboot/tips/configuration.html"}],["meta",{"property":"og:site_name","content":"cs-guide"}],["meta",{"property":"og:title","content":"@Configuration、@Bean注解的使用详解"}],["meta",{"property":"og:description","content":"@Configuration、@Bean注解的使用详解 1，基本介绍 Spring Boot推荐使用 java 配置完全代替 XML 配置，java 配置是通过 @Configration 和@Bean 注解实现的。二者作用如下： @Configration 注解：声明当前类是一个配置类，相当于 Spring 中的一个 XML 文件 @Bean 注解：..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:image","content":"https://www.hangge.com/blog_uploads/201907/2019071218422865712.png"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2022-06-18T06:54:45.000Z"}],["meta",{"property":"article:modified_time","content":"2022-06-18T06:54:45.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"@Configuration、@Bean注解的使用详解\\",\\"image\\":[\\"https://www.hangge.com/blog_uploads/201907/2019071218422865712.png\\"],\\"dateModified\\":\\"2022-06-18T06:54:45.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"yzqdev\\",\\"url\\":\\"http://www.yzqdev.top\\"}]}"]]},"headers":[{"level":2,"title":"1，基本介绍","slug":"_1-基本介绍","link":"#_1-基本介绍","children":[]},{"level":2,"title":"二、@Bean 注解详解","slug":"二、-bean-注解详解","link":"#二、-bean-注解详解","children":[{"level":3,"title":"1，使用说明","slug":"_1-使用说明","link":"#_1-使用说明","children":[]},{"level":3,"title":"2，Bean 名称","slug":"_2-bean-名称","link":"#_2-bean-名称","children":[]},{"level":3,"title":"3，@Bean 与其他注解一起使用","slug":"_3-bean-与其他注解一起使用","link":"#_3-bean-与其他注解一起使用","children":[]},{"level":3,"title":"4，Bean 初始化和销毁时调用相应的方法","slug":"_4-bean-初始化和销毁时调用相应的方法","link":"#_4-bean-初始化和销毁时调用相应的方法","children":[]}]},{"level":2,"title":"三、@Configration 注解详解","slug":"三、-configration-注解详解","link":"#三、-configration-注解详解","children":[{"level":3,"title":"1，使用说明","slug":"_1-使用说明-1","link":"#_1-使用说明-1","children":[]},{"level":3,"title":"2，声明一个 @Bean 方法","slug":"_2-声明一个-bean-方法","link":"#_2-声明一个-bean-方法","children":[]},{"level":3,"title":"3，声明多个 @Bean 方法","slug":"_3-声明多个-bean-方法","link":"#_3-声明多个-bean-方法","children":[]}]}],"git":{"createdTime":1655535285000,"updatedTime":1655535285000,"contributors":[{"name":"yzqdev","username":"yzqdev","email":"yzqdev@outlook.com","commits":1,"url":"https://github.com/yzqdev"}]},"readingTime":{"minutes":4.14,"words":1242},"filePathRelative":"java-tutor/springboot/tips/configuration.md","localizedDate":"2022年6月18日","autoDesc":true}');export{i as comp,u as data};
