import{_ as p,c,a,d as s,w as r,r as o,o as i,b as t,e as n}from"./app-C8DxhDIZ.js";const u={};function g(x,e){const l=o("reg-test"),d=o("CodeDemo");return i(),c("div",null,[e[1]||(e[1]=a('<h1 id="正则表达式教程" tabindex="-1"><a class="header-anchor" href="#正则表达式教程"><span>正则表达式教程</span></a></h1><p>一些学习正则的网站</p><div class="hint-container tip"><p class="hint-container-title">提示</p><ul><li><a href="https://ihateregex.io/playground/" target="_blank" rel="noopener noreferrer">ihateregex</a></li><li><a href="https://regex101.com/" target="_blank" rel="noopener noreferrer">https://regex101.com/</a></li><li><a href="https://regexr.com/" target="_blank" rel="noopener noreferrer">https://regexr.com/</a></li><li><a href="https://jex.im/regulex/#!flags=&amp;re=%5E(a%7Cb)*%3F%24" target="_blank" rel="noopener noreferrer">正则可视化</a> ,<a href="https://regexper.com/#%2F%5E%5BGCDZTSPKXLY1-9%5D%5Cd%7B1%2C4%7D%24%2F" target="_blank" rel="noopener noreferrer">可视化2</a></li><li><a href="https://www.runoob.com/regexp/regexp-tutorial.html" target="_blank" rel="noopener noreferrer">菜鸟教程</a></li><li><a href="https://github.com/ziishaned/learn-regex" target="_blank" rel="noopener noreferrer">正则教程</a></li><li><a href="https://any86.github.io/any-rule/" target="_blank" rel="noopener noreferrer">正则表达式大全</a></li><li><a href="https://www.bejson.com/othertools/regex/" target="_blank" rel="noopener noreferrer">bejson</a></li><li><a href="https://tool.lu/regex" target="_blank" rel="noopener noreferrer">tools.u</a></li></ul></div><h2 id="正则表达式基本语法" tabindex="-1"><a class="header-anchor" href="#正则表达式基本语法"><span>正则表达式基本语法</span></a></h2><p><a href="https://yzqdev.github.io/atools/" target="_blank" rel="noopener noreferrer">正则测试工具</a></p>',5)),s(l),e[2]||(e[2]=a('<table><thead><tr><th>修饰符</th><th>含义</th><th>描述</th></tr></thead><tbody><tr><td>i</td><td>ignore - 不区分大小写</td><td>将匹配设置为不区分大小写，搜索时不区分大小写: A 和 a 没有区别。</td></tr><tr><td>g</td><td>global - 全局匹配</td><td>查找所有的匹配项。</td></tr><tr><td>m</td><td>multi line - 多行匹配</td><td>使边界字符 ^ 和 $ 匹配每一行的开头和结尾，记住是多行，而不是整个字符串的开头和结尾。</td></tr><tr><td>s</td><td>特殊字符圆点 . 中包含换行符 \\n</td><td>默认情况下的圆点 . 是匹配除换行符 \\n 之外的任何字符，加上 s 修饰符之后, . 中包含换行符 \\n。</td></tr></tbody></table><p>两个特殊的符号&#39;^&#39;和&#39;$&#39;。他们的作用是分别指出一个字符串的开始和结束。 例子如下：</p><p><code>^The</code>：表示所有以<code>The</code>开始的字符串（<code>There</code>，<code>The cat</code>等）;<br><code>of despair$</code>：表示所以以<code>of despair</code>结尾的字符串;<br><code>^abc$</code>：表示开始和结尾都是<code>abc</code>的字符串——呵呵，只有<code>abc</code>自己了;<br><code>notice</code>：表示任何包含<code>notice</code>的字符串。 象最后那个例子，如果你不使用两个特殊字符，你就在表示要查找的串在被查找串的任意部分——你并 不把它定位在某一个顶端。 其它还有<code>*</code>，<code>+</code>和<code>?</code>这三个符号，表示一个或一序列字符重复出现的次数。 它们分别表示<code>没有或更多</code>，<code>一次或更多</code>还有<code>没有或一次</code>。</p><p><code>ab*</code>：表示一个字符串有一个a后面跟着零个或若干个b。（<code>a</code>, <code>ab</code>, <code>abbb</code>,……）<br><code>ab+</code>：表示一个字符串有一个a后面跟着至少一个b或者更多；<br><code>ab?</code>：表示一个字符串有一个a后面跟着零个或者一个b；<br><code>a?b+$</code>：表示在字符串的末尾有零个或一个a跟着一个或几个b。<br> 你也可以使用范围，用大括号括起，用以表示重复次数的范围。 <code>{1,20}</code>表示数字字符串长度合法为1到20，即为<code>[0-9]</code>中的字符出现次数的范围是1到20次。 <code>ab{2}</code>：表示一个字符串有一个a跟着2个b（<code>abb</code>）；<br><code>ab{2,}</code>：表示一个字符串有一个a跟着至少2个b；<br><code>ab{3,5}</code>：表示一个字符串有一个a跟着3到5个b。<br> 请注意，你必须指定范围的下限（如：<code>{0,2}</code>而不是<code>{,2}</code>）。<br> 还有，你可能注意到了， <code>*</code>， <code>+</code>和 <code>?</code>相当于<code>{0,}</code>，<code>{1,}</code>和<code>{0,1}</code>。<br> 还有一个<code>|</code>，表示“或”操作：<br><code>hi|hello</code>：表示一个字符串里有<code>hi</code>或者<code>hello</code>；<br><code>(b|cd)ef</code>：表示<code>bef</code>或<code>cdef</code>；<br><code>(a|b)*c</code>：表示一串<code>ab</code>混合的字符串后面跟一个<code>c</code>；<br><code>.</code>可以替代任何字符：<br><code>a.[0-9]</code>：表示一个字符串有一个<code>a</code>后面跟着一个任意字符和一个数字；<br><code>^.{3}$</code>：表示有任意三个字符的字符串（长度为3个字符）；<br> 方括号表示某些字符允许在一个字符串中的某一特定位置出现：<br><code>[ab]</code>：表示一个字符串有一个<code>a</code>或<code>b</code>（相当于<code>a|b</code>）；<br><code>[a-d]</code>：表示一个字符串包含小写的&#39;a&#39;到&#39;d&#39;中的一个（相当于<code>a|b|c|d</code>或者<code>[abcd]</code>）；<br><code>^[a-zA-Z]</code>：表示一个以字母开头的字符串；<br><code>[0-9]%</code>：表示一个百分号前有一位的数字；<br><code>,[a-zA-Z0-9]$</code>：表示一个字符串以一个逗号后面跟着一个字母或数字结束。<br> 你也可以在方括号里用 <code>^</code>表示不希望出现的字符，<code>^</code>应在方括号里的第一位。<br> （如：<code>%[^a-zA-Z]%</code>表示两个百分号中不应该出现字母）。<br> 为了逐字表达，你必须在<code>^.$()|*+?{\\</code>这些字符前加上转移字符<code>\\</code>。</p><p>请注意在方括号中，不需要转义字符。</p><h3 id="例子" tabindex="-1"><a class="header-anchor" href="#例子"><span>例子</span></a></h3><p>校验登录名：只能输入5-20个以字母开头、可带数字、“_”、“.”的字串</p>',7)),s(d,{id:"code-demo-142",type:"normal",code:"eJyrVsooyc1RslKyycwrKC1RKKksSLWNUSpJrSiJUVIoSCwpSS3Ks1WPi07UrXLUjYqtNqzVgLINdC1ja6L14mM1q010DC1rVdQV9O1i8pRqAbIgGuE="},{default:r(()=>e[0]||(e[0]=[t("p",null,[t("code",null,"/^[a-zA-Z]{1}([a-zA-Z0-9]|[._]){4,19}$/")],-1),t("div",{class:"language-html","data-highlighter":"prismjs","data-ext":"html","data-title":"html"},[t("pre",null,[t("code",null,[t("span",{class:"line"},[t("span",{class:"token tag"},[t("span",{class:"token tag"},[t("span",{class:"token punctuation"},"<"),n("input")]),n(),t("span",{class:"token attr-name"},"type"),t("span",{class:"token attr-value"},[t("span",{class:"token punctuation attr-equals"},"="),t("span",{class:"token punctuation"},'"'),n("text"),t("span",{class:"token punctuation"},'"')]),n(),t("span",{class:"token attr-name"},"pattern"),t("span",{class:"token attr-value"},[t("span",{class:"token punctuation attr-equals"},"="),t("span",{class:"token punctuation"},"'"),n("^[a-zA-Z]{1}([a-zA-Z0-9]|[._]){4,19}$"),t("span",{class:"token punctuation"},"'")]),n(),t("span",{class:"token punctuation"},"/>")])]),n(`
`),t("span",{class:"line"})])])],-1)])),_:1}),e[3]||(e[3]=a(`<p><code>^[a-zA-Z]{1}</code> 表示第一个字符要求是字母。 (<code>[a-zA-Z0-9]|[._]){4,19}</code> 表示从第二位开始（因为它紧跟在上个表达式后面）的一个长度为4到9位的字符串，它要求是由大小写字母、数字或者特殊字符集<code>[._]</code>组成。</p><p>校验用户姓名：只能输入1-30个以字母开头的字串</p><p><code>/^[a-zA-Z]{1,30}$/</code></p><p>校验密码：只能输入6-20个字母、数字、下划线</p><p><code>/^(\\w){6,20}$/</code></p><p><code>\\w</code>：用于匹配字母，数字或下划线字符</p><p>校验普通电话、传真号码：可以“+”或数字开头，可含有“-” 和 “ ”</p><p><code>/^[+]{0,1}(\\d){1,3}[ ]?([-]?((\\d)|[ ]){1,12})+$/</code></p><p><code>\\d</code>：用于匹配从0到9的数字；</p><p>“?”元字符规定其前导对象必须在目标对象中连续出现零次或一次</p><p>可以匹配的字符串如：+123 -999 999 ； +123-999 999 ；123 999 999 ；+123 999999等</p><p>校验URL <code>/^http[s]{0,1}:\\/\\/.+$/</code> 或 <code>/^http[s]{0,1}:\\/\\/.{1,n}$/</code></p><p><code>.</code> 表示所有字符的集</p><p><code>-</code> 等同于{1,}，就是1到正无穷</p><h3 id="如下面的表格" tabindex="-1"><a class="header-anchor" href="#如下面的表格"><span>如下面的表格</span></a></h3><table><thead><tr><th style="text-align:left;">字符</th><th style="text-align:left;">描述</th></tr></thead><tbody><tr><td style="text-align:left;">\\</td><td style="text-align:left;">将下一个字符标记为一个特殊字符、或一个原义字符、或一个 向后引用、或一个八进制转义符。例如，&#39;n&#39; 匹配字符 &quot;n&quot;。&#39;\\n&#39; 匹配一个换行符。序列 &#39;\\&#39; 匹配 &quot;&quot; 而 &quot;(&quot; 则匹配 &quot;(&quot;。</td></tr><tr><td style="text-align:left;">^</td><td style="text-align:left;">匹配输入字符串的开始位置。如果设置了 RegExp 对象的 Multiline 属性，^ 也匹配 &#39;\\n&#39; 或 &#39;\\r&#39; 之后的位置。</td></tr><tr><td style="text-align:left;">$</td><td style="text-align:left;">匹配输入字符串的结束位置。如果设置了RegExp 对象的 Multiline 属性，$ 也匹配 &#39;\\n&#39; 或 &#39;\\r&#39; 之前的位置。</td></tr><tr><td style="text-align:left;">*</td><td style="text-align:left;">匹配前面的子表达式零次或多次。例如，zo* 能匹配 &quot;z&quot; 以及 &quot;zoo&quot;。* 等价于{0,}。</td></tr><tr><td style="text-align:left;">+</td><td style="text-align:left;">匹配前面的子表达式一次或多次。例如，&#39;zo+&#39; 能匹配 &quot;zo&quot; 以及 &quot;zoo&quot;，但不能匹配 &quot;z&quot;。+ 等价于 {1,}。</td></tr><tr><td style="text-align:left;">?</td><td style="text-align:left;">匹配前面的子表达式零次或一次。例如，&quot;do(es)?&quot; 可以匹配 &quot;do&quot; 或 &quot;does&quot; 。? 等价于 {0,1}。</td></tr><tr><td style="text-align:left;">{n}</td><td style="text-align:left;">n 是一个非负整数。匹配确定的 n 次。例如，&#39;o{2}&#39; 不能匹配 &quot;Bob&quot; 中的 &#39;o&#39;，但是能匹配 &quot;food&quot; 中的两个 o。</td></tr><tr><td style="text-align:left;">{n,}</td><td style="text-align:left;">n 是一个非负整数。至少匹配n 次。例如，&#39;o{2,}&#39; 不能匹配 &quot;Bob&quot; 中的 &#39;o&#39;，但能匹配 &quot;foooood&quot; 中的所有 o。&#39;o{1,}&#39; 等价于 &#39;o+&#39;。&#39;o{0,}&#39; 则等价于 &#39;o*&#39;。</td></tr><tr><td style="text-align:left;">{n,m}</td><td style="text-align:left;">m 和 n 均为非负整数，其中n &lt;= m。最少匹配 n 次且最多匹配 m 次。例如，&quot;o{1,3}&quot; 将匹配 &quot;fooooood&quot; 中的前三个 o。&#39;o{0,1}&#39; 等价于 &#39;o?&#39;。请注意在逗号和两个数之间不能有空格。</td></tr><tr><td style="text-align:left;">?</td><td style="text-align:left;">当该字符紧跟在任何一个其他限制符 (*, +, ?, {n}, {n,}, {n,m}) 后面时，匹配模式是非贪婪的。非贪婪模式尽可能少的匹配所搜索的字符串，而默认的贪婪模式则尽可能多的匹配所搜索的字符串。例如，对于字符串 &quot;oooo&quot;，&#39;o+?&#39; 将匹配单个 &quot;o&quot;，而 &#39;o+&#39; 将匹配所有 &#39;o&#39;。</td></tr><tr><td style="text-align:left;">.</td><td style="text-align:left;">匹配除换行符（\\n、\\r）之外的任何单个字符。要匹配包括 &#39;\\n&#39; 在内的任何字符，请使用像&quot;<strong>(.|\\n)</strong>&quot;的模式。</td></tr><tr><td style="text-align:left;">[xyz]</td><td style="text-align:left;">字符集合。匹配所包含的任意一个字符。例如， &#39;[abc]&#39; 可以匹配 &quot;plain&quot; 中的 &#39;a&#39;。</td></tr><tr><td style="text-align:left;">[^xyz]</td><td style="text-align:left;">负值字符集合。匹配未包含的任意字符。例如， &#39;[^abc]&#39; 可以匹配 &quot;plain&quot; 中的&#39;p&#39;、&#39;l&#39;、&#39;i&#39;、&#39;n&#39;。</td></tr><tr><td style="text-align:left;">[a-z]</td><td style="text-align:left;">字符范围。匹配指定范围内的任意字符。例如，&#39;[a-z]&#39; 可以匹配 &#39;a&#39; 到 &#39;z&#39; 范围内的任意小写字母字符。</td></tr><tr><td style="text-align:left;">[^a-z]</td><td style="text-align:left;">负值字符范围。匹配任何不在指定范围内的任意字符。例如，&#39;[^a-z]&#39; 可以匹配任何不在 &#39;a&#39; 到 &#39;z&#39; 范围内的任意字符。</td></tr><tr><td style="text-align:left;">\\b</td><td style="text-align:left;">匹配一个单词边界，也就是指单词和空格间的位置。例如， &#39;er\\b&#39; 可以匹配&quot;never&quot; 中的 &#39;er&#39;，但不能匹配 &quot;verb&quot; 中的 &#39;er&#39;。</td></tr><tr><td style="text-align:left;">\\B</td><td style="text-align:left;">匹配非单词边界。&#39;er\\B&#39; 能匹配 &quot;verb&quot; 中的 &#39;er&#39;，但不能匹配 &quot;never&quot; 中的 &#39;er&#39;。</td></tr><tr><td style="text-align:left;">\\cx</td><td style="text-align:left;">匹配由 x 指明的控制字符。例如， \\cM 匹配一个 Control-M 或回车符。x 的值必须为 A-Z 或 a-z 之一。否则，将 c 视为一个原义的 &#39;c&#39; 字符。</td></tr><tr><td style="text-align:left;">\\d</td><td style="text-align:left;">匹配一个数字字符。等价于 [0-9]。</td></tr><tr><td style="text-align:left;">\\D</td><td style="text-align:left;">匹配一个非数字字符。等价于 [^0-9]。</td></tr><tr><td style="text-align:left;">\\f</td><td style="text-align:left;">匹配一个换页符。等价于 \\x0c 和 \\cL。</td></tr><tr><td style="text-align:left;">\\n</td><td style="text-align:left;">匹配一个换行符。等价于 \\x0a 和 \\cJ。</td></tr><tr><td style="text-align:left;">\\r</td><td style="text-align:left;">匹配一个回车符。等价于 \\x0d 和 \\cM。</td></tr><tr><td style="text-align:left;">\\s</td><td style="text-align:left;">匹配任何空白字符，包括空格、制表符、换页符等等。等价于 [ \\f\\n\\r\\t\\v]。</td></tr><tr><td style="text-align:left;">\\S</td><td style="text-align:left;">匹配任何非空白字符。等价于 [^ \\f\\n\\r\\t\\v]。</td></tr><tr><td style="text-align:left;">\\t</td><td style="text-align:left;">匹配一个制表符。等价于 \\x09 和 \\cI。</td></tr><tr><td style="text-align:left;">\\v</td><td style="text-align:left;">匹配一个垂直制表符。等价于 \\x0b 和 \\cK。</td></tr><tr><td style="text-align:left;">\\w</td><td style="text-align:left;">匹配字母、数字、下划线。等价于&#39;[A-Za-z0-9_]&#39;。</td></tr><tr><td style="text-align:left;">\\W</td><td style="text-align:left;">匹配非字母、数字、下划线。等价于 &#39;[^A-Za-z0-9_]&#39;。</td></tr><tr><td style="text-align:left;">\\xn</td><td style="text-align:left;">匹配 n，其中 n 为十六进制转义值。十六进制转义值必须为确定的两个数字长。例如，&#39;\\x41&#39; 匹配 &quot;A&quot;。&#39;\\x041&#39; 则等价于 &#39;\\x04&#39; &amp; &quot;1&quot;。正则表达式中可以使用 ASCII 编码。</td></tr><tr><td style="text-align:left;">\\num</td><td style="text-align:left;">匹配 num，其中 num 是一个正整数。对所获取的匹配的引用。例如，&#39;(.)\\1&#39; 匹配两个连续的相同字符。</td></tr><tr><td style="text-align:left;">\\n</td><td style="text-align:left;">标识一个八进制转义值或一个向后引用。如果 \\n 之前至少 n 个获取的子表达式，则 n 为向后引用。否则，如果 n 为八进制数字 (0-7)，则 n 为一个八进制转义值。</td></tr><tr><td style="text-align:left;">\\nm</td><td style="text-align:left;">标识一个八进制转义值或一个向后引用。如果 \\nm 之前至少有 nm 个获得子表达式，则 nm 为向后引用。如果 \\nm 之前至少有 n 个获取，则 n 为一个后跟文字 m 的向后引用。如果前面的条件都不满足，若 n 和 m 均为八进制数字 (0-7)，则 \\nm 将匹配八进制转义值 nm。</td></tr><tr><td style="text-align:left;">\\nml</td><td style="text-align:left;">如果 n 为八进制数字 (0-3)，且 m 和 l 均为八进制数字 (0-7)，则匹配八进制转义值 nml。</td></tr><tr><td style="text-align:left;">\\un</td><td style="text-align:left;">匹配 n，其中 n 是一个用四个十六进制数字表示的 Unicode 字符。例如， \\u00A9 匹配版权符号 (?)。</td></tr></tbody></table><h2 id="实例1" tabindex="-1"><a class="header-anchor" href="#实例1"><span>实例1</span></a></h2><table><thead><tr><th style="text-align:left;">正则</th><th style="text-align:left;">说明</th></tr></thead><tbody><tr><td style="text-align:left;"><code>^((-\\d+)|(0+))$</code></td><td style="text-align:left;">数组</td></tr><tr><td style="text-align:left;"><code>^[0-9]{1,20}$</code></td><td style="text-align:left;">校验是否全由数字组成</td></tr><tr><td style="text-align:left;"><code>^\\d+$</code></td><td style="text-align:left;">非负整数（正整数 + 0）</td></tr><tr><td style="text-align:left;"><code>^[0-9]*[1-9][0-9]*$</code></td><td style="text-align:left;">正整数</td></tr><tr><td style="text-align:left;">^((-\\d+)|(0+))$</td><td style="text-align:left;">非正整数（负整数 + 0）</td></tr><tr><td style="text-align:left;"><code>^-[0-9]*[1-9][0-9]*$</code></td><td style="text-align:left;">负整数</td></tr><tr><td style="text-align:left;"><code>^-?\\d+$</code></td><td style="text-align:left;">整数</td></tr><tr><td style="text-align:left;"><code>^\\d+(\\.\\d+)?$</code></td><td style="text-align:left;">非负浮点数（正浮点数 + 0）</td></tr><tr><td style="text-align:left;"><code>^(([0-9]+\\.[0-9]*[1-9][0-9]*)|([0-9]*[1-9][0-9]*\\.[0-9]+)|([0-9]*[1-9][0-9]*))$</code></td><td style="text-align:left;">正浮点数</td></tr><tr><td style="text-align:left;"><code>^(-?\\d+)(\\.\\d+)?$</code></td><td style="text-align:left;">浮点数</td></tr><tr><td style="text-align:left;"><code>^[A-Za-z]+$</code></td><td style="text-align:left;">由26个英文字母组成的字符串</td></tr><tr><td style="text-align:left;"><code>^[A-Z]+$</code></td><td style="text-align:left;">由26个英文字母的大写组成的字符串</td></tr><tr><td style="text-align:left;"><code>^[A-Za-z0-9]+$</code></td><td style="text-align:left;">由数字和26个英文字母组成的字符串</td></tr><tr><td style="text-align:left;"><code>^\\w+$</code></td><td style="text-align:left;">由数字、26个英文字母或者下划线组成的字符串</td></tr><tr><td style="text-align:left;"><code>^[\\w-]+(\\.[\\w-]+)*@[\\w-]+(\\.[\\w-]+)+$</code></td><td style="text-align:left;">email地址</td></tr><tr><td style="text-align:left;"><code>(d+-)?(d{4}-?d{7}|d{3}-?d{8}|^d{7,8})(-d+)?</code></td><td style="text-align:left;">电话号码</td></tr><tr><td style="text-align:left;"><code>^[\\u4E00-\\u9FA5]+$/</code></td><td style="text-align:left;">中文字符集</td></tr></tbody></table><div class="language-javascript" data-highlighter="prismjs" data-ext="js" data-title="js"><pre><code><span class="line"><span class="token string">&quot;^((-\\d+(\\.\\d+)?)|(0+(\\.0+)?))$&quot;</span> <span class="token comment">//非正浮点数（负浮点数 + 0）</span></span>
<span class="line"><span class="token string">&quot;^(-(([0-9]+\\.[0-9]*[1-9][0-9]*)|([0-9]*[1-9][0-9]*\\.[0-9]+)|([0-9]*[1-9][0-9]*)))$&quot;</span> <span class="token comment">//负浮点数</span></span>
<span class="line"> </span>
<span class="line"><span class="token string">&quot;^[a-zA-z]+://(\\w+(-\\w+)*)(\\.(\\w+(-\\w+)*))*(\\?\\S*)?$&quot;</span> <span class="token comment">//url</span></span>
<span class="line"><span class="token operator">/</span><span class="token operator">^</span><span class="token punctuation">(</span>d<span class="token punctuation">{</span><span class="token number">2</span><span class="token punctuation">}</span><span class="token operator">|</span>d<span class="token punctuation">{</span><span class="token number">4</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token operator">-</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token operator">-</span><span class="token number">9</span><span class="token punctuation">]</span><span class="token punctuation">{</span><span class="token number">1</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">|</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token operator">|</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">-</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token operator">-</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token operator">-</span><span class="token number">9</span><span class="token punctuation">]</span><span class="token punctuation">{</span><span class="token number">1</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">|</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token operator">|</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span>$<span class="token operator">/</span>   <span class="token comment">//  年-月-日</span></span>
<span class="line"><span class="token operator">/</span><span class="token operator">^</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token operator">-</span><span class="token number">9</span><span class="token punctuation">]</span><span class="token punctuation">{</span><span class="token number">1</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">|</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token operator">|</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">/</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token operator">-</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token operator">-</span><span class="token number">9</span><span class="token punctuation">]</span><span class="token punctuation">{</span><span class="token number">1</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">|</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token operator">|</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">/</span><span class="token punctuation">(</span>d<span class="token punctuation">{</span><span class="token number">2</span><span class="token punctuation">}</span><span class="token operator">|</span>d<span class="token punctuation">{</span><span class="token number">4</span><span class="token punctuation">}</span><span class="token punctuation">)</span>$<span class="token operator">/</span>   <span class="token comment">// 月/日/年</span></span>
<span class="line"></span>
<span class="line"><span class="token string">&quot;^([w-.]+)@(([[0-9]{1,3}.[0-9]{1,3}.[0-9]{1,3}.)|(([w-]+.)+))([a-zA-Z]{2,4}|[0-9]{1,3})(]?)$&quot;</span>   <span class="token comment">//Emil</span></span>
<span class="line"></span>
<span class="line"><span class="token string">&quot;^(d{1,2}|1dd|2[0-4]d|25[0-5]).(d{1,2}|1dd|2[0-4]d|25[0-5]).(d{1,2}|1dd|2[0-4]d|25[0-5]).(d{1,2}|1dd|2[0-4]d|25[0-5])$&quot;</span>   <span class="token comment">//IP地址</span></span>
<span class="line"></span>
<span class="line"><span class="token operator">^</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token operator">-</span>9A<span class="token operator">-</span><span class="token constant">F</span><span class="token punctuation">]</span><span class="token punctuation">{</span><span class="token number">2</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token operator">-</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token operator">-</span>9A<span class="token operator">-</span><span class="token constant">F</span><span class="token punctuation">]</span><span class="token punctuation">{</span><span class="token number">2</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token number">5</span><span class="token punctuation">}</span>$   <span class="token comment">//MAC地址的正则表达式</span></span>
<span class="line"></span>
<span class="line"><span class="token operator">^</span><span class="token punctuation">[</span><span class="token operator">-</span><span class="token operator">+</span><span class="token punctuation">]</span><span class="token operator">?</span>\\d<span class="token operator">+</span><span class="token punctuation">(</span>\\<span class="token punctuation">.</span>\\d<span class="token operator">+</span><span class="token punctuation">)</span><span class="token operator">?</span>$  <span class="token comment">//值类型正则表达式</span></span>
<span class="line"></span></code></pre></div><h2 id="实例2" tabindex="-1"><a class="header-anchor" href="#实例2"><span>实例2</span></a></h2><table><thead><tr><th style="text-align:left;">正则表达式</th><th style="text-align:left;">描述</th></tr></thead><tbody><tr><td style="text-align:left;"><code>/\\b([a-z]+) \\1\\b/gi</code></td><td style="text-align:left;">一个单词连续出现的位置。</td></tr><tr><td style="text-align:left;"><code>/(\\w+):\\/\\/([^/:]+)(:\\d*)?([^# ]*)/</code></td><td style="text-align:left;">匹配一个 URL 解析为协议、域、端口及相对路径。</td></tr><tr><td style="text-align:left;"><code>/^(?:Chapter|Section) [1-9][0-9]{0,1}$/</code></td><td style="text-align:left;">定位章节的位置。</td></tr><tr><td style="text-align:left;"><code>/[-a-z]/</code></td><td style="text-align:left;">a 至 z 共 26个 字母再加一个 <strong>-</strong> 号。</td></tr><tr><td style="text-align:left;"><code>/ter\\b/</code></td><td style="text-align:left;">可匹配 chapter，而不能匹配 terminal。</td></tr><tr><td style="text-align:left;"><code>/\\Bapt/</code></td><td style="text-align:left;">可匹配 chapter，而不能匹配 aptitude。</td></tr><tr><td style="text-align:left;"><code>/Windows(?=95|98|NT)/</code></td><td style="text-align:left;">可匹配 Windows95 或 Windows98 或 WindowsNT，当找到一个匹配后，从 Windows 后面开始进行下一次的检索匹配。</td></tr><tr><td style="text-align:left;"><code>/^\\s*$/</code></td><td style="text-align:left;">匹配空行。</td></tr><tr><td style="text-align:left;"><code>/\\d{2}-\\d{5}/</code></td><td style="text-align:left;">验证由两位数字、一个连字符再加 5 位数字组成的 ID 号。</td></tr><tr><td style="text-align:left;"><code>&lt;[a-zA-Z]+.*?&gt;([\\s\\S]*?)</code></td><td style="text-align:left;">匹配 HTML 标记。</td></tr></tbody></table><table><thead><tr><th style="text-align:left;">正则表达式</th><th style="text-align:left;">描述</th></tr></thead><tbody><tr><td style="text-align:left;"><code>hello</code></td><td style="text-align:left;">匹配 {hello}</td></tr><tr><td style="text-align:left;"><code>gray|grey</code></td><td style="text-align:left;">匹配 {gray, grey}</td></tr><tr><td style="text-align:left;"><code>gr(a|e)y</code></td><td style="text-align:left;">匹配 {gray, grey}</td></tr><tr><td style="text-align:left;"><code>gr[ae]y</code></td><td style="text-align:left;">匹配 {gray, grey}</td></tr><tr><td style="text-align:left;"><code>b[aeiou]bble</code></td><td style="text-align:left;">匹配 {babble, bebble, bibble, bobble, bubble}</td></tr><tr><td style="text-align:left;"><code>[b-chm-pP]at|ot</code></td><td style="text-align:left;">匹配 {bat, cat, hat, mat, nat, oat, pat, Pat, ot}</td></tr><tr><td style="text-align:left;"><code>colou?r</code></td><td style="text-align:left;">匹配 {color, colour}</td></tr><tr><td style="text-align:left;"><code>rege(x(es)?|xps?)</code></td><td style="text-align:left;">匹配 {regex, regexes, regexp, regexps}</td></tr><tr><td style="text-align:left;"><code>go*gle</code></td><td style="text-align:left;">匹配 {ggle, gogle, google, gooogle, goooogle, ...}</td></tr><tr><td style="text-align:left;"><code>go+gle</code></td><td style="text-align:left;">匹配 {gogle, google, gooogle, goooogle, ...}</td></tr><tr><td style="text-align:left;"><code>g(oog)+le</code></td><td style="text-align:left;">匹配 {google, googoogle, googoogoogle, googoogoogoogle, ...}</td></tr><tr><td style="text-align:left;"><code>z{3}</code></td><td style="text-align:left;">匹配 {zzz}</td></tr><tr><td style="text-align:left;"><code>z{3,6}</code></td><td style="text-align:left;">匹配 {zzz, zzzz, zzzzz, zzzzzz}</td></tr><tr><td style="text-align:left;"><code>z{3,}</code></td><td style="text-align:left;">匹配 {zzz, zzzz, zzzzz, ...}</td></tr><tr><td style="text-align:left;"><code>[Bb]rainf\\*\\*k</code></td><td style="text-align:left;">匹配 {Brainf<strong>k, brainf</strong>k}</td></tr><tr><td style="text-align:left;"><code>\\d</code></td><td style="text-align:left;">匹配 {0,1,2,3,4,5,6,7,8,9}</td></tr><tr><td style="text-align:left;"><code>1\\d{10}</code></td><td style="text-align:left;">匹配 11 个数字，以 1 开头</td></tr><tr><td style="text-align:left;">\`[2-9]|[12]\\d</td><td style="text-align:left;">3[0-6]\`</td></tr><tr><td style="text-align:left;"><code>Hello\\nworld</code></td><td style="text-align:left;">匹配 Hello 后跟换行符，后跟 world</td></tr><tr><td style="text-align:left;"><code>\\d+(\\.\\d\\d)?</code></td><td style="text-align:left;">包含一个正整数或包含两位小数位的浮点数。</td></tr><tr><td style="text-align:left;"><code>[^*@#]</code></td><td style="text-align:left;">排除 *、@ 、# 三个特色符号</td></tr><tr><td style="text-align:left;"><code>//[^\\r\\n]*[\\r\\n]</code></td><td style="text-align:left;">匹配 <strong>//</strong> 开头的注释</td></tr><tr><td style="text-align:left;"><code>^dog</code></td><td style="text-align:left;">匹配以 &quot;dog&quot; 开始</td></tr><tr><td style="text-align:left;"><code>dog$</code></td><td style="text-align:left;">匹配以 &quot;dog&quot; 结尾</td></tr><tr><td style="text-align:left;"><code>^dog$</code></td><td style="text-align:left;">is exactly &quot;dog&quot;</td></tr></tbody></table>`,22))])}const y=p(u,[["render",g]]),k=JSON.parse('{"path":"/frontend/basic-js/regex/regex.html","title":"正则表达式教程","lang":"zh-CN","frontmatter":{"description":"正则表达式教程 一些学习正则的网站 提示 ihateregex https://regex101.com/ https://regexr.com/ 正则可视化 ,可视化2 菜鸟教程 正则教程 正则表达式大全 bejson tools.u 正则表达式基本语法 正则测试工具","head":[["meta",{"property":"og:url","content":"https://yzqdev.github.io/cs-guide/cs-guide/frontend/basic-js/regex/regex.html"}],["meta",{"property":"og:site_name","content":"cs-guide"}],["meta",{"property":"og:title","content":"正则表达式教程"}],["meta",{"property":"og:description","content":"正则表达式教程 一些学习正则的网站 提示 ihateregex https://regex101.com/ https://regexr.com/ 正则可视化 ,可视化2 菜鸟教程 正则教程 正则表达式大全 bejson tools.u 正则表达式基本语法 正则测试工具"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2022-08-01T04:28:17.000Z"}],["meta",{"property":"article:modified_time","content":"2022-08-01T04:28:17.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"正则表达式教程\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2022-08-01T04:28:17.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"yzqdev\\",\\"url\\":\\"http://www.yzqdev.top\\"}]}"]]},"headers":[{"level":2,"title":"正则表达式基本语法","slug":"正则表达式基本语法","link":"#正则表达式基本语法","children":[{"level":3,"title":"例子","slug":"例子","link":"#例子","children":[]},{"level":3,"title":"如下面的表格","slug":"如下面的表格","link":"#如下面的表格","children":[]}]},{"level":2,"title":"实例1","slug":"实例1","link":"#实例1","children":[]},{"level":2,"title":"实例2","slug":"实例2","link":"#实例2","children":[]}],"git":{"createdTime":1647861419000,"updatedTime":1659328097000,"contributors":[{"name":"yzqdev","username":"yzqdev","email":"yzqdev@outlook.com","commits":11,"url":"https://github.com/yzqdev"},{"name":"Anonymous","username":"Anonymous","email":"yzqbot@outlook.com","commits":1,"url":"https://github.com/Anonymous"}]},"readingTime":{"minutes":12.02,"words":3606},"filePathRelative":"frontend/basic-js/regex/regex.md","localizedDate":"2022年3月21日","autoDesc":true}');export{y as comp,k as data};
