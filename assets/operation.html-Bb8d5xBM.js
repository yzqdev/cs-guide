import{_ as n,c as a,a as e,o as p}from"./app-C8DxhDIZ.js";const t={};function o(l,s){return p(),a("div",null,s[0]||(s[0]=[e(`<h1 id="mysql操作" tabindex="-1"><a class="header-anchor" href="#mysql操作"><span>mysql操作</span></a></h1><h1 id="数据类型" tabindex="-1"><a class="header-anchor" href="#数据类型"><span>数据类型</span></a></h1><table><thead><tr><th style="text-align:left;">名称</th><th style="text-align:left;">类型</th><th style="text-align:left;">说明</th></tr></thead><tbody><tr><td style="text-align:left;">INT</td><td style="text-align:left;">整型</td><td style="text-align:left;">4字节整数类型，范围约+/-21亿</td></tr><tr><td style="text-align:left;">BIGINT</td><td style="text-align:left;">长整型</td><td style="text-align:left;">8字节整数类型，范围约+/-922亿亿</td></tr><tr><td style="text-align:left;">REAL</td><td style="text-align:left;">浮点型</td><td style="text-align:left;">4字节浮点数，范围约+/-1038</td></tr><tr><td style="text-align:left;">DOUBLE</td><td style="text-align:left;">浮点型</td><td style="text-align:left;">8字节浮点数，范围约+/-10308</td></tr><tr><td style="text-align:left;">DECIMAL(M,N)</td><td style="text-align:left;">高精度小数</td><td style="text-align:left;">由用户指定精度的小数，例如，DECIMAL(20,10)表示一共20位，其中小数10位，通常用于财务计算</td></tr><tr><td style="text-align:left;">CHAR(N)</td><td style="text-align:left;">定长字符串</td><td style="text-align:left;">存储指定长度的字符串，例如，CHAR(100)总是存储100个字符的字符串</td></tr><tr><td style="text-align:left;">VARCHAR(N)</td><td style="text-align:left;">变长字符串</td><td style="text-align:left;">存储可变长度的字符串，例如，VARCHAR(100)可以存储0~100个字符的字符串</td></tr><tr><td style="text-align:left;">BOOLEAN</td><td style="text-align:left;">布尔类型</td><td style="text-align:left;">存储True或者False</td></tr><tr><td style="text-align:left;">DATE</td><td style="text-align:left;">日期类型</td><td style="text-align:left;">存储日期，例如，2018-06-22</td></tr><tr><td style="text-align:left;">TIME</td><td style="text-align:left;">时间类型</td><td style="text-align:left;">存储时间，例如，12:20:59</td></tr><tr><td style="text-align:left;">DATETIME</td><td style="text-align:left;">日期和时间类型</td><td style="text-align:left;">存储日期+时间，例如，2018-06-22 12:20:59</td></tr></tbody></table><div class="hint-container tip"><p class="hint-container-title">提示</p><p>先创建几个例子</p><div class="language-sql line-numbers-mode" data-highlighter="prismjs" data-ext="sql" data-title="sql"><pre><code><span class="line"><span class="token keyword">create</span> <span class="token keyword">table</span> samp_db<span class="token punctuation">.</span>students <span class="token punctuation">(</span></span>
<span class="line">    id int8 <span class="token operator">not</span> <span class="token boolean">null</span>  <span class="token keyword">unique</span> <span class="token keyword">primary</span> <span class="token keyword">key</span>  <span class="token keyword">auto_increment</span> <span class="token keyword">comment</span> <span class="token string">&#39;id主键&#39;</span><span class="token punctuation">,</span></span>
<span class="line">    name <span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">32</span><span class="token punctuation">)</span> <span class="token operator">not</span> <span class="token boolean">null</span>  <span class="token keyword">default</span> <span class="token string">&#39;&#39;</span> <span class="token keyword">comment</span> <span class="token string">&#39;姓名&#39;</span><span class="token punctuation">,</span></span>
<span class="line">    sex <span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">32</span><span class="token punctuation">)</span> <span class="token operator">not</span> <span class="token boolean">null</span>  <span class="token keyword">default</span> <span class="token string">&#39;男&#39;</span> <span class="token keyword">comment</span> <span class="token string">&#39;性别&#39;</span><span class="token punctuation">,</span></span>
<span class="line">    score int2 <span class="token operator">not</span> <span class="token boolean">null</span>  <span class="token keyword">comment</span> <span class="token string">&#39;分数&#39;</span><span class="token punctuation">,</span></span>
<span class="line">    class_id int8 <span class="token operator">not</span> <span class="token boolean">null</span> <span class="token keyword">comment</span> <span class="token string">&#39;班级id&#39;</span><span class="token punctuation">,</span></span>
<span class="line">    <span class="token keyword">index</span> <span class="token punctuation">(</span>id<span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">)</span> <span class="token keyword">if</span> <span class="token operator">not</span> exist<span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">create</span> <span class="token keyword">table</span> samp_db<span class="token punctuation">.</span>classes</span>
<span class="line"><span class="token punctuation">(</span></span>
<span class="line">    id   int8 <span class="token keyword">unique</span>    <span class="token keyword">primary</span> <span class="token keyword">key</span>         <span class="token operator">not</span> <span class="token boolean">null</span> <span class="token keyword">auto_increment</span><span class="token punctuation">,</span></span>
<span class="line">    name <span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">32</span><span class="token punctuation">)</span> <span class="token keyword">default</span> <span class="token string">&#39;&#39;</span> <span class="token operator">not</span> <span class="token boolean">null</span></span>
<span class="line"><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token comment">-- 添加外键</span></span>
<span class="line"><span class="token keyword">ALTER</span> <span class="token keyword">TABLE</span> students</span>
<span class="line"><span class="token keyword">ADD</span> <span class="token keyword">CONSTRAINT</span> fk_class_id</span>
<span class="line"><span class="token keyword">FOREIGN</span> <span class="token keyword">KEY</span> <span class="token punctuation">(</span>class_id<span class="token punctuation">)</span></span>
<span class="line"><span class="token keyword">REFERENCES</span> classes <span class="token punctuation">(</span>id<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></div><h2 id="创建数据库" tabindex="-1"><a class="header-anchor" href="#创建数据库"><span>创建数据库</span></a></h2><div class="language-sql" data-highlighter="prismjs" data-ext="sql" data-title="sql"><pre><code><span class="line"><span class="token keyword">create</span> <span class="token keyword">database</span> samp_db</span>
<span class="line"><span class="token keyword">drop</span> <span class="token keyword">database</span> samp_db<span class="token punctuation">;</span> <span class="token comment">-- 删除 库名为 samp_db 的库</span></span>
<span class="line"><span class="token keyword">show</span> <span class="token keyword">databases</span><span class="token punctuation">;</span>        <span class="token comment">-- 显示数据库列表。</span></span>
<span class="line"><span class="token keyword">use</span> samp_db<span class="token punctuation">;</span>           <span class="token comment">-- 选择创建的数据库 samp_db </span></span>
<span class="line"><span class="token keyword">show</span> <span class="token keyword">tables</span><span class="token punctuation">;</span>           <span class="token comment">-- 显示 samp_db 下面所有的表名字</span></span>
<span class="line"><span class="token keyword">describe</span> 表名<span class="token punctuation">;</span>          <span class="token comment">-- 显示数据表的结构</span></span>
<span class="line"><span class="token keyword">delete</span> <span class="token keyword">from</span> 表名<span class="token punctuation">;</span>       <span class="token comment">-- 清空表中记录</span></span>
<span class="line"></span></code></pre></div><h2 id="创建表" tabindex="-1"><a class="header-anchor" href="#创建表"><span>创建表</span></a></h2><div class="language-sql line-numbers-mode" data-highlighter="prismjs" data-ext="sql" data-title="sql"><pre><code><span class="line"><span class="token comment"># -- 如果数据库中存在user_accounts表，就把它从数据库中drop掉</span></span>
<span class="line"><span class="token keyword">DROP</span> <span class="token keyword">TABLE</span> <span class="token keyword">IF</span> <span class="token keyword">EXISTS</span> <span class="token identifier"><span class="token punctuation">\`</span>user<span class="token punctuation">\`</span></span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">CREATE</span> <span class="token keyword">TABLE</span> <span class="token identifier"><span class="token punctuation">\`</span>user<span class="token punctuation">\`</span></span> <span class="token punctuation">(</span></span>
<span class="line">  <span class="token identifier"><span class="token punctuation">\`</span>id<span class="token punctuation">\`</span></span>             <span class="token keyword">int</span><span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">)</span> <span class="token keyword">unsigned</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span> <span class="token keyword">AUTO_INCREMENT</span> <span class="token keyword">primary</span> <span class="token keyword">key</span><span class="token punctuation">,</span></span>
<span class="line">  <span class="token identifier"><span class="token punctuation">\`</span>password<span class="token punctuation">\`</span></span>       <span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">32</span><span class="token punctuation">)</span>       <span class="token operator">NOT</span> <span class="token boolean">NULL</span> <span class="token keyword">DEFAULT</span> <span class="token string">&#39;&#39;</span> <span class="token keyword">COMMENT</span> <span class="token string">&#39;用户密码&#39;</span><span class="token punctuation">,</span></span>
<span class="line">  <span class="token identifier"><span class="token punctuation">\`</span>username<span class="token punctuation">\`</span></span>       <span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">32</span><span class="token punctuation">)</span>       <span class="token operator">not</span> <span class="token boolean">null</span> <span class="token keyword">default</span> <span class="token string">&#39;&#39;</span> <span class="token keyword">comment</span> <span class="token string">&#39;&#39;</span><span class="token punctuation">,</span></span>
<span class="line">  <span class="token identifier"><span class="token punctuation">\`</span>reset_password<span class="token punctuation">\`</span></span> <span class="token keyword">tinyint</span><span class="token punctuation">(</span><span class="token number">32</span><span class="token punctuation">)</span>       <span class="token operator">NOT</span> <span class="token boolean">NULL</span> <span class="token keyword">DEFAULT</span> <span class="token number">0</span> <span class="token keyword">COMMENT</span> <span class="token string">&#39;用户类型：0－不需要重置密码；1-需要重置密码&#39;</span><span class="token punctuation">,</span></span>
<span class="line">  <span class="token identifier"><span class="token punctuation">\`</span>mobile<span class="token punctuation">\`</span></span>         <span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">)</span>       <span class="token operator">NOT</span> <span class="token boolean">NULL</span> <span class="token keyword">DEFAULT</span> <span class="token string">&#39;&#39;</span> <span class="token keyword">COMMENT</span> <span class="token string">&#39;手机&#39;</span><span class="token punctuation">,</span></span>
<span class="line">  <span class="token identifier"><span class="token punctuation">\`</span>create_at<span class="token punctuation">\`</span></span>      <span class="token keyword">timestamp</span><span class="token punctuation">(</span><span class="token number">6</span><span class="token punctuation">)</span>      <span class="token operator">NOT</span> <span class="token boolean">NULL</span> <span class="token keyword">DEFAULT</span> <span class="token keyword">CURRENT_TIMESTAMP</span><span class="token punctuation">(</span><span class="token number">6</span><span class="token punctuation">)</span><span class="token punctuation">,</span></span>
<span class="line">  <span class="token identifier"><span class="token punctuation">\`</span>update_at<span class="token punctuation">\`</span></span>      <span class="token keyword">timestamp</span><span class="token punctuation">(</span><span class="token number">6</span><span class="token punctuation">)</span>      <span class="token operator">NOT</span> <span class="token boolean">NULL</span> <span class="token keyword">DEFAULT</span> <span class="token keyword">CURRENT_TIMESTAMP</span><span class="token punctuation">(</span><span class="token number">6</span><span class="token punctuation">)</span> <span class="token keyword">ON</span> <span class="token keyword">UPDATE</span> <span class="token keyword">CURRENT_TIMESTAMP</span><span class="token punctuation">(</span><span class="token number">6</span><span class="token punctuation">)</span><span class="token punctuation">,</span></span>
<span class="line">  <span class="token comment">-- 创建唯一索引，不允许重复</span></span>
<span class="line">  <span class="token keyword">UNIQUE</span> <span class="token keyword">INDEX</span> idx_user_mobile<span class="token punctuation">(</span><span class="token identifier"><span class="token punctuation">\`</span>mobile<span class="token punctuation">\`</span></span><span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">)</span></span>
<span class="line"><span class="token keyword">ENGINE</span><span class="token operator">=</span><span class="token keyword">InnoDB</span> <span class="token keyword">DEFAULT</span> <span class="token keyword">CHARSET</span><span class="token operator">=</span>utf8</span>
<span class="line"><span class="token keyword">COMMENT</span><span class="token operator">=</span><span class="token string">&#39;用户表信息&#39;</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="删除表" tabindex="-1"><a class="header-anchor" href="#删除表"><span>删除表</span></a></h2><div class="language-sql" data-highlighter="prismjs" data-ext="sql" data-title="sql"><pre><code><span class="line"><span class="token keyword">DROP</span> <span class="token keyword">TABLE</span> <span class="token keyword">user</span><span class="token punctuation">;</span>     <span class="token comment">-- 用于删除数据库中的现有表。</span></span>
<span class="line"><span class="token keyword">TRUNCATE</span> <span class="token keyword">TABLE</span> <span class="token keyword">user</span><span class="token punctuation">;</span> <span class="token comment">-- 用于删除表内的数据，但不删除表本身。</span></span>
<span class="line"></span></code></pre></div><h2 id="增删改查" tabindex="-1"><a class="header-anchor" href="#增删改查"><span>增删改查</span></a></h2><h2 id="insert" tabindex="-1"><a class="header-anchor" href="#insert"><span>insert</span></a></h2><div class="language-sql" data-highlighter="prismjs" data-ext="sql" data-title="sql"><pre><code><span class="line"><span class="token keyword">insert</span> <span class="token keyword">into</span> <span class="token keyword">user</span><span class="token punctuation">(</span>  username<span class="token punctuation">,</span> password<span class="token punctuation">,</span> reset_password<span class="token punctuation">,</span> mobile<span class="token punctuation">,</span> create_at<span class="token punctuation">,</span> update_at<span class="token punctuation">)</span> <span class="token keyword">VALUES</span> <span class="token punctuation">(</span><span class="token string">&#39;用户名&#39;</span><span class="token punctuation">,</span><span class="token string">&#39;123456&#39;</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token string">&#39;1888888888&#39;</span><span class="token punctuation">,</span><span class="token string">&#39;2017-05-18 11:06:17&#39;</span><span class="token punctuation">,</span><span class="token string">&#39;2017-05-18 11:06:17&#39;</span><span class="token punctuation">)</span></span>
<span class="line"><span class="token comment">-- 向表中插入字段username和mobile</span></span>
<span class="line"><span class="token keyword">insert</span> <span class="token keyword">into</span> <span class="token keyword">user</span> <span class="token keyword">set</span> username<span class="token operator">=</span><span class="token string">&#39;setuser&#39;</span><span class="token punctuation">,</span>mobile<span class="token operator">=</span><span class="token string">&#39;11222222&#39;</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token comment">-- SQL实现将一个表的数据插入到另外一个表的代码</span></span>
<span class="line"><span class="token comment">-- 如果只希望导入指定字段，可以用这种方法：</span></span>
<span class="line"><span class="token comment">-- INSERT INTO 目标表 (字段1, 字段2, ...) SELECT 字段1, 字段2, ... FROM 来源表;</span></span>
<span class="line"><span class="token keyword">INSERT</span> <span class="token keyword">INTO</span> orders <span class="token punctuation">(</span>user_account_id<span class="token punctuation">,</span> title<span class="token punctuation">)</span> <span class="token keyword">SELECT</span> m<span class="token punctuation">.</span>user_id<span class="token punctuation">,</span> m<span class="token punctuation">.</span>title <span class="token keyword">FROM</span> meeting m <span class="token keyword">where</span> m<span class="token punctuation">.</span>id<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">-- 向表 charger 插入一条数据，已存在就对表 charger 更新 \`type\`,\`update_at\` 字段；</span></span>
<span class="line"><span class="token keyword">INSERT</span> <span class="token keyword">INTO</span> <span class="token identifier"><span class="token punctuation">\`</span>charger<span class="token punctuation">\`</span></span> <span class="token punctuation">(</span><span class="token identifier"><span class="token punctuation">\`</span>id<span class="token punctuation">\`</span></span><span class="token punctuation">,</span><span class="token identifier"><span class="token punctuation">\`</span>type<span class="token punctuation">\`</span></span><span class="token punctuation">,</span><span class="token identifier"><span class="token punctuation">\`</span>create_at<span class="token punctuation">\`</span></span><span class="token punctuation">,</span><span class="token identifier"><span class="token punctuation">\`</span>update_at<span class="token punctuation">\`</span></span><span class="token punctuation">)</span> <span class="token keyword">VALUES</span> <span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token string">&#39;2017-05-18 11:06:17&#39;</span><span class="token punctuation">,</span><span class="token string">&#39;2017-05-18 11:06:17&#39;</span><span class="token punctuation">)</span> <span class="token keyword">ON</span> <span class="token keyword">DUPLICATE</span> <span class="token keyword">KEY</span> <span class="token keyword">UPDATE</span> <span class="token identifier"><span class="token punctuation">\`</span>id<span class="token punctuation">\`</span></span><span class="token operator">=</span><span class="token keyword">VALUES</span><span class="token punctuation">(</span><span class="token identifier"><span class="token punctuation">\`</span>id<span class="token punctuation">\`</span></span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token identifier"><span class="token punctuation">\`</span>type<span class="token punctuation">\`</span></span><span class="token operator">=</span><span class="token keyword">VALUES</span><span class="token punctuation">(</span><span class="token identifier"><span class="token punctuation">\`</span>type<span class="token punctuation">\`</span></span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token identifier"><span class="token punctuation">\`</span>update_at<span class="token punctuation">\`</span></span><span class="token operator">=</span><span class="token keyword">VALUES</span><span class="token punctuation">(</span><span class="token identifier"><span class="token punctuation">\`</span>update_at<span class="token punctuation">\`</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre></div><h2 id="delete" tabindex="-1"><a class="header-anchor" href="#delete"><span>delete</span></a></h2><div class="language-sql" data-highlighter="prismjs" data-ext="sql" data-title="sql"><pre><code><span class="line"><span class="token comment">-- 在不删除table_name表的情况下删除所有的行，清空表。</span></span>
<span class="line"><span class="token keyword">DELETE</span> <span class="token keyword">FROM</span> table_name</span>
<span class="line"><span class="token comment">-- 或者</span></span>
<span class="line"><span class="token keyword">DELETE</span> <span class="token operator">*</span> <span class="token keyword">FROM</span> table_name</span>
<span class="line"><span class="token comment">-- 删除 Person 表字段 LastName = &#39;JSLite&#39; </span></span>
<span class="line"><span class="token keyword">DELETE</span> <span class="token keyword">FROM</span> person <span class="token keyword">WHERE</span> last_name <span class="token operator">=</span> <span class="token string">&#39;JSLite&#39;</span> </span>
<span class="line"><span class="token comment">-- 删除 表meeting id 为2和3的两条数据</span></span>
<span class="line"><span class="token keyword">DELETE</span> <span class="token keyword">from</span> meeting <span class="token keyword">where</span> id <span class="token operator">in</span> <span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"></span></code></pre></div><h2 id="update" tabindex="-1"><a class="header-anchor" href="#update"><span>update</span></a></h2><div class="language-sql" data-highlighter="prismjs" data-ext="sql" data-title="sql"><pre><code><span class="line"><span class="token comment">-- update语句设置字段值为另一个结果取出来的字段</span></span>
<span class="line"><span class="token keyword">UPDATE</span> <span class="token keyword">user</span> <span class="token keyword">set</span> name <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">SELECT</span> name <span class="token keyword">from</span> user1 <span class="token keyword">WHERE</span> user1 <span class="token punctuation">.</span>id <span class="token operator">=</span> <span class="token number">1</span> <span class="token punctuation">)</span></span>
<span class="line"><span class="token keyword">WHERE</span> id <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">SELECT</span> id <span class="token keyword">from</span> user2 <span class="token keyword">WHERE</span> user2 <span class="token punctuation">.</span>name<span class="token operator">=</span><span class="token string">&#39;小苏&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token comment">-- 更新表 orders 中 id=1 的那一行数据更新它的 title 字段</span></span>
<span class="line"><span class="token keyword">UPDATE</span> <span class="token identifier"><span class="token punctuation">\`</span>orders<span class="token punctuation">\`</span></span> <span class="token keyword">set</span> title<span class="token operator">=</span><span class="token string">&#39;这里是标题&#39;</span> <span class="token keyword">WHERE</span> id<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"></span></code></pre></div><h2 id="select" tabindex="-1"><a class="header-anchor" href="#select"><span>select</span></a></h2><div class="language-sql line-numbers-mode" data-highlighter="prismjs" data-ext="sql" data-title="sql"><pre><code><span class="line"><span class="token keyword">select</span> username<span class="token punctuation">,</span>mobile <span class="token keyword">from</span> <span class="token keyword">user</span> <span class="token keyword">where</span>  id<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token comment">-- 选择所有</span></span>
<span class="line"><span class="token keyword">select</span>  <span class="token operator">*</span> <span class="token keyword">from</span> <span class="token keyword">user</span><span class="token punctuation">;</span></span>
<span class="line"> </span>
<span class="line"><span class="token comment">-- 表 station 取个别名叫 s，表 station 中不包含 字段 id=13 或者 14 的，并且 id 不等于 4 的 查询出来，只显示 id</span></span>
<span class="line"><span class="token keyword">SELECT</span> s<span class="token punctuation">.</span>id <span class="token keyword">from</span> station s <span class="token keyword">WHERE</span> id <span class="token operator">in</span> <span class="token punctuation">(</span><span class="token number">13</span><span class="token punctuation">,</span><span class="token number">14</span><span class="token punctuation">)</span> <span class="token operator">and</span> id <span class="token operator">not</span> <span class="token operator">in</span> <span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token comment">-- 从表 users 选取 id=3 的数据，并只拉一条数据(据说能优化性能)</span></span>
<span class="line"><span class="token keyword">SELECT</span> <span class="token operator">*</span> <span class="token keyword">FROM</span> <span class="token keyword">user</span>  <span class="token keyword">where</span> id<span class="token operator">=</span><span class="token number">3</span> <span class="token keyword">limit</span> <span class="token number">1</span></span>
<span class="line"><span class="token comment">-- 结果集中会自动去重复数据</span></span>
<span class="line"><span class="token keyword">SELECT</span> <span class="token keyword">DISTINCT</span> username <span class="token keyword">FROM</span> <span class="token keyword">user</span></span>
<span class="line"><span class="token comment">-- 表 person 字段 id 等于 order 字段 id 的值，</span></span>
<span class="line"><span class="token comment">-- 结果集显示 person表的 last_name、first_name字段，order表的order_number字段</span></span>
<span class="line"><span class="token keyword">SELECT</span> p<span class="token punctuation">.</span>last_name<span class="token punctuation">,</span> p<span class="token punctuation">.</span>first_name<span class="token punctuation">,</span> o<span class="token punctuation">.</span>order_number <span class="token keyword">FROM</span> person p<span class="token punctuation">,</span> <span class="token keyword">order</span> o <span class="token keyword">WHERE</span> p<span class="token punctuation">.</span>id <span class="token operator">=</span> o<span class="token punctuation">.</span>id</span>
<span class="line"></span>
<span class="line"><span class="token comment">-- gbk 和 utf8 中英文混合排序最简单的办法 </span></span>
<span class="line"><span class="token comment">-- ci是 case insensitive, 即 “大小写不敏感”</span></span>
<span class="line"><span class="token keyword">SELECT</span> tag<span class="token punctuation">,</span> <span class="token function">COUNT</span><span class="token punctuation">(</span>tag<span class="token punctuation">)</span> <span class="token keyword">from</span> news <span class="token keyword">GROUP</span> <span class="token keyword">BY</span> tag <span class="token keyword">order</span> <span class="token keyword">by</span> <span class="token keyword">convert</span><span class="token punctuation">(</span>tag <span class="token keyword">using</span> gbk<span class="token punctuation">)</span> <span class="token keyword">collate</span> gbk_chinese_ci<span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">SELECT</span> tag<span class="token punctuation">,</span> <span class="token function">COUNT</span><span class="token punctuation">(</span>tag<span class="token punctuation">)</span> <span class="token keyword">from</span> news <span class="token keyword">GROUP</span> <span class="token keyword">BY</span> tag <span class="token keyword">order</span> <span class="token keyword">by</span> <span class="token keyword">convert</span><span class="token punctuation">(</span>tag <span class="token keyword">using</span> utf8<span class="token punctuation">)</span> <span class="token keyword">collate</span> utf8_unicode_ci<span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="where" tabindex="-1"><a class="header-anchor" href="#where"><span>where</span></a></h2><div class="language-sql" data-highlighter="prismjs" data-ext="sql" data-title="sql"><pre><code><span class="line"></span>
<span class="line"><span class="token comment">-- 从表 persons 中选出 year 字段大于 1965 的数据</span></span>
<span class="line"><span class="token keyword">SELECT</span> <span class="token operator">*</span> <span class="token keyword">FROM</span> person <span class="token keyword">WHERE</span> <span class="token keyword">year</span><span class="token operator">&gt;</span><span class="token number">1965</span></span>
<span class="line"><span class="token comment">-- 从 customers 表中选择 country = Mexico 的所有数据：</span></span>
<span class="line"><span class="token keyword">SELECT</span> <span class="token operator">*</span> <span class="token keyword">FROM</span> customer <span class="token keyword">WHERE</span> country<span class="token operator">=</span><span class="token string">&#39;Mexico&#39;</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token comment">-- 从 customer 表中选择 customer_id = 1 的所有数据：</span></span>
<span class="line"><span class="token keyword">SELECT</span> <span class="token operator">*</span> <span class="token keyword">FROM</span> customer <span class="token keyword">WHERE</span> customer_id<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre></div><h3 id="and-or-和-not" tabindex="-1"><a class="header-anchor" href="#and-or-和-not"><span>AND, OR 和 NOT</span></a></h3><div class="language-sql" data-highlighter="prismjs" data-ext="sql" data-title="sql"><pre><code><span class="line"><span class="token comment">-- 删除 meeting 表字段 </span></span>
<span class="line"><span class="token comment">-- id=2 并且 user_id=5 的数据  和</span></span>
<span class="line"><span class="token comment">-- id=3 并且 user_id=6 的数据 </span></span>
<span class="line"><span class="token keyword">DELETE</span> <span class="token keyword">from</span> meeting <span class="token keyword">where</span> id <span class="token operator">in</span> <span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">)</span> <span class="token operator">and</span> user_id <span class="token operator">in</span> <span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">6</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">-- 使用 AND 来显示所有姓为 &quot;Carter&quot; 并且名为 &quot;Thomas&quot; 的人：</span></span>
<span class="line"><span class="token keyword">SELECT</span> <span class="token operator">*</span> <span class="token keyword">FROM</span> Persons <span class="token keyword">WHERE</span> FirstName<span class="token operator">=</span><span class="token string">&#39;Thomas&#39;</span> <span class="token operator">AND</span> LastName<span class="token operator">=</span><span class="token string">&#39;Carter&#39;</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"></span></code></pre></div><h3 id="or" tabindex="-1"><a class="header-anchor" href="#or"><span>OR</span></a></h3><blockquote><p><code>OR 语法</code></p><div class="language-sql" data-highlighter="prismjs" data-ext="sql" data-title="sql"><pre><code><span class="line"><span class="token keyword">SELECT</span> 列名称<span class="token number">1</span><span class="token punctuation">,</span> 列名称<span class="token number">2</span><span class="token punctuation">,</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> <span class="token keyword">FROM</span> 表名称 <span class="token keyword">WHERE</span> 条件<span class="token number">1</span> <span class="token operator">OR</span> 条件<span class="token number">2</span> <span class="token operator">OR</span> 条件<span class="token number">3</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre></div></blockquote><div class="language-sql" data-highlighter="prismjs" data-ext="sql" data-title="sql"><pre><code><span class="line"><span class="token comment">-- 使用 OR 来显示所有姓为 &quot;Carter&quot; 或者名为 &quot;Thomas&quot; 的人：</span></span>
<span class="line"><span class="token keyword">SELECT</span> <span class="token operator">*</span> <span class="token keyword">FROM</span> Persons <span class="token keyword">WHERE</span> firstname<span class="token operator">=</span><span class="token string">&#39;Thomas&#39;</span> <span class="token operator">OR</span> lastname<span class="token operator">=</span><span class="token string">&#39;Carter&#39;</span></span>
<span class="line"></span></code></pre></div><h3 id="not" tabindex="-1"><a class="header-anchor" href="#not"><span>NOT</span></a></h3><blockquote><p><code>NOT 语法</code></p><div class="language-sql" data-highlighter="prismjs" data-ext="sql" data-title="sql"><pre><code><span class="line"><span class="token keyword">SELECT</span> 列名称<span class="token number">1</span><span class="token punctuation">,</span> 列名称<span class="token number">2</span><span class="token punctuation">,</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> <span class="token keyword">FROM</span> 表名称 <span class="token keyword">WHERE</span> <span class="token operator">NOT</span> 条件<span class="token number">2</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre></div></blockquote><div class="language-sql" data-highlighter="prismjs" data-ext="sql" data-title="sql"><pre><code><span class="line"><span class="token comment">-- 从 Customers 表中选择 Country 不是 Germany 的所有字段：</span></span>
<span class="line"><span class="token keyword">SELECT</span> <span class="token operator">*</span> <span class="token keyword">FROM</span> Customers <span class="token keyword">WHERE</span> <span class="token operator">NOT</span> Country<span class="token operator">=</span><span class="token string">&#39;Germany&#39;</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre></div><h3 id="and-or-not" tabindex="-1"><a class="header-anchor" href="#and-or-not"><span>AND &amp; OR &amp; NOT</span></a></h3><div class="language-sql" data-highlighter="prismjs" data-ext="sql" data-title="sql"><pre><code><span class="line"><span class="token comment">-- 从 Customers 表中选择所有字段，其中 Country 为 Germany 且城市必须为 Berlin 或 München（使用括号构成复杂表达式）：</span></span>
<span class="line"><span class="token keyword">SELECT</span> <span class="token operator">*</span> <span class="token keyword">FROM</span> Customers <span class="token keyword">WHERE</span> Country<span class="token operator">=</span><span class="token string">&#39;Germany&#39;</span> <span class="token operator">AND</span> <span class="token punctuation">(</span>City<span class="token operator">=</span><span class="token string">&#39;Berlin&#39;</span> <span class="token operator">OR</span> City<span class="token operator">=</span><span class="token string">&#39;München&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token comment">-- 从 Customers 表中选择 Country 不是 Germany 和 NOT &quot;USA&quot; 的所有字段：</span></span>
<span class="line"><span class="token keyword">SELECT</span> <span class="token operator">*</span> <span class="token keyword">FROM</span> Customers <span class="token keyword">WHERE</span> <span class="token operator">NOT</span> Country<span class="token operator">=</span><span class="token string">&#39;Germany&#39;</span> <span class="token operator">AND</span> <span class="token operator">NOT</span> Country<span class="token operator">=</span><span class="token string">&#39;USA&#39;</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre></div><h2 id="order-by" tabindex="-1"><a class="header-anchor" href="#order-by"><span>ORDER BY</span></a></h2><blockquote><p><code>ORDER BY 语法</code> 用于按升序或降序对结果集进行排序。</p><div class="language-sql" data-highlighter="prismjs" data-ext="sql" data-title="sql"><pre><code><span class="line"><span class="token keyword">SELECT</span> 列名称<span class="token number">1</span><span class="token punctuation">,</span> 列名称<span class="token number">2</span><span class="token punctuation">,</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> <span class="token keyword">FROM</span> 表名称 <span class="token keyword">ORDER</span> <span class="token keyword">BY</span> 列名称<span class="token number">1</span><span class="token punctuation">,</span> 列名称<span class="token number">2</span><span class="token punctuation">,</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> <span class="token keyword">ASC</span><span class="token operator">|</span><span class="token keyword">DESC</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre></div><p>默认按 <code>ASC</code> 升序对记录进行排序。要按降序对记录进行排序，请使用 <code>DESC</code> 关键字。</p></blockquote><div class="language-sql" data-highlighter="prismjs" data-ext="sql" data-title="sql"><pre><code><span class="line"><span class="token comment">-- 从 Customers 表中选择所有字段，按 Country 列排序：</span></span>
<span class="line"><span class="token keyword">SELECT</span> <span class="token operator">*</span> <span class="token keyword">FROM</span> Customers <span class="token keyword">ORDER</span> <span class="token keyword">BY</span> Country<span class="token punctuation">;</span></span>
<span class="line"><span class="token comment">-- 从 Orders 表中选择 Company, OrderNumber 字段，按 Company 列排序：</span></span>
<span class="line"><span class="token keyword">SELECT</span> Company<span class="token punctuation">,</span> OrderNumber <span class="token keyword">FROM</span> Orders <span class="token keyword">ORDER</span> <span class="token keyword">BY</span> Company</span>
<span class="line"><span class="token comment">-- 从 Orders 表中选择 Company, OrderNumber 字段，按 Company 列降序排序：</span></span>
<span class="line"><span class="token keyword">SELECT</span> Company<span class="token punctuation">,</span> OrderNumber <span class="token keyword">FROM</span> Orders <span class="token keyword">ORDER</span> <span class="token keyword">BY</span> Company <span class="token keyword">DESC</span></span>
<span class="line"><span class="token comment">-- 从 Orders 表中选择 Company, OrderNumber 字段，按 Company 列降序排序，并 OrderNumber 以顺序显示：</span></span>
<span class="line"><span class="token keyword">SELECT</span> Company<span class="token punctuation">,</span> OrderNumber <span class="token keyword">FROM</span> Orders <span class="token keyword">ORDER</span> <span class="token keyword">BY</span> Company <span class="token keyword">DESC</span><span class="token punctuation">,</span> OrderNumber <span class="token keyword">ASC</span></span>
<span class="line"></span></code></pre></div><h2 id="group-by" tabindex="-1"><a class="header-anchor" href="#group-by"><span>GROUP BY</span></a></h2><blockquote><p><code>GROUP BY 语法</code> 将具有相同值的行分组到汇总行中</p><div class="language-sql" data-highlighter="prismjs" data-ext="sql" data-title="sql"><pre><code><span class="line"><span class="token keyword">SELECT</span> 列名称<span class="token punctuation">(</span>s<span class="token punctuation">)</span></span>
<span class="line"><span class="token keyword">FROM</span> 表名称</span>
<span class="line"><span class="token keyword">WHERE</span> 条件</span>
<span class="line"><span class="token keyword">GROUP</span> <span class="token keyword">BY</span> 列名称<span class="token punctuation">(</span>s<span class="token punctuation">)</span></span>
<span class="line"><span class="token keyword">ORDER</span> <span class="token keyword">BY</span> 列名称<span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre></div></blockquote><div class="language-sql" data-highlighter="prismjs" data-ext="sql" data-title="sql"><pre><code><span class="line"><span class="token comment">-- 列出了 Orders 每个发货人 Shippers 发送的订单 Orders 数量</span></span>
<span class="line"><span class="token keyword">SELECT</span> Shippers<span class="token punctuation">.</span>ShipperName<span class="token punctuation">,</span> <span class="token function">COUNT</span><span class="token punctuation">(</span>Orders<span class="token punctuation">.</span>OrderID<span class="token punctuation">)</span> <span class="token keyword">AS</span> NumberOfOrders <span class="token keyword">FROM</span> Orders</span>
<span class="line"><span class="token keyword">LEFT</span> <span class="token keyword">JOIN</span> Shippers <span class="token keyword">ON</span> Orders<span class="token punctuation">.</span>ShipperID <span class="token operator">=</span> Shippers<span class="token punctuation">.</span>ShipperID</span>
<span class="line"><span class="token keyword">GROUP</span> <span class="token keyword">BY</span> ShipperName<span class="token punctuation">;</span></span>
<span class="line"></span></code></pre></div><h2 id="in" tabindex="-1"><a class="header-anchor" href="#in"><span>IN</span></a></h2><blockquote><p><code>IN 语法</code> 运算符允许您在 WHERE 子句中指定多个值。运算符是多个 OR 条件的简写。</p><div class="language-sql" data-highlighter="prismjs" data-ext="sql" data-title="sql"><pre><code><span class="line"><span class="token keyword">SELECT</span> 列名称<span class="token punctuation">(</span>s<span class="token punctuation">)</span> <span class="token keyword">FROM</span> 表名称 <span class="token keyword">WHERE</span> 列名称 <span class="token operator">IN</span> <span class="token punctuation">(</span>值<span class="token number">1</span><span class="token punctuation">,</span> 值<span class="token number">2</span><span class="token punctuation">,</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">SELECT</span> 列名称<span class="token punctuation">(</span>s<span class="token punctuation">)</span> <span class="token keyword">FROM</span> 表名称 <span class="token keyword">WHERE</span> 列名称 <span class="token operator">IN</span> <span class="token punctuation">(</span><span class="token keyword">SELECT</span> STATEMENT<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre></div></blockquote><div class="language-sql" data-highlighter="prismjs" data-ext="sql" data-title="sql"><pre><code><span class="line"><span class="token comment">-- 从表 Persons 选取 字段 LastName 等于 Adams、Carter</span></span>
<span class="line"><span class="token keyword">SELECT</span> <span class="token operator">*</span> <span class="token keyword">FROM</span> Persons <span class="token keyword">WHERE</span> LastName <span class="token operator">IN</span> <span class="token punctuation">(</span><span class="token string">&#39;Adams&#39;</span><span class="token punctuation">,</span><span class="token string">&#39;Carter&#39;</span><span class="token punctuation">)</span></span>
<span class="line"><span class="token comment">-- 从表 Customers 选取 Country 值为 &#39;Germany&#39;, &#39;France&#39;, &#39;UK&#39; 的所有数据</span></span>
<span class="line"><span class="token keyword">SELECT</span> <span class="token operator">*</span> <span class="token keyword">FROM</span> Customers <span class="token keyword">WHERE</span> Country <span class="token operator">IN</span> <span class="token punctuation">(</span><span class="token string">&#39;Germany&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;France&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;UK&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token comment">-- 从表 Customers 选取 Country 值不为 &#39;Germany&#39;, &#39;France&#39;, &#39;UK&#39; 的所有数据</span></span>
<span class="line"><span class="token keyword">SELECT</span> <span class="token operator">*</span> <span class="token keyword">FROM</span> Customers <span class="token keyword">WHERE</span> Country <span class="token operator">NOT</span> <span class="token operator">IN</span> <span class="token punctuation">(</span><span class="token string">&#39;Germany&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;France&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;UK&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token comment">-- 从表 Customers 选取与 Suppliers 表 Country 字段相同的所有数据：</span></span>
<span class="line"><span class="token keyword">SELECT</span> <span class="token operator">*</span> <span class="token keyword">FROM</span> Customers <span class="token keyword">WHERE</span> Country <span class="token operator">IN</span> <span class="token punctuation">(</span><span class="token keyword">SELECT</span> Country <span class="token keyword">FROM</span> Suppliers<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre></div><h2 id="union" tabindex="-1"><a class="header-anchor" href="#union"><span>UNION</span></a></h2><blockquote><p><code>UNION 语法</code> 操作符用于合并两个或多个 SELECT 语句的结果集</p><div class="language-sql" data-highlighter="prismjs" data-ext="sql" data-title="sql"><pre><code><span class="line"><span class="token keyword">SELECT</span> 列名称<span class="token punctuation">(</span>s<span class="token punctuation">)</span> <span class="token keyword">FROM</span> 表名称<span class="token number">1</span></span>
<span class="line"><span class="token keyword">UNION</span></span>
<span class="line"><span class="token keyword">SELECT</span> 列名称<span class="token punctuation">(</span>s<span class="token punctuation">)</span> <span class="token keyword">FROM</span> 表名称<span class="token number">2</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre></div></blockquote><div class="language-sql" data-highlighter="prismjs" data-ext="sql" data-title="sql"><pre><code><span class="line"><span class="token comment">-- 列出所有在中国表（Employees_China）和美国（Employees_USA）的不同的雇员名</span></span>
<span class="line"><span class="token keyword">SELECT</span> E_Name <span class="token keyword">FROM</span> Employees_China <span class="token keyword">UNION</span> <span class="token keyword">SELECT</span> E_Name <span class="token keyword">FROM</span> Employees_USA</span>
<span class="line"><span class="token comment">-- 列出 meeting 表中的 pic_url，</span></span>
<span class="line"><span class="token comment">-- station 表中的 number_station 别名设置成 pic_url 避免字段不一样报错</span></span>
<span class="line"><span class="token comment">-- 按更新时间排序</span></span>
<span class="line"><span class="token keyword">SELECT</span> id<span class="token punctuation">,</span>pic_url <span class="token keyword">FROM</span> meeting <span class="token keyword">UNION</span> <span class="token keyword">ALL</span> <span class="token keyword">SELECT</span> id<span class="token punctuation">,</span>number_station <span class="token keyword">AS</span> pic_url <span class="token keyword">FROM</span> station  <span class="token keyword">ORDER</span> <span class="token keyword">BY</span> update_at<span class="token punctuation">;</span></span>
<span class="line"><span class="token comment">-- 通过 UNION 语法同时查询了 products 表 和 comments 表的总记录数，并且按照 count 排序</span></span>
<span class="line"><span class="token keyword">SELECT</span> <span class="token string">&#39;product&#39;</span> <span class="token keyword">AS</span> <span class="token keyword">type</span><span class="token punctuation">,</span> <span class="token function">count</span><span class="token punctuation">(</span><span class="token operator">*</span><span class="token punctuation">)</span> <span class="token keyword">as</span> count <span class="token keyword">FROM</span> <span class="token identifier"><span class="token punctuation">\`</span>products<span class="token punctuation">\`</span></span> <span class="token keyword">union</span> <span class="token keyword">select</span> <span class="token string">&#39;comment&#39;</span> <span class="token keyword">as</span> <span class="token keyword">type</span><span class="token punctuation">,</span> <span class="token function">count</span><span class="token punctuation">(</span><span class="token operator">*</span><span class="token punctuation">)</span> <span class="token keyword">as</span> count <span class="token keyword">FROM</span> <span class="token identifier"><span class="token punctuation">\`</span>comments<span class="token punctuation">\`</span></span> <span class="token keyword">order</span> <span class="token keyword">by</span> count<span class="token punctuation">;</span></span>
<span class="line"></span></code></pre></div><h2 id="between" tabindex="-1"><a class="header-anchor" href="#between"><span>BETWEEN</span></a></h2><blockquote><p><code>BETWEEN 语法</code> 运算符选择给定范围内的值</p><div class="language-sql" data-highlighter="prismjs" data-ext="sql" data-title="sql"><pre><code><span class="line"><span class="token keyword">SELECT</span> 列名称<span class="token punctuation">(</span>s<span class="token punctuation">)</span> <span class="token keyword">FROM</span> 表名称 <span class="token keyword">WHERE</span> 列名称 <span class="token operator">BETWEEN</span> 值<span class="token number">1</span> <span class="token operator">AND</span> 值<span class="token number">2</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre></div></blockquote><div class="language-sql" data-highlighter="prismjs" data-ext="sql" data-title="sql"><pre><code><span class="line"><span class="token comment">-- 选择 Products 表中 Price 字段在 10 到 20 之间的所有：</span></span>
<span class="line"><span class="token keyword">SELECT</span> <span class="token operator">*</span> <span class="token keyword">FROM</span> Products <span class="token keyword">WHERE</span> Price <span class="token operator">BETWEEN</span> <span class="token number">10</span> <span class="token operator">AND</span> <span class="token number">20</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre></div><h2 id="as" tabindex="-1"><a class="header-anchor" href="#as"><span>AS</span></a></h2><blockquote><p><code>AS 语法</code> 用于为表或表中的列(字段)提供临时名称(别名)。</p><div class="language-sql" data-highlighter="prismjs" data-ext="sql" data-title="sql"><pre><code><span class="line"><span class="token keyword">SELECT</span> 列名称 <span class="token keyword">AS</span> 别名 <span class="token keyword">FROM</span> 表名称<span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">SELECT</span> 列名称<span class="token punctuation">(</span>s<span class="token punctuation">)</span> <span class="token keyword">FROM</span> 表名称 <span class="token keyword">AS</span> 别名<span class="token punctuation">;</span></span>
<span class="line"></span></code></pre></div></blockquote><div class="language-sql line-numbers-mode" data-highlighter="prismjs" data-ext="sql" data-title="sql"><pre><code><span class="line"><span class="token comment">-- 创建两个别名，一个用于 CustomerID 的 ID 别名列，一个用于 CustomerName  的 Customer 别名列：</span></span>
<span class="line"><span class="token keyword">SELECT</span> CustomerID <span class="token keyword">AS</span> ID<span class="token punctuation">,</span> CustomerName <span class="token keyword">AS</span> Customer <span class="token keyword">FROM</span> Customers<span class="token punctuation">;</span></span>
<span class="line"><span class="token comment">-- 这句意思是查找所有 Employee 表里面的数据，并把 Employee 表格命名为 emp。</span></span>
<span class="line"><span class="token comment">-- 当你命名一个表之后，你可以在下面用 emp 代替 Employee.</span></span>
<span class="line"><span class="token comment">-- 例如 SELECT * FROM emp.</span></span>
<span class="line"><span class="token keyword">SELECT</span> <span class="token operator">*</span> <span class="token keyword">FROM</span> Employee <span class="token keyword">AS</span> emp</span>
<span class="line"><span class="token comment">-- 列出表 Orders 字段 OrderPrice 列最大值，</span></span>
<span class="line"><span class="token comment">-- 结果集列不显示 OrderPrice 显示 LargestOrderPrice</span></span>
<span class="line"><span class="token keyword">SELECT</span> <span class="token function">MAX</span><span class="token punctuation">(</span>OrderPrice<span class="token punctuation">)</span> <span class="token keyword">AS</span> LargestOrderPrice <span class="token keyword">FROM</span> Orders</span>
<span class="line"><span class="token comment">-- 显示表 users_profile 中的 name 列</span></span>
<span class="line"><span class="token keyword">SELECT</span> t<span class="token punctuation">.</span>name <span class="token keyword">from</span> <span class="token punctuation">(</span><span class="token keyword">SELECT</span> <span class="token operator">*</span> <span class="token keyword">from</span> users_profile a<span class="token punctuation">)</span> <span class="token keyword">AS</span> t<span class="token punctuation">;</span></span>
<span class="line"><span class="token comment">-- 表 user_accounts 命名别名 ua，表 users_profile 命名别名 up</span></span>
<span class="line"><span class="token comment">-- 满足条件 表 user_accounts 字段 id 等于 表 users_profile 字段 user_id</span></span>
<span class="line"><span class="token comment">-- 结果集只显示mobile、name两列</span></span>
<span class="line"><span class="token keyword">SELECT</span> ua<span class="token punctuation">.</span>mobile<span class="token punctuation">,</span>up<span class="token punctuation">.</span>name <span class="token keyword">FROM</span> user_accounts <span class="token keyword">as</span> ua <span class="token keyword">INNER</span> <span class="token keyword">JOIN</span> users_profile <span class="token keyword">as</span> up <span class="token keyword">ON</span> ua<span class="token punctuation">.</span>id <span class="token operator">=</span> up<span class="token punctuation">.</span>user_id<span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="join" tabindex="-1"><a class="header-anchor" href="#join"><span>JOIN</span></a></h2><p>JOIN 子句用于根据两个或多个表之间的相关列组合来自两个或多个表的行。</p><ul><li><code>JOIN</code>: 如果表中有至少一个匹配，则返回行</li><li><code>INNER JOIN</code>:在表中存在至少一个匹配时，INNER JOIN 关键字返回行。</li><li><code>LEFT JOIN</code>: 即使右表中没有匹配，也从左表返回所有的行</li><li><code>RIGHT JOIN</code>: 即使左表中没有匹配，也从右表返回所有的行</li><li><code>FULL JOIN</code>: 只要其中一个表中存在匹配，就返回行(MySQL 是不支持的，通过 <code>LEFT JOIN + UNION + RIGHT JOIN</code> 的方式 来实现)</li></ul><h3 id="inner-join" tabindex="-1"><a class="header-anchor" href="#inner-join"><span>INNER JOIN</span></a></h3><blockquote><p><code>INNER JOIN 语法</code> 选择在两个表中具有匹配值的记录。</p><div class="language-sql" data-highlighter="prismjs" data-ext="sql" data-title="sql"><pre><code><span class="line"><span class="token keyword">SELECT</span> 列名称<span class="token punctuation">(</span>s<span class="token punctuation">)</span></span>
<span class="line"><span class="token keyword">FROM</span> 表<span class="token number">1</span></span>
<span class="line"><span class="token keyword">INNER</span> <span class="token keyword">JOIN</span> 表<span class="token number">2</span></span>
<span class="line"><span class="token keyword">ON</span> 表<span class="token number">1.</span>列名称 <span class="token operator">=</span> 表<span class="token number">2.</span>列名称<span class="token punctuation">;</span></span>
<span class="line"></span></code></pre></div></blockquote><div class="language-sql" data-highlighter="prismjs" data-ext="sql" data-title="sql"><pre><code><span class="line"><span class="token comment">-- 选择包含 Customers 的所有 Orders：</span></span>
<span class="line"><span class="token keyword">SELECT</span> Orders<span class="token punctuation">.</span>OrderID<span class="token punctuation">,</span> Customers<span class="token punctuation">.</span>CustomerName <span class="token keyword">FROM</span> Orders <span class="token keyword">INNER</span> <span class="token keyword">JOIN</span> Customers <span class="token keyword">ON</span> Orders<span class="token punctuation">.</span>CustomerID <span class="token operator">=</span> Customers<span class="token punctuation">.</span>CustomerID<span class="token punctuation">;</span></span>
<span class="line"><span class="token comment">-- [JOIN 三张表] 选择包含 Customers 和 Shippers 的所有 Orders：</span></span>
<span class="line"><span class="token keyword">SELECT</span> Orders<span class="token punctuation">.</span>OrderID<span class="token punctuation">,</span> Customers<span class="token punctuation">.</span>CustomerName<span class="token punctuation">,</span> Shippers<span class="token punctuation">.</span>ShipperName</span>
<span class="line"><span class="token keyword">FROM</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>Orders</span>
<span class="line"><span class="token keyword">INNER</span> <span class="token keyword">JOIN</span> Customers <span class="token keyword">ON</span> Orders<span class="token punctuation">.</span>CustomerID <span class="token operator">=</span> Customers<span class="token punctuation">.</span>CustomerID<span class="token punctuation">)</span></span>
<span class="line"><span class="token keyword">INNER</span> <span class="token keyword">JOIN</span> Shippers <span class="token keyword">ON</span> Orders<span class="token punctuation">.</span>ShipperID <span class="token operator">=</span> Shippers<span class="token punctuation">.</span>ShipperID<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre></div><h3 id="left-join" tabindex="-1"><a class="header-anchor" href="#left-join"><span>LEFT JOIN</span></a></h3><blockquote><p><code>LEFT JOIN 语法</code> 返回左表 (表1) 中的所有记录，以及右表 (表2) 中的匹配记录</p><div class="language-sql" data-highlighter="prismjs" data-ext="sql" data-title="sql"><pre><code><span class="line"><span class="token keyword">SELECT</span> 列名称<span class="token punctuation">(</span>s<span class="token punctuation">)</span></span>
<span class="line"><span class="token keyword">FROM</span> 表<span class="token number">1</span></span>
<span class="line"><span class="token keyword">LEFT</span> <span class="token keyword">JOIN</span> 表<span class="token number">2</span></span>
<span class="line"><span class="token keyword">ON</span> 表<span class="token number">1.</span>列名称 <span class="token operator">=</span> 表<span class="token number">2.</span>列名称<span class="token punctuation">;</span></span>
<span class="line"></span></code></pre></div></blockquote><div class="language-sql" data-highlighter="prismjs" data-ext="sql" data-title="sql"><pre><code><span class="line"><span class="token comment">-- 将选择所有 Customers 以及他们可能拥有的任何 Orders：</span></span>
<span class="line"><span class="token keyword">SELECT</span> Customers<span class="token punctuation">.</span>CustomerName<span class="token punctuation">,</span> Orders<span class="token punctuation">.</span>OrderID <span class="token keyword">FROM</span> Customers</span>
<span class="line"><span class="token keyword">LEFT</span> <span class="token keyword">JOIN</span> Orders <span class="token keyword">ON</span> Customers<span class="token punctuation">.</span>CustomerID <span class="token operator">=</span> Orders<span class="token punctuation">.</span>CustomerID</span>
<span class="line"><span class="token keyword">ORDER</span> <span class="token keyword">BY</span> Customers<span class="token punctuation">.</span>CustomerName<span class="token punctuation">;</span></span>
<span class="line"></span></code></pre></div><h3 id="right-join" tabindex="-1"><a class="header-anchor" href="#right-join"><span>RIGHT JOIN</span></a></h3><blockquote><p><code>RIGHT JOIN 语法</code> 返回右表 (表2) 中的所有记录，以及左表 (表1) 中的匹配记录</p><div class="language-sql" data-highlighter="prismjs" data-ext="sql" data-title="sql"><pre><code><span class="line"><span class="token keyword">SELECT</span> 列名称<span class="token punctuation">(</span>s<span class="token punctuation">)</span></span>
<span class="line"><span class="token keyword">FROM</span> 表<span class="token number">1</span></span>
<span class="line"><span class="token keyword">RIGHT</span> <span class="token keyword">JOIN</span> 表<span class="token number">2</span></span>
<span class="line"><span class="token keyword">ON</span> 表<span class="token number">1.</span>列名称 <span class="token operator">=</span> 表<span class="token number">2.</span>列名称<span class="token punctuation">;</span></span>
<span class="line"></span></code></pre></div></blockquote><div class="language-sql" data-highlighter="prismjs" data-ext="sql" data-title="sql"><pre><code><span class="line"><span class="token comment">-- 返回所有 Employees 以及他们可能下的任何 Orders：</span></span>
<span class="line"><span class="token keyword">SELECT</span> Orders<span class="token punctuation">.</span>OrderID<span class="token punctuation">,</span> Employees<span class="token punctuation">.</span>LastName<span class="token punctuation">,</span> Employees<span class="token punctuation">.</span>FirstName <span class="token keyword">FROM</span> Orders</span>
<span class="line"><span class="token keyword">RIGHT</span> <span class="token keyword">JOIN</span> Employees <span class="token keyword">ON</span> Orders<span class="token punctuation">.</span>EmployeeID <span class="token operator">=</span> Employees<span class="token punctuation">.</span>EmployeeID</span>
<span class="line"><span class="token keyword">ORDER</span> <span class="token keyword">BY</span> Orders<span class="token punctuation">.</span>OrderID<span class="token punctuation">;</span></span>
<span class="line"></span></code></pre></div><h3 id="full-outer-join" tabindex="-1"><a class="header-anchor" href="#full-outer-join"><span>FULL OUTER JOIN</span></a></h3><blockquote><p><code>FULL OUTER JOIN 语法</code> 当左（表1）或右（表2）表记录中存在匹配时，关键字返回所有记录</p><div class="language-sql" data-highlighter="prismjs" data-ext="sql" data-title="sql"><pre><code><span class="line"><span class="token keyword">SELECT</span> 列名称<span class="token punctuation">(</span>s<span class="token punctuation">)</span></span>
<span class="line"><span class="token keyword">FROM</span> 表<span class="token number">1</span></span>
<span class="line"><span class="token keyword">FULL</span> <span class="token keyword">OUTER</span> <span class="token keyword">JOIN</span> 表<span class="token number">2</span></span>
<span class="line"><span class="token keyword">ON</span> 表<span class="token number">1.</span>列名称 <span class="token operator">=</span> 表<span class="token number">2.</span>列名称</span>
<span class="line"><span class="token keyword">WHERE</span> 条件<span class="token punctuation">;</span></span>
<span class="line"></span></code></pre></div></blockquote><h2 id="sql-函数" tabindex="-1"><a class="header-anchor" href="#sql-函数"><span>SQL 函数</span></a></h2><h3 id="count" tabindex="-1"><a class="header-anchor" href="#count"><span>COUNT</span></a></h3><blockquote><p><code>COUNT 语法</code> 返回与指定条件匹配的行数</p><div class="language-sql" data-highlighter="prismjs" data-ext="sql" data-title="sql"><pre><code><span class="line"><span class="token keyword">SELECT</span> <span class="token function">COUNT</span><span class="token punctuation">(</span>列名称<span class="token punctuation">)</span> <span class="token keyword">FROM</span> 表名称 <span class="token keyword">WHERE</span> 条件<span class="token punctuation">;</span></span>
<span class="line"></span></code></pre></div></blockquote><div class="language-sql" data-highlighter="prismjs" data-ext="sql" data-title="sql"><pre><code><span class="line"><span class="token comment">-- 表 Store_Information 有几笔 store_name 栏不是空白的资料。</span></span>
<span class="line"><span class="token comment">-- &quot;IS NOT NULL&quot; 是 &quot;这个栏位不是空白&quot; 的意思。</span></span>
<span class="line"><span class="token keyword">SELECT</span> <span class="token function">COUNT</span> <span class="token punctuation">(</span>Store_Name<span class="token punctuation">)</span> <span class="token keyword">FROM</span> Store_Information <span class="token keyword">WHERE</span> Store_Name <span class="token operator">IS</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span><span class="token punctuation">;</span> </span>
<span class="line"><span class="token comment">-- 获取 Persons 表的总数</span></span>
<span class="line"><span class="token keyword">SELECT</span> <span class="token function">COUNT</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token keyword">AS</span> totals <span class="token keyword">FROM</span> Persons<span class="token punctuation">;</span></span>
<span class="line"><span class="token comment">-- 获取表 station 字段 user_id 相同的总数</span></span>
<span class="line"><span class="token keyword">select</span> user_id<span class="token punctuation">,</span> <span class="token function">count</span><span class="token punctuation">(</span><span class="token operator">*</span><span class="token punctuation">)</span> <span class="token keyword">as</span> totals <span class="token keyword">from</span> station <span class="token keyword">group</span> <span class="token keyword">by</span> user_id<span class="token punctuation">;</span></span>
<span class="line"></span></code></pre></div><h3 id="avg" tabindex="-1"><a class="header-anchor" href="#avg"><span>AVG</span></a></h3><blockquote><p><code>AVG 语法</code> 返回数值列的平均值</p><div class="language-sql" data-highlighter="prismjs" data-ext="sql" data-title="sql"><pre><code><span class="line"><span class="token keyword">SELECT</span> <span class="token function">AVG</span><span class="token punctuation">(</span>列名称<span class="token punctuation">)</span> <span class="token keyword">FROM</span> 表名称 <span class="token keyword">WHERE</span> 条件<span class="token punctuation">;</span></span>
<span class="line"></span></code></pre></div></blockquote><div class="language-sql" data-highlighter="prismjs" data-ext="sql" data-title="sql"><pre><code><span class="line"><span class="token comment">-- 查找 Products 表中所的 Price 平均值：</span></span>
<span class="line"><span class="token keyword">SELECT</span> <span class="token function">AVG</span><span class="token punctuation">(</span>Price<span class="token punctuation">)</span> <span class="token keyword">FROM</span> Products<span class="token punctuation">;</span></span>
<span class="line"></span></code></pre></div><h3 id="sum" tabindex="-1"><a class="header-anchor" href="#sum"><span>SUM</span></a></h3><blockquote><p><code>SUM 语法</code> 返回数值列的总和</p><div class="language-sql" data-highlighter="prismjs" data-ext="sql" data-title="sql"><pre><code><span class="line"><span class="token keyword">SELECT</span> <span class="token function">SUM</span><span class="token punctuation">(</span>列名称<span class="token punctuation">)</span> <span class="token keyword">FROM</span> 表名称 <span class="token keyword">WHERE</span> 条件<span class="token punctuation">;</span></span>
<span class="line"></span></code></pre></div></blockquote><div class="language-sql" data-highlighter="prismjs" data-ext="sql" data-title="sql"><pre><code><span class="line"><span class="token comment">-- 查找 OrderDetails 表中 Quantity 字段的总和：</span></span>
<span class="line"><span class="token keyword">SELECT</span> <span class="token function">SUM</span><span class="token punctuation">(</span>Quantity<span class="token punctuation">)</span> <span class="token keyword">FROM</span> OrderDetails<span class="token punctuation">;</span></span>
<span class="line"></span></code></pre></div><h3 id="max" tabindex="-1"><a class="header-anchor" href="#max"><span>MAX</span></a></h3><blockquote><p><code>MAX 语法</code> 返回所选列的最大值</p><div class="language-sql" data-highlighter="prismjs" data-ext="sql" data-title="sql"><pre><code><span class="line"><span class="token keyword">SELECT</span> <span class="token function">MIN</span><span class="token punctuation">(</span>列名称<span class="token punctuation">)</span> <span class="token keyword">FROM</span> 表名称 <span class="token keyword">WHERE</span> 条件<span class="token punctuation">;</span></span>
<span class="line"></span></code></pre></div></blockquote><div class="language-sql" data-highlighter="prismjs" data-ext="sql" data-title="sql"><pre><code><span class="line"><span class="token comment">-- 列出表 Orders 字段 OrderPrice 列最大值，</span></span>
<span class="line"><span class="token comment">-- 结果集列不显示 OrderPrice 显示 LargestOrderPrice</span></span>
<span class="line"><span class="token keyword">SELECT</span> <span class="token function">MAX</span><span class="token punctuation">(</span>OrderPrice<span class="token punctuation">)</span> <span class="token keyword">AS</span> LargestOrderPrice <span class="token keyword">FROM</span> Orders</span>
<span class="line"></span></code></pre></div><h3 id="min" tabindex="-1"><a class="header-anchor" href="#min"><span>MIN</span></a></h3><blockquote><p><code>MIN 语法</code> 返回所选列的最小值</p><div class="language-sql" data-highlighter="prismjs" data-ext="sql" data-title="sql"><pre><code><span class="line"><span class="token keyword">SELECT</span> <span class="token function">MIN</span><span class="token punctuation">(</span>列名称<span class="token punctuation">)</span> <span class="token keyword">FROM</span> 表名称 <span class="token keyword">WHERE</span> 条件<span class="token punctuation">;</span></span>
<span class="line"></span></code></pre></div></blockquote><div class="language-sql" data-highlighter="prismjs" data-ext="sql" data-title="sql"><pre><code><span class="line"><span class="token comment">-- 查找 Products 表中 Price 字段最小值，并命名 SmallestPrice 别名：</span></span>
<span class="line"><span class="token keyword">SELECT</span> <span class="token function">MIN</span><span class="token punctuation">(</span>Price<span class="token punctuation">)</span> <span class="token keyword">AS</span> SmallestPrice <span class="token keyword">FROM</span> Products<span class="token punctuation">;</span></span>
<span class="line"></span></code></pre></div><h2 id="触发器" tabindex="-1"><a class="header-anchor" href="#触发器"><span>触发器</span></a></h2><blockquote><p>语法：</p><div class="language-sql" data-highlighter="prismjs" data-ext="sql" data-title="sql"><pre><code><span class="line"><span class="token keyword">create</span> <span class="token keyword">trigger</span> <span class="token operator">&lt;</span>触发器名称<span class="token operator">&gt;</span>  </span>
<span class="line">{ before <span class="token operator">|</span> <span class="token keyword">after</span>}         <span class="token comment">-- 之前或者之后出发  </span></span>
<span class="line"><span class="token keyword">insert</span> <span class="token operator">|</span> <span class="token keyword">update</span> <span class="token operator">|</span> <span class="token keyword">delete</span>  <span class="token comment">-- 指明了激活触发程序的语句的类型  </span></span>
<span class="line"><span class="token keyword">on</span> <span class="token operator">&lt;</span>表名<span class="token operator">&gt;</span>                  <span class="token comment">-- 操作哪张表  </span></span>
<span class="line"><span class="token keyword">for each row</span>              <span class="token comment">-- 触发器的执行间隔，for each row 通知触发器每隔一行执行一次动作，而不是对整个表执行一次。  </span></span>
<span class="line"><span class="token operator">&lt;</span>触发器<span class="token keyword">SQL</span>语句<span class="token operator">&gt;</span></span>
<span class="line"></span></code></pre></div></blockquote><div class="language-sql" data-highlighter="prismjs" data-ext="sql" data-title="sql"><pre><code><span class="line"><span class="token keyword">delimiter</span> $</span>
<span class="line"><span class="token keyword">CREATE</span> <span class="token keyword">TRIGGER</span> set_userdate BEFORE <span class="token keyword">INSERT</span> </span>
<span class="line"><span class="token keyword">on</span> <span class="token identifier"><span class="token punctuation">\`</span>message<span class="token punctuation">\`</span></span></span>
<span class="line"><span class="token keyword">for EACH ROW</span></span>
<span class="line"><span class="token keyword">BEGIN</span></span>
<span class="line">  <span class="token keyword">set</span> <span class="token variable">@statu</span> <span class="token operator">=</span> new<span class="token punctuation">.</span><span class="token keyword">status</span><span class="token punctuation">;</span> <span class="token comment">-- 声明复制变量 statu</span></span>
<span class="line">  <span class="token keyword">if</span> <span class="token variable">@statu</span> <span class="token operator">=</span> <span class="token number">0</span> <span class="token keyword">then</span>       <span class="token comment">-- 判断 statu 是否等于 0</span></span>
<span class="line">    <span class="token keyword">UPDATE</span> <span class="token identifier"><span class="token punctuation">\`</span>user_accounts<span class="token punctuation">\`</span></span> <span class="token keyword">SET</span> <span class="token keyword">status</span><span class="token operator">=</span><span class="token number">1</span> <span class="token keyword">WHERE</span> openid<span class="token operator">=</span>NEW<span class="token punctuation">.</span>openid<span class="token punctuation">;</span></span>
<span class="line">  <span class="token keyword">end</span> <span class="token keyword">if</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">END</span></span>
<span class="line">$</span>
<span class="line"><span class="token keyword">DELIMITER</span> <span class="token punctuation">;</span> <span class="token comment">-- 恢复结束符号</span></span>
<span class="line"></span></code></pre></div><p>OLD和NEW不区分大小写</p><ul><li>NEW 用NEW.col_name，没有旧行。在DELETE触发程序中，仅能使用OLD.col_name，没有新行。</li><li>OLD 用OLD.col_name来引用更新前的某一行的列</li></ul><h2 id="添加索引" tabindex="-1"><a class="header-anchor" href="#添加索引"><span>添加索引</span></a></h2><h3 id="普通索引-index" tabindex="-1"><a class="header-anchor" href="#普通索引-index"><span>普通索引(INDEX)</span></a></h3><blockquote><p>语法：ALTER TABLE <code>表名字</code> ADD INDEX 索引名字 ( <code>字段名字</code> )</p></blockquote><div class="language-sql line-numbers-mode" data-highlighter="prismjs" data-ext="sql" data-title="sql"><pre><code><span class="line"><span class="token comment">-- –直接创建索引</span></span>
<span class="line"><span class="token keyword">CREATE</span> <span class="token keyword">INDEX</span> index_user <span class="token keyword">ON</span> <span class="token keyword">user</span><span class="token punctuation">(</span>title<span class="token punctuation">)</span></span>
<span class="line"><span class="token comment">-- –修改表结构的方式添加索引</span></span>
<span class="line"><span class="token keyword">ALTER</span> <span class="token keyword">TABLE</span> table_name <span class="token keyword">ADD</span> <span class="token keyword">INDEX</span> index_name <span class="token keyword">ON</span> <span class="token punctuation">(</span><span class="token keyword">column</span><span class="token punctuation">(</span>length<span class="token punctuation">)</span><span class="token punctuation">)</span></span>
<span class="line"><span class="token comment">-- 给 user 表中的 name 字段 添加普通索引(INDEX)</span></span>
<span class="line"><span class="token keyword">ALTER</span> <span class="token keyword">TABLE</span> <span class="token identifier"><span class="token punctuation">\`</span>user<span class="token punctuation">\`</span></span> <span class="token keyword">ADD</span> <span class="token keyword">INDEX</span> index_name <span class="token punctuation">(</span>name<span class="token punctuation">)</span></span>
<span class="line"><span class="token comment">-- –创建表的时候同时创建索引</span></span>
<span class="line"><span class="token keyword">CREATE</span> <span class="token keyword">TABLE</span> <span class="token identifier"><span class="token punctuation">\`</span>user<span class="token punctuation">\`</span></span> <span class="token punctuation">(</span></span>
<span class="line">    <span class="token identifier"><span class="token punctuation">\`</span>id<span class="token punctuation">\`</span></span> <span class="token keyword">int</span><span class="token punctuation">(</span><span class="token number">11</span><span class="token punctuation">)</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span> <span class="token keyword">AUTO_INCREMENT</span> <span class="token punctuation">,</span></span>
<span class="line">    <span class="token identifier"><span class="token punctuation">\`</span>title<span class="token punctuation">\`</span></span> <span class="token keyword">char</span><span class="token punctuation">(</span><span class="token number">255</span><span class="token punctuation">)</span> <span class="token keyword">CHARACTER</span> <span class="token keyword">SET</span> utf8 <span class="token keyword">COLLATE</span> utf8_general_ci <span class="token operator">NOT</span> <span class="token boolean">NULL</span> <span class="token punctuation">,</span></span>
<span class="line">    <span class="token identifier"><span class="token punctuation">\`</span>content<span class="token punctuation">\`</span></span> <span class="token keyword">text</span> <span class="token keyword">CHARACTER</span> <span class="token keyword">SET</span> utf8 <span class="token keyword">COLLATE</span> utf8_general_ci <span class="token boolean">NULL</span> <span class="token punctuation">,</span></span>
<span class="line">    <span class="token identifier"><span class="token punctuation">\`</span>time<span class="token punctuation">\`</span></span> <span class="token keyword">int</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span> <span class="token boolean">NULL</span> <span class="token keyword">DEFAULT</span> <span class="token boolean">NULL</span> <span class="token punctuation">,</span></span>
<span class="line">    <span class="token keyword">PRIMARY</span> <span class="token keyword">KEY</span> <span class="token punctuation">(</span><span class="token identifier"><span class="token punctuation">\`</span>id<span class="token punctuation">\`</span></span><span class="token punctuation">)</span><span class="token punctuation">,</span></span>
<span class="line">    <span class="token keyword">INDEX</span> index_name <span class="token punctuation">(</span>title<span class="token punctuation">(</span>length<span class="token punctuation">)</span><span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">)</span></span>
<span class="line"><span class="token comment">-- –删除索引</span></span>
<span class="line"><span class="token keyword">DROP</span> <span class="token keyword">INDEX</span> index_name <span class="token keyword">ON</span> <span class="token keyword">table</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="主键索引-primary-key" tabindex="-1"><a class="header-anchor" href="#主键索引-primary-key"><span>主键索引(PRIMARY key)</span></a></h3><blockquote><p>语法：ALTER TABLE <code>表名字</code> ADD PRIMARY KEY ( <code>字段名字</code> )</p></blockquote><div class="language-sql" data-highlighter="prismjs" data-ext="sql" data-title="sql"><pre><code><span class="line"><span class="token comment">-- 给 user 表中的 id字段 添加主键索引(PRIMARY key)</span></span>
<span class="line"><span class="token keyword">ALTER</span> <span class="token keyword">TABLE</span> <span class="token identifier"><span class="token punctuation">\`</span>user<span class="token punctuation">\`</span></span> <span class="token keyword">ADD</span> <span class="token keyword">PRIMARY</span> <span class="token keyword">key</span> <span class="token punctuation">(</span>id<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre></div><h3 id="唯一索引-unique" tabindex="-1"><a class="header-anchor" href="#唯一索引-unique"><span>唯一索引(UNIQUE)</span></a></h3><blockquote><p>语法：ALTER TABLE <code>表名字</code> ADD UNIQUE (<code>字段名字</code>)</p></blockquote><div class="language-sql" data-highlighter="prismjs" data-ext="sql" data-title="sql"><pre><code><span class="line"><span class="token comment">-- 给 user 表中的 creattime 字段添加唯一索引(UNIQUE)</span></span>
<span class="line"><span class="token keyword">ALTER</span> <span class="token keyword">TABLE</span> <span class="token identifier"><span class="token punctuation">\`</span>user<span class="token punctuation">\`</span></span> <span class="token keyword">ADD</span> <span class="token keyword">UNIQUE</span> <span class="token punctuation">(</span>creattime<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre></div><h3 id="全文索引-fulltext" tabindex="-1"><a class="header-anchor" href="#全文索引-fulltext"><span>全文索引(FULLTEXT)</span></a></h3><blockquote><p>语法：ALTER TABLE <code>表名字</code> ADD FULLTEXT (<code>字段名字</code>)</p></blockquote><div class="language-sql" data-highlighter="prismjs" data-ext="sql" data-title="sql"><pre><code><span class="line"><span class="token comment">-- 给 user 表中的 description 字段添加全文索引(FULLTEXT)</span></span>
<span class="line"><span class="token keyword">ALTER</span> <span class="token keyword">TABLE</span> <span class="token identifier"><span class="token punctuation">\`</span>user<span class="token punctuation">\`</span></span> <span class="token keyword">ADD</span> FULLTEXT <span class="token punctuation">(</span>description<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre></div><h3 id="添加多列索引" tabindex="-1"><a class="header-anchor" href="#添加多列索引"><span>添加多列索引</span></a></h3><blockquote><p>语法： ALTER TABLE <code>table_name</code> ADD INDEX index_name ( <code>column1</code>, <code>column2</code>, <code>column3</code>)</p></blockquote><div class="language-sql" data-highlighter="prismjs" data-ext="sql" data-title="sql"><pre><code><span class="line"><span class="token comment">-- 给 user 表中的 name、city、age 字段添加名字为name_city_age的普通索引(INDEX)</span></span>
<span class="line"><span class="token keyword">ALTER</span> <span class="token keyword">TABLE</span> <span class="token keyword">user</span> <span class="token keyword">ADD</span> <span class="token keyword">INDEX</span> name_city_age <span class="token punctuation">(</span>name<span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">,</span>city<span class="token punctuation">,</span>age<span class="token punctuation">)</span><span class="token punctuation">;</span> </span>
<span class="line"></span></code></pre></div><h3 id="建立索引的时机" tabindex="-1"><a class="header-anchor" href="#建立索引的时机"><span>建立索引的时机</span></a></h3><p>在<code>WHERE</code>和<code>JOIN</code>中出现的列需要建立索引，但也不完全如此：</p><ul><li>MySQL只对<code>&lt;</code>，<code>&lt;=</code>，<code>=</code>，<code>&gt;</code>，<code>&gt;=</code>，<code>BETWEEN</code>，<code>IN</code>使用索引</li><li>某些时候的<code>LIKE</code>也会使用索引。</li><li>在<code>LIKE</code>以通配符%和_开头作查询时，MySQL不会使用索引。</li></ul><div class="language-sql" data-highlighter="prismjs" data-ext="sql" data-title="sql"><pre><code><span class="line"><span class="token comment">-- 此时就需要对city和age建立索引，</span></span>
<span class="line"><span class="token comment">-- 由于mytable表的userame也出现在了JOIN子句中，也有对它建立索引的必要。</span></span>
<span class="line"><span class="token keyword">SELECT</span> t<span class="token punctuation">.</span>Name  </span>
<span class="line"><span class="token keyword">FROM</span> mytable t <span class="token keyword">LEFT</span> <span class="token keyword">JOIN</span> mytable m <span class="token keyword">ON</span> t<span class="token punctuation">.</span>Name<span class="token operator">=</span>m<span class="token punctuation">.</span>username </span>
<span class="line"><span class="token keyword">WHERE</span> m<span class="token punctuation">.</span>age<span class="token operator">=</span><span class="token number">20</span> <span class="token operator">AND</span> m<span class="token punctuation">.</span>city<span class="token operator">=</span><span class="token string">&#39;上海&#39;</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">SELECT</span> <span class="token operator">*</span> <span class="token keyword">FROM</span> mytable <span class="token keyword">WHERE</span> username <span class="token operator">like</span><span class="token string">&#39;admin%&#39;</span><span class="token punctuation">;</span> <span class="token comment">-- 而下句就不会使用：</span></span>
<span class="line"><span class="token keyword">SELECT</span> <span class="token operator">*</span> <span class="token keyword">FROM</span> mytable <span class="token keyword">WHERE</span> Name <span class="token operator">like</span><span class="token string">&#39;%admin&#39;</span><span class="token punctuation">;</span> <span class="token comment">-- 因此，在使用LIKE时应注意以上的区别。</span></span>
<span class="line"></span></code></pre></div><p>索引的注意事项</p><ul><li>索引不会包含有NULL值的列</li><li>使用短索引</li><li>不要在列上进行运算 索引会失效</li></ul><h2 id="创建后表的修改" tabindex="-1"><a class="header-anchor" href="#创建后表的修改"><span>创建后表的修改</span></a></h2><h3 id="添加列" tabindex="-1"><a class="header-anchor" href="#添加列"><span>添加列</span></a></h3><blockquote><p>语法：<code>alter table 表名 add 列名 列数据类型 [after 插入位置];</code> 示例:</p></blockquote><div class="language-sql" data-highlighter="prismjs" data-ext="sql" data-title="sql"><pre><code><span class="line"><span class="token comment">-- 在表students的最后追加列 address: </span></span>
<span class="line"><span class="token keyword">alter</span> <span class="token keyword">table</span> students <span class="token keyword">add</span> address <span class="token keyword">char</span><span class="token punctuation">(</span><span class="token number">60</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token comment">-- 在名为 age 的列后插入列 birthday: </span></span>
<span class="line"><span class="token keyword">alter</span> <span class="token keyword">table</span> students <span class="token keyword">add</span> birthday <span class="token keyword">date</span> <span class="token keyword">after</span> age<span class="token punctuation">;</span></span>
<span class="line"><span class="token comment">-- 在名为 number_people 的列后插入列 weeks: </span></span>
<span class="line"><span class="token keyword">alter</span> <span class="token keyword">table</span> students <span class="token keyword">add</span> <span class="token keyword">column</span> <span class="token identifier"><span class="token punctuation">\`</span>weeks<span class="token punctuation">\`</span></span> <span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span> <span class="token operator">not</span> <span class="token boolean">null</span> <span class="token keyword">default</span> <span class="token string">&quot;&quot;</span> <span class="token keyword">after</span> <span class="token identifier"><span class="token punctuation">\`</span>number_people<span class="token punctuation">\`</span></span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre></div><h3 id="修改列" tabindex="-1"><a class="header-anchor" href="#修改列"><span>修改列</span></a></h3><blockquote><p>语法：<code>alter table 表名 change 列名称 列新名称 新数据类型;</code></p></blockquote><div class="language-sql" data-highlighter="prismjs" data-ext="sql" data-title="sql"><pre><code><span class="line"><span class="token comment">-- 将表 tel 列改名为 telphone: </span></span>
<span class="line"><span class="token keyword">alter</span> <span class="token keyword">table</span> students change tel telphone <span class="token keyword">char</span><span class="token punctuation">(</span><span class="token number">13</span><span class="token punctuation">)</span> <span class="token keyword">default</span> <span class="token string">&quot;-&quot;</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token comment">-- 将 name 列的数据类型改为 char(16): </span></span>
<span class="line"><span class="token keyword">alter</span> <span class="token keyword">table</span> students change name name <span class="token keyword">char</span><span class="token punctuation">(</span><span class="token number">16</span><span class="token punctuation">)</span> <span class="token operator">not</span> <span class="token boolean">null</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token comment">-- 修改 COMMENT 前面必须得有类型属性</span></span>
<span class="line"><span class="token keyword">alter</span> <span class="token keyword">table</span> students change name name <span class="token keyword">char</span><span class="token punctuation">(</span><span class="token number">16</span><span class="token punctuation">)</span> <span class="token keyword">COMMENT</span> <span class="token string">&#39;这里是名字&#39;</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token comment">-- 修改列属性的时候 建议使用modify,不需要重建表</span></span>
<span class="line"><span class="token comment">-- change用于修改列名字，这个需要重建表</span></span>
<span class="line"><span class="token keyword">alter</span> <span class="token keyword">table</span> meeting <span class="token keyword">modify</span> <span class="token identifier"><span class="token punctuation">\`</span>weeks<span class="token punctuation">\`</span></span> <span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">)</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span> <span class="token keyword">DEFAULT</span> <span class="token string">&#39;&#39;</span> <span class="token keyword">COMMENT</span> <span class="token string">&#39;开放日期 周一到周日：0~6，间隔用英文逗号隔开&#39;</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token comment">-- \`user\`表的\`id\`列，修改成字符串类型长度50，不能为空，\`FIRST\`放在第一列的位置</span></span>
<span class="line"><span class="token keyword">alter</span> <span class="token keyword">table</span> <span class="token identifier"><span class="token punctuation">\`</span>user<span class="token punctuation">\`</span></span> <span class="token keyword">modify</span> <span class="token keyword">COLUMN</span> <span class="token identifier"><span class="token punctuation">\`</span>id<span class="token punctuation">\`</span></span> <span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">50</span><span class="token punctuation">)</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span> <span class="token keyword">FIRST</span> <span class="token punctuation">;</span></span>
<span class="line"></span></code></pre></div><h3 id="删除列" tabindex="-1"><a class="header-anchor" href="#删除列"><span>删除列</span></a></h3><blockquote><p>语法：<code>alter table 表名 drop 列名称;</code></p></blockquote><div class="language-sql" data-highlighter="prismjs" data-ext="sql" data-title="sql"><pre><code><span class="line"><span class="token comment">-- 删除表students中的 birthday 列: </span></span>
<span class="line"><span class="token keyword">alter</span> <span class="token keyword">table</span> students <span class="token keyword">drop</span> birthday<span class="token punctuation">;</span></span>
<span class="line"></span></code></pre></div><h3 id="重命名表" tabindex="-1"><a class="header-anchor" href="#重命名表"><span>重命名表</span></a></h3><blockquote><p>语法：<code>alter table 表名 rename 新表名;</code></p></blockquote><div class="language-sql" data-highlighter="prismjs" data-ext="sql" data-title="sql"><pre><code><span class="line"><span class="token comment">-- 重命名 students 表为 workmates: </span></span>
<span class="line"><span class="token keyword">alter</span> <span class="token keyword">table</span> students <span class="token keyword">rename</span> workmates<span class="token punctuation">;</span></span>
<span class="line"></span></code></pre></div><h3 id="清空表数据" tabindex="-1"><a class="header-anchor" href="#清空表数据"><span>清空表数据</span></a></h3><blockquote><p>方法一：<code>delete from 表名;</code> 方法二：<code>truncate table &quot;表名&quot;;</code></p></blockquote><ul><li><code>DELETE:</code>1. DML语言;2. 可以回退;3. 可以有条件的删除;</li><li><code>TRUNCATE:</code>1. DDL语言;2. 无法回退;3. 默认所有的表内容都删除;4. 删除速度比delete快。</li></ul><div class="language-sql" data-highlighter="prismjs" data-ext="sql" data-title="sql"><pre><code><span class="line"><span class="token comment">-- 清空表为 workmates 里面的数据，不删除表。 </span></span>
<span class="line"><span class="token keyword">delete</span> <span class="token keyword">from</span> workmates<span class="token punctuation">;</span></span>
<span class="line"><span class="token comment">-- 删除workmates表中的所有数据，且无法恢复</span></span>
<span class="line"><span class="token keyword">truncate</span> <span class="token keyword">table</span> workmates<span class="token punctuation">;</span></span>
<span class="line"></span></code></pre></div><h3 id="删除整张表" tabindex="-1"><a class="header-anchor" href="#删除整张表"><span>删除整张表</span></a></h3><blockquote><p>语法：<code>drop table 表名;</code></p></blockquote><div class="language-sql" data-highlighter="prismjs" data-ext="sql" data-title="sql"><pre><code><span class="line"><span class="token comment">-- 删除 workmates 表: </span></span>
<span class="line"><span class="token keyword">drop</span> <span class="token keyword">table</span> workmates<span class="token punctuation">;</span></span>
<span class="line"></span></code></pre></div><h3 id="删除整个数据库" tabindex="-1"><a class="header-anchor" href="#删除整个数据库"><span>删除整个数据库</span></a></h3><blockquote><p>语法：<code>drop database 数据库名;</code></p></blockquote><div class="language-sql" data-highlighter="prismjs" data-ext="sql" data-title="sql"><pre><code><span class="line"><span class="token comment">-- 删除 samp_db 数据库: </span></span>
<span class="line"><span class="token keyword">drop</span> <span class="token keyword">database</span> samp_db<span class="token punctuation">;</span></span>
<span class="line"></span></code></pre></div><h2 id="其它实例" tabindex="-1"><a class="header-anchor" href="#其它实例"><span>其它实例</span></a></h2><h3 id="sql删除重复记录" tabindex="-1"><a class="header-anchor" href="#sql删除重复记录"><span>SQL删除重复记录</span></a></h3><p><a href="http://www.xiangguo.li/sql_and_nosql/2015/01/01/sql" target="_blank" rel="noopener noreferrer">转载</a></p><div class="language-sql line-numbers-mode" data-highlighter="prismjs" data-ext="sql" data-title="sql"><pre><code><span class="line"><span class="token comment">-- 查找表中多余的重复记录，重复记录是根据单个字段（peopleId）来判断</span></span>
<span class="line"><span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> people <span class="token keyword">where</span> peopleId <span class="token operator">in</span> <span class="token punctuation">(</span><span class="token keyword">select</span> peopleId <span class="token keyword">from</span> people <span class="token keyword">group</span> <span class="token keyword">by</span> peopleId <span class="token keyword">having</span> <span class="token function">count</span><span class="token punctuation">(</span>peopleId<span class="token punctuation">)</span> <span class="token operator">&gt;</span> <span class="token number">1</span><span class="token punctuation">)</span></span>
<span class="line"><span class="token comment">-- 删除表中多余的重复记录，重复记录是根据单个字段（peopleId）来判断，只留有rowid最小的记录</span></span>
<span class="line"><span class="token keyword">delete</span> <span class="token keyword">from</span> people </span>
<span class="line"><span class="token keyword">where</span> peopleId <span class="token operator">in</span> <span class="token punctuation">(</span><span class="token keyword">select</span> peopleId <span class="token keyword">from</span> people <span class="token keyword">group</span> <span class="token keyword">by</span> peopleId <span class="token keyword">having</span> <span class="token function">count</span><span class="token punctuation">(</span>peopleId<span class="token punctuation">)</span> <span class="token operator">&gt;</span> <span class="token number">1</span><span class="token punctuation">)</span></span>
<span class="line"><span class="token operator">and</span> rowid <span class="token operator">not</span> <span class="token operator">in</span> <span class="token punctuation">(</span><span class="token keyword">select</span> <span class="token function">min</span><span class="token punctuation">(</span>rowid<span class="token punctuation">)</span> <span class="token keyword">from</span> people <span class="token keyword">group</span> <span class="token keyword">by</span> peopleId <span class="token keyword">having</span> <span class="token function">count</span><span class="token punctuation">(</span>peopleId <span class="token punctuation">)</span><span class="token operator">&gt;</span><span class="token number">1</span><span class="token punctuation">)</span></span>
<span class="line"><span class="token comment">-- 查找表中多余的重复记录（多个字段）</span></span>
<span class="line"><span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> vitae a</span>
<span class="line"><span class="token keyword">where</span> <span class="token punctuation">(</span>a<span class="token punctuation">.</span>peopleId<span class="token punctuation">,</span>a<span class="token punctuation">.</span>seq<span class="token punctuation">)</span> <span class="token operator">in</span> <span class="token punctuation">(</span><span class="token keyword">select</span> peopleId<span class="token punctuation">,</span>seq <span class="token keyword">from</span> vitae <span class="token keyword">group</span> <span class="token keyword">by</span> peopleId<span class="token punctuation">,</span>seq <span class="token keyword">having</span> <span class="token function">count</span><span class="token punctuation">(</span><span class="token operator">*</span><span class="token punctuation">)</span> <span class="token operator">&gt;</span> <span class="token number">1</span><span class="token punctuation">)</span></span>
<span class="line"><span class="token comment">-- 删除表中多余的重复记录（多个字段），只留有rowid最小的记录</span></span>
<span class="line"><span class="token keyword">delete</span> <span class="token keyword">from</span> vitae a</span>
<span class="line"><span class="token keyword">where</span> <span class="token punctuation">(</span>a<span class="token punctuation">.</span>peopleId<span class="token punctuation">,</span>a<span class="token punctuation">.</span>seq<span class="token punctuation">)</span> <span class="token operator">in</span> <span class="token punctuation">(</span><span class="token keyword">select</span> peopleId<span class="token punctuation">,</span>seq <span class="token keyword">from</span> vitae <span class="token keyword">group</span> <span class="token keyword">by</span> peopleId<span class="token punctuation">,</span>seq <span class="token keyword">having</span> <span class="token function">count</span><span class="token punctuation">(</span><span class="token operator">*</span><span class="token punctuation">)</span> <span class="token operator">&gt;</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">and</span> rowid <span class="token operator">not</span> <span class="token operator">in</span> <span class="token punctuation">(</span><span class="token keyword">select</span> <span class="token function">min</span><span class="token punctuation">(</span>rowid<span class="token punctuation">)</span> <span class="token keyword">from</span> vitae <span class="token keyword">group</span> <span class="token keyword">by</span> peopleId<span class="token punctuation">,</span>seq <span class="token keyword">having</span> <span class="token function">count</span><span class="token punctuation">(</span><span class="token operator">*</span><span class="token punctuation">)</span><span class="token operator">&gt;</span><span class="token number">1</span><span class="token punctuation">)</span></span>
<span class="line"><span class="token comment">-- 查找表中多余的重复记录（多个字段），不包含rowid最小的记录</span></span>
<span class="line"><span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> vitae a</span>
<span class="line"><span class="token keyword">where</span> <span class="token punctuation">(</span>a<span class="token punctuation">.</span>peopleId<span class="token punctuation">,</span>a<span class="token punctuation">.</span>seq<span class="token punctuation">)</span> <span class="token operator">in</span> <span class="token punctuation">(</span><span class="token keyword">select</span> peopleId<span class="token punctuation">,</span>seq <span class="token keyword">from</span> vitae <span class="token keyword">group</span> <span class="token keyword">by</span> peopleId<span class="token punctuation">,</span>seq <span class="token keyword">having</span> <span class="token function">count</span><span class="token punctuation">(</span><span class="token operator">*</span><span class="token punctuation">)</span> <span class="token operator">&gt;</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">and</span> rowid <span class="token operator">not</span> <span class="token operator">in</span> <span class="token punctuation">(</span><span class="token keyword">select</span> <span class="token function">min</span><span class="token punctuation">(</span>rowid<span class="token punctuation">)</span> <span class="token keyword">from</span> vitae <span class="token keyword">group</span> <span class="token keyword">by</span> peopleId<span class="token punctuation">,</span>seq <span class="token keyword">having</span> <span class="token function">count</span><span class="token punctuation">(</span><span class="token operator">*</span><span class="token punctuation">)</span><span class="token operator">&gt;</span><span class="token number">1</span><span class="token punctuation">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,133)]))}const i=n(t,[["render",o]]),k=JSON.parse('{"path":"/java-tutor/orm-tutor/mysql/operation.html","title":"mysql操作","lang":"zh-CN","frontmatter":{"description":"mysql操作 数据类型 提示 先创建几个例子 创建数据库 创建表 删除表 增删改查 insert delete update select where AND, OR 和 NOT OR OR 语法 NOT NOT 语法 AND & OR & NOT ORDER BY ORDER BY 语法 用于按升序或降序对结果集进行排序。 默认按 ASC 升序对记...","head":[["meta",{"property":"og:url","content":"https://yzqdev.github.io/cs-guide/cs-guide/java-tutor/orm-tutor/mysql/operation.html"}],["meta",{"property":"og:site_name","content":"cs-guide"}],["meta",{"property":"og:title","content":"mysql操作"}],["meta",{"property":"og:description","content":"mysql操作 数据类型 提示 先创建几个例子 创建数据库 创建表 删除表 增删改查 insert delete update select where AND, OR 和 NOT OR OR 语法 NOT NOT 语法 AND & OR & NOT ORDER BY ORDER BY 语法 用于按升序或降序对结果集进行排序。 默认按 ASC 升序对记..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2022-11-23T15:42:45.000Z"}],["meta",{"property":"article:modified_time","content":"2022-11-23T15:42:45.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"mysql操作\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2022-11-23T15:42:45.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"yzqdev\\",\\"url\\":\\"http://www.yzqdev.top\\"}]}"]]},"headers":[{"level":2,"title":"创建数据库","slug":"创建数据库","link":"#创建数据库","children":[]},{"level":2,"title":"创建表","slug":"创建表","link":"#创建表","children":[]},{"level":2,"title":"删除表","slug":"删除表","link":"#删除表","children":[]},{"level":2,"title":"增删改查","slug":"增删改查","link":"#增删改查","children":[]},{"level":2,"title":"insert","slug":"insert","link":"#insert","children":[]},{"level":2,"title":"delete","slug":"delete","link":"#delete","children":[]},{"level":2,"title":"update","slug":"update","link":"#update","children":[]},{"level":2,"title":"select","slug":"select","link":"#select","children":[]},{"level":2,"title":"where","slug":"where","link":"#where","children":[{"level":3,"title":"AND, OR 和 NOT","slug":"and-or-和-not","link":"#and-or-和-not","children":[]},{"level":3,"title":"OR","slug":"or","link":"#or","children":[]},{"level":3,"title":"NOT","slug":"not","link":"#not","children":[]},{"level":3,"title":"AND & OR & NOT","slug":"and-or-not","link":"#and-or-not","children":[]}]},{"level":2,"title":"ORDER BY","slug":"order-by","link":"#order-by","children":[]},{"level":2,"title":"GROUP BY","slug":"group-by","link":"#group-by","children":[]},{"level":2,"title":"IN","slug":"in","link":"#in","children":[]},{"level":2,"title":"UNION","slug":"union","link":"#union","children":[]},{"level":2,"title":"BETWEEN","slug":"between","link":"#between","children":[]},{"level":2,"title":"AS","slug":"as","link":"#as","children":[]},{"level":2,"title":"JOIN","slug":"join","link":"#join","children":[{"level":3,"title":"INNER JOIN","slug":"inner-join","link":"#inner-join","children":[]},{"level":3,"title":"LEFT JOIN","slug":"left-join","link":"#left-join","children":[]},{"level":3,"title":"RIGHT JOIN","slug":"right-join","link":"#right-join","children":[]},{"level":3,"title":"FULL OUTER JOIN","slug":"full-outer-join","link":"#full-outer-join","children":[]}]},{"level":2,"title":"SQL 函数","slug":"sql-函数","link":"#sql-函数","children":[{"level":3,"title":"COUNT","slug":"count","link":"#count","children":[]},{"level":3,"title":"AVG","slug":"avg","link":"#avg","children":[]},{"level":3,"title":"SUM","slug":"sum","link":"#sum","children":[]},{"level":3,"title":"MAX","slug":"max","link":"#max","children":[]},{"level":3,"title":"MIN","slug":"min","link":"#min","children":[]}]},{"level":2,"title":"触发器","slug":"触发器","link":"#触发器","children":[]},{"level":2,"title":"添加索引","slug":"添加索引","link":"#添加索引","children":[{"level":3,"title":"普通索引(INDEX)","slug":"普通索引-index","link":"#普通索引-index","children":[]},{"level":3,"title":"主键索引(PRIMARY key)","slug":"主键索引-primary-key","link":"#主键索引-primary-key","children":[]},{"level":3,"title":"唯一索引(UNIQUE)","slug":"唯一索引-unique","link":"#唯一索引-unique","children":[]},{"level":3,"title":"全文索引(FULLTEXT)","slug":"全文索引-fulltext","link":"#全文索引-fulltext","children":[]},{"level":3,"title":"添加多列索引","slug":"添加多列索引","link":"#添加多列索引","children":[]},{"level":3,"title":"建立索引的时机","slug":"建立索引的时机","link":"#建立索引的时机","children":[]}]},{"level":2,"title":"创建后表的修改","slug":"创建后表的修改","link":"#创建后表的修改","children":[{"level":3,"title":"添加列","slug":"添加列","link":"#添加列","children":[]},{"level":3,"title":"修改列","slug":"修改列","link":"#修改列","children":[]},{"level":3,"title":"删除列","slug":"删除列","link":"#删除列","children":[]},{"level":3,"title":"重命名表","slug":"重命名表","link":"#重命名表","children":[]},{"level":3,"title":"清空表数据","slug":"清空表数据","link":"#清空表数据","children":[]},{"level":3,"title":"删除整张表","slug":"删除整张表","link":"#删除整张表","children":[]},{"level":3,"title":"删除整个数据库","slug":"删除整个数据库","link":"#删除整个数据库","children":[]}]},{"level":2,"title":"其它实例","slug":"其它实例","link":"#其它实例","children":[{"level":3,"title":"SQL删除重复记录","slug":"sql删除重复记录","link":"#sql删除重复记录","children":[]}]}],"git":{"createdTime":1669218165000,"updatedTime":1669218165000,"contributors":[{"name":"yzqdev","username":"yzqdev","email":"yzqdev@outlook.com","commits":1,"url":"https://github.com/yzqdev"}]},"readingTime":{"minutes":15.5,"words":4650},"filePathRelative":"java-tutor/orm-tutor/mysql/operation.md","localizedDate":"2022年11月23日","autoDesc":true}');export{i as comp,k as data};
