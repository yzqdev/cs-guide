import{_ as n,c as a,a as e,o as p}from"./app-C8DxhDIZ.js";const t={};function c(l,s){return p(),a("div",null,s[0]||(s[0]=[e(`<h1 id="代码规范" tabindex="-1"><a class="header-anchor" href="#代码规范"><span>代码规范</span></a></h1><div class="hint-container tip"><p class="hint-container-title">提示</p><p><a href="https://docs.microsoft.com/zh-cn/dotnet/csharp/fundamentals/coding-style/coding-conventions" target="_blank" rel="noopener noreferrer">https://docs.microsoft.com/zh-cn/dotnet/csharp/fundamentals/coding-style/coding-conventions</a></p></div><h2 id="帕斯卡拼写法" tabindex="-1"><a class="header-anchor" href="#帕斯卡拼写法"><span>帕斯卡拼写法</span></a></h2><p>命名 class、record 或 struct 时，使用 pascal 大小写（“PascalCasing”）。</p><div class="language-csharp" data-highlighter="prismjs" data-ext="cs" data-title="cs"><pre><code><span class="line"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">DataService</span></span>
<span class="line"><span class="token punctuation">{</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">public</span> <span class="token keyword">record</span> <span class="token class-name">PhysicalAddress</span><span class="token punctuation">(</span></span>
<span class="line">    <span class="token class-name"><span class="token keyword">string</span></span> Street<span class="token punctuation">,</span></span>
<span class="line">    <span class="token class-name"><span class="token keyword">string</span></span> City<span class="token punctuation">,</span></span>
<span class="line">    <span class="token class-name"><span class="token keyword">string</span></span> StateOrProvince<span class="token punctuation">,</span></span>
<span class="line">    <span class="token class-name"><span class="token keyword">string</span></span> ZipCode<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">public</span> <span class="token keyword">struct</span> <span class="token class-name">ValueCoordinate</span></span>
<span class="line"><span class="token punctuation">{</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre></div><p>命名 interface 时，使用 pascal 大小写并在名称前面加上前缀 I。 这可以清楚地向使用者表明这是 interface</p><div class="language-csharp" data-highlighter="prismjs" data-ext="cs" data-title="cs"><pre><code><span class="line"><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">IWorkerQueue</span></span>
<span class="line"><span class="token punctuation">{</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre></div><p>命名类型的 public 成员（例如字段、属性、事件、方法和本地函数）时，请使用 pascal 大小写。</p><div class="language-csharp line-numbers-mode" data-highlighter="prismjs" data-ext="cs" data-title="cs"><pre><code><span class="line"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ExampleEvents</span></span>
<span class="line"><span class="token punctuation">{</span></span>
<span class="line">    <span class="token comment">// A public field, these should be used sparingly</span></span>
<span class="line">    <span class="token keyword">public</span> <span class="token class-name"><span class="token keyword">bool</span></span> IsValid<span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">    <span class="token comment">// An init-only property</span></span>
<span class="line">    <span class="token keyword">public</span> <span class="token return-type class-name">IWorkerQueue</span> WorkerQueue <span class="token punctuation">{</span> <span class="token keyword">get</span><span class="token punctuation">;</span> <span class="token keyword">init</span><span class="token punctuation">;</span> <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">    <span class="token comment">// An event</span></span>
<span class="line">    <span class="token keyword">public</span> <span class="token keyword">event</span> <span class="token class-name">Action</span> EventProcessing<span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">    <span class="token comment">// Method</span></span>
<span class="line">    <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">StartEventProcessing</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line">    <span class="token punctuation">{</span></span>
<span class="line">        <span class="token comment">// Local function</span></span>
<span class="line">        <span class="token keyword">static</span> <span class="token return-type class-name"><span class="token keyword">int</span></span> <span class="token function">CountQueueItems</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> WorkerQueue<span class="token punctuation">.</span>Count<span class="token punctuation">;</span></span>
<span class="line">        <span class="token comment">// ...</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="驼峰式大小写" tabindex="-1"><a class="header-anchor" href="#驼峰式大小写"><span>驼峰式大小写</span></a></h2><p>命名 private 或 internal 字段时，使用驼峰式大小写（“camelCasing”），并且它们以 _ 作为前缀。</p><div class="language-csharp" data-highlighter="prismjs" data-ext="cs" data-title="cs"><pre><code><span class="line"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">DataService</span></span>
<span class="line"><span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">private</span> <span class="token class-name">IWorkerQueue</span> _workerQueue<span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre></div><p>使用为 private 或 internal 的static 字段时 请使用 s_前缀，对于线程静态，请使用 t_。</p><div class="language-csharp" data-highlighter="prismjs" data-ext="cs" data-title="cs"><pre><code><span class="line"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">DataService</span></span>
<span class="line"><span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token class-name">IWorkerQueue</span> s_workerQueue<span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">    <span class="token punctuation">[</span><span class="token attribute"><span class="token class-name">ThreadStatic</span></span><span class="token punctuation">]</span></span>
<span class="line">    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token class-name">TimeSpan</span> t_timeSpan<span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre></div><p>编写方法参数时，请使用驼峰式大小写。</p><div class="language-csharp" data-highlighter="prismjs" data-ext="cs" data-title="cs"><pre><code><span class="line"><span class="token keyword">public</span> <span class="token return-type class-name">T</span> <span class="token generic-method"><span class="token function">SomeMethod</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>T<span class="token punctuation">&gt;</span></span></span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">int</span></span> someNumber<span class="token punctuation">,</span> <span class="token class-name"><span class="token keyword">bool</span></span> isValid<span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">{</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre></div><p>linq使用</p><div class="language-csharp" data-highlighter="prismjs" data-ext="cs" data-title="cs"><pre><code><span class="line"><span class="token class-name"><span class="token keyword">var</span></span> seattleCustomers <span class="token operator">=</span> <span class="token keyword">from</span> customer <span class="token keyword">in</span> customers</span>
<span class="line">                       <span class="token keyword">where</span> <span class="token class-name">customer</span><span class="token punctuation">.</span>City <span class="token operator">==</span> <span class="token string">&quot;Seattle&quot;</span></span>
<span class="line">                       <span class="token keyword">select</span> customer<span class="token punctuation">.</span>Name<span class="token punctuation">;</span></span>
<span class="line"></span></code></pre></div>`,18)]))}const i=n(t,[["render",c]]),r=JSON.parse('{"path":"/csharp-tutor/basics/coding-style.html","title":"代码规范","lang":"zh-CN","frontmatter":{"description":"代码规范 提示 https://docs.microsoft.com/zh-cn/dotnet/csharp/fundamentals/coding-style/coding-conventions 帕斯卡拼写法 命名 class、record 或 struct 时，使用 pascal 大小写（“PascalCasing”）。 命名 interface...","head":[["meta",{"property":"og:url","content":"https://yzqdev.github.io/cs-guide/cs-guide/csharp-tutor/basics/coding-style.html"}],["meta",{"property":"og:site_name","content":"cs-guide"}],["meta",{"property":"og:title","content":"代码规范"}],["meta",{"property":"og:description","content":"代码规范 提示 https://docs.microsoft.com/zh-cn/dotnet/csharp/fundamentals/coding-style/coding-conventions 帕斯卡拼写法 命名 class、record 或 struct 时，使用 pascal 大小写（“PascalCasing”）。 命名 interface..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2022-08-23T23:19:21.000Z"}],["meta",{"property":"article:modified_time","content":"2022-08-23T23:19:21.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"代码规范\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2022-08-23T23:19:21.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"yzqdev\\",\\"url\\":\\"http://www.yzqdev.top\\"}]}"]]},"headers":[{"level":2,"title":"帕斯卡拼写法","slug":"帕斯卡拼写法","link":"#帕斯卡拼写法","children":[]},{"level":2,"title":"驼峰式大小写","slug":"驼峰式大小写","link":"#驼峰式大小写","children":[]}],"git":{"createdTime":1661296761000,"updatedTime":1661296761000,"contributors":[{"name":"yzqdev","username":"yzqdev","email":"yzqdev@outlook.com","commits":1,"url":"https://github.com/yzqdev"}]},"readingTime":{"minutes":0.95,"words":286},"filePathRelative":"csharp-tutor/basics/coding-style.md","localizedDate":"2022年8月23日","autoDesc":true}');export{i as comp,r as data};
