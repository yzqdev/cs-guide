import{_ as a,c as s,a as t,o as e}from"./app-C8DxhDIZ.js";const p={};function i(o,n){return e(),s("div",null,n[0]||(n[0]=[t(`<h1 id="监听器-listener" tabindex="-1"><a class="header-anchor" href="#监听器-listener"><span>监听器 listener</span></a></h1><h2 id="spring-boot-启动事件顺序" tabindex="-1"><a class="header-anchor" href="#spring-boot-启动事件顺序"><span><strong>Spring Boot 启动事件顺序</strong></span></a></h2><p><strong>1、ApplicationStartingEvent</strong></p><p>这个事件在 Spring Boot 应用运行开始时，且进行任何处理之前发送（除了监听器和初始化器注册之外）。</p><p><strong>2、ApplicationEnvironmentPreparedEvent</strong></p><p>这个事件在当已知要在上下文中使用 Spring 环境（Environment）时，在 Spring 上下文（context）创建之前发送。</p><p><strong>3、ApplicationContextInitializedEvent</strong></p><p>这个事件在当 Spring 应用上下文（ApplicationContext）准备好了，并且应用初始化器（ApplicationContextInitializers）已经被调用，在 bean 的定义（bean definitions）被加载之前发送。</p><p><strong>4、ApplicationPreparedEvent</strong></p><p>这个事件是在 Spring 上下文（context）刷新之前，且在 bean 的定义（bean definitions）被加载之后发送。</p><p><strong>5、ApplicationStartedEvent</strong></p><p>这个事件是在 Spring 上下文（context）刷新之后，且在 <a href="https://mp.weixin.qq.com/s?__biz=MzI3ODcxMzQzMw==&amp;mid=2247484366&amp;idx=1&amp;sn=7dc94038861fe9e10cdf132ffc83092f&amp;scene=21#wechat_redirect" target="_blank" rel="noopener noreferrer"><strong>application/ command-line runners</strong></a> 被调用之前发送。</p><p><strong>6、AvailabilityChangeEvent</strong></p><p>这个事件紧随上个事件之后发送，状态：ReadinessState.CORRECT，表示应用已处于活动状态。</p><p><strong>7、ApplicationReadyEvent</strong></p><p>这个事件在任何 <a href="https://mp.weixin.qq.com/s?__biz=MzI3ODcxMzQzMw==&amp;mid=2247484366&amp;idx=1&amp;sn=7dc94038861fe9e10cdf132ffc83092f&amp;scene=21#wechat_redirect" target="_blank" rel="noopener noreferrer"><strong>application/ command-line runners</strong></a> 调用之后发送。</p><p><strong>8、AvailabilityChangeEvent</strong></p><p>这个事件紧随上个事件之后发送，状态：ReadinessState.ACCEPTING_TRAFFIC，表示应用可以开始准备接收请求了。</p><p><strong>9、ApplicationFailedEvent</strong></p><p>这个事件在应用启动异常时进行发送。</p><hr><p>上面所介绍的这些事件列表仅包括绑定到 SpringApplication 的 SpringApplicationEvents 事件，除了这些事件以外，以下事件也会在 ApplicationPreparedEvent 之后和 ApplicationStartedEvent 之前发送：</p><ul><li><strong>WebServerInitializedEvent</strong> 这个 Web <a href="https://cloud.tencent.com/product/cvm?from=10680" target="_blank" rel="noopener noreferrer">服务器</a>初始化事件在 WebServer 启动之后发送，对应的还有 ServletWebServerInitializedEvent（Servlet Web 服务器初始化事件）、ReactiveWebServerInitializedEvent（响应式 Web 服务器初始化事件）。</li><li><strong>ContextRefreshedEvent</strong> 这个上下文刷新事件是在 Spring 应用上下文（ApplicationContext）刷新之后发送。</li></ul><hr><h2 id="自定义启动事件监听器" tabindex="-1"><a class="header-anchor" href="#自定义启动事件监听器"><span><strong>自定义启动事件监听器</strong></span></a></h2><p>既然我们知道了 Spring Boot 在启动过程中的各个事件，那么我们就可以在每个环节来处理一些我们想做的事情，只需要自定义一个监听器来监听某个事件就可以了。</p><p>比如我们想在上面的第 8 步，即应用启动完成可以接收请求了，我们简单输出一个成功标识。</p><p>Spring Boot 基础的构建这里就不介绍了，如果你对 Spring Boot 还不是很熟悉，或者只是会简单的使用，那还是建议你深入学习下吧，推荐这个 Spring Boot 学习仓库，欢迎 Star 关注：</p><blockquote><p><a href="https://github.com/javastacks/spring-boot-best-practice" target="_blank" rel="noopener noreferrer">https://github.com/javastacks/spring-boot-best-practice</a></p></blockquote><h4 id="_1、新建监听器" tabindex="-1"><a class="header-anchor" href="#_1、新建监听器"><span><strong>1、新建监听器</strong></span></a></h4><div class="language-java line-numbers-mode" data-highlighter="prismjs" data-ext="java" data-title="java"><pre><code><span class="line"><span class="token keyword">import</span> <span class="token import"><span class="token namespace">lombok<span class="token punctuation">.</span>extern<span class="token punctuation">.</span>slf4j<span class="token punctuation">.</span></span><span class="token class-name">Slf4j</span></span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>boot<span class="token punctuation">.</span>availability<span class="token punctuation">.</span></span><span class="token class-name">AvailabilityChangeEvent</span></span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>boot<span class="token punctuation">.</span>availability<span class="token punctuation">.</span></span><span class="token class-name">ReadinessState</span></span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>context<span class="token punctuation">.</span></span><span class="token class-name">ApplicationListener</span></span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token doc-comment comment">/**</span>
<span class="line"> * 来源微信公众号：Java技术栈</span>
<span class="line"> */</span></span>
<span class="line"><span class="token annotation punctuation">@Slf4j</span></span>
<span class="line"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">JavastackListener</span> <span class="token keyword">implements</span> <span class="token class-name">ApplicationListener</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">AvailabilityChangeEvent</span><span class="token punctuation">&gt;</span></span> <span class="token punctuation">{</span></span>
<span class="line"></span>
<span class="line">    <span class="token annotation punctuation">@Override</span></span>
<span class="line">    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">onApplicationEvent</span><span class="token punctuation">(</span><span class="token class-name">AvailabilityChangeEvent</span> event<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">&quot;监听到事件：&quot;</span> <span class="token operator">+</span> event<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token class-name">ReadinessState</span><span class="token punctuation">.</span><span class="token constant">ACCEPTING_TRAFFIC</span> <span class="token operator">==</span> event<span class="token punctuation">.</span><span class="token function">getState</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span></span>
<span class="line">            log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">&quot;应用启动完成，可以请求了……&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token punctuation">}</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>复制</p><p>新建一个自定义监听器，实现了 ApplicationListener 接口，泛型 AvailabilityChangeEvent 表示仅仅监听 AvailabilityChangeEvent 事件。</p><p>因第 8 步的事件和第 6 步的事件同名，我们可以根据事件的状态来区分到底是哪一个环节的事件 。</p><h4 id="_2、注册监听器" tabindex="-1"><a class="header-anchor" href="#_2、注册监听器"><span><strong>2、注册监听器</strong></span></a></h4><p><strong>注册监听器有两种方式：</strong></p><p>1、在资源目录中的 META-INF/spring.factories 文件中自动注册：</p><div class="language-java" data-highlighter="prismjs" data-ext="java" data-title="java"><pre><code><span class="line"><span class="token class-name"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>context<span class="token punctuation">.</span></span>ApplicationListener</span><span class="token operator">=</span>\\</span>
<span class="line"><span class="token class-name"><span class="token namespace">cn<span class="token punctuation">.</span>javastack<span class="token punctuation">.</span>springboot<span class="token punctuation">.</span>features<span class="token punctuation">.</span>listener<span class="token punctuation">.</span></span>JavastackListener</span></span>
<span class="line"></span></code></pre></div><p>复制</p><p>2、如果是监听 Spring 应用上下文（ApplicationContext）创建之后的事件，可以直接在监听器上使用 @Component 注解即可，否则需要使用第一种方法的自动注册，因为 ApplicationContext 并未创建，这时的 Bean 是不能被加载的。</p><h4 id="_3、应用启动" tabindex="-1"><a class="header-anchor" href="#_3、应用启动"><span><strong>3、应用启动</strong></span></a></h4><p>下面来看下启动日志：</p><p><img src="https://ask.qcloudimg.com/http-save/yehe-1344757/6b5tu95qiz.png?imageView2/2/w/1620" alt="img"></p><p>可以看到同时输出了第 6 步和 8 步的监听日志，但只输出第 8 步的启动完成日志，自定义监听实现成功。</p><h2 id="总结" tabindex="-1"><a class="header-anchor" href="#总结"><span><strong>总结</strong></span></a></h2><p>了解了 Spring Boot 启动过程中的各个事件及监听机制，大家可以依葫芦画瓢实现 Spring Boot 启动过程中的各个自定义操作，比如说在启动过程上实现动态注册、移除 Bean 等。</p><p>一般来说，不建议使用事件和监听器来实现比较耗时和繁重的任务，这样会影响应用程序的正常启动，考虑使用 Spring Boot 的 <a href="https://mp.weixin.qq.com/s?__biz=MzI3ODcxMzQzMw==&amp;mid=2247484366&amp;idx=1&amp;sn=7dc94038861fe9e10cdf132ffc83092f&amp;scene=21#wechat_redirect" target="_blank" rel="noopener noreferrer"><strong>application/ command-line runners</strong></a> 来进行实现。</p>`,47)]))}const c=a(p,[["render",i]]),r=JSON.parse('{"path":"/java-tutor/springboot/application-listener.html","title":"监听器 listener","lang":"zh-CN","frontmatter":{"description":"监听器 listener Spring Boot 启动事件顺序 1、ApplicationStartingEvent 这个事件在 Spring Boot 应用运行开始时，且进行任何处理之前发送（除了监听器和初始化器注册之外）。 2、ApplicationEnvironmentPreparedEvent 这个事件在当已知要在上下文中使用 Spring 环...","head":[["meta",{"property":"og:url","content":"https://yzqdev.github.io/cs-guide/cs-guide/java-tutor/springboot/application-listener.html"}],["meta",{"property":"og:site_name","content":"cs-guide"}],["meta",{"property":"og:title","content":"监听器 listener"}],["meta",{"property":"og:description","content":"监听器 listener Spring Boot 启动事件顺序 1、ApplicationStartingEvent 这个事件在 Spring Boot 应用运行开始时，且进行任何处理之前发送（除了监听器和初始化器注册之外）。 2、ApplicationEnvironmentPreparedEvent 这个事件在当已知要在上下文中使用 Spring 环..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:image","content":"https://ask.qcloudimg.com/http-save/yehe-1344757/6b5tu95qiz.png?imageView2/2/w/1620"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-03-21T03:08:27.000Z"}],["meta",{"property":"article:modified_time","content":"2024-03-21T03:08:27.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"监听器 listener\\",\\"image\\":[\\"https://ask.qcloudimg.com/http-save/yehe-1344757/6b5tu95qiz.png?imageView2/2/w/1620\\"],\\"dateModified\\":\\"2024-03-21T03:08:27.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"yzqdev\\",\\"url\\":\\"http://www.yzqdev.top\\"}]}"]]},"headers":[{"level":2,"title":"Spring Boot 启动事件顺序","slug":"spring-boot-启动事件顺序","link":"#spring-boot-启动事件顺序","children":[]},{"level":2,"title":"自定义启动事件监听器","slug":"自定义启动事件监听器","link":"#自定义启动事件监听器","children":[{"level":4,"title":"1、新建监听器","slug":"_1、新建监听器","link":"#_1、新建监听器","children":[]},{"level":4,"title":"2、注册监听器","slug":"_2、注册监听器","link":"#_2、注册监听器","children":[]},{"level":4,"title":"3、应用启动","slug":"_3、应用启动","link":"#_3、应用启动","children":[]}]},{"level":2,"title":"总结","slug":"总结","link":"#总结","children":[]}],"git":{"createdTime":1655535285000,"updatedTime":1710990507000,"contributors":[{"name":"yzqdev","username":"yzqdev","email":"yzqdev@outlook.com","commits":2,"url":"https://github.com/yzqdev"}]},"readingTime":{"minutes":3.58,"words":1074},"filePathRelative":"java-tutor/springboot/application-listener.md","localizedDate":"2022年6月18日","autoDesc":true}');export{c as comp,r as data};
