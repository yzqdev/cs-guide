import{_ as n,c as a,a as t,o as p}from"./app-C8DxhDIZ.js";const e={};function o(c,s){return p(),a("div",null,s[0]||(s[0]=[t(`<h1 id="path" tabindex="-1"><a class="header-anchor" href="#path"><span>path</span></a></h1><p>path模块提供和系统路径相关的api</p><div class="hint-container tip"><p class="hint-container-title">提示</p><p><code>path.sep</code>在windows上是<code>\\</code>,在linux上是<code>/</code><code>path.delimiter</code>在windows上是<code>;</code>在linux上是<code>/</code></p></div><h2 id="path-basename" tabindex="-1"><a class="header-anchor" href="#path-basename"><span>path.basename()</span></a></h2><p>获取基础路径</p><div class="language-typescript" data-highlighter="prismjs" data-ext="ts" data-title="ts"><pre><code><span class="line"><span class="token keyword">import</span> <span class="token punctuation">{</span>basename <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;path&#39;</span></span>
<span class="line"><span class="token function">basename</span><span class="token punctuation">(</span><span class="token string">&#39;/test/something&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// something</span></span>
<span class="line"><span class="token function">basename</span><span class="token punctuation">(</span><span class="token string">&#39;/test/something.txt&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// something.txt</span></span>
<span class="line"><span class="token function">basename</span><span class="token punctuation">(</span><span class="token string">&#39;/test/something.txt&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;.txt&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// something</span></span>
<span class="line"></span></code></pre></div><h2 id="path-dirname" tabindex="-1"><a class="header-anchor" href="#path-dirname"><span>path.dirname()</span></a></h2><p>获取路径名称</p><div class="language-typescript" data-highlighter="prismjs" data-ext="ts" data-title="ts"><pre><code><span class="line"><span class="token function">dirname</span><span class="token punctuation">(</span><span class="token string">&#39;/test/something&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// /test</span></span>
<span class="line"><span class="token function">dirname</span><span class="token punctuation">(</span><span class="token string">&#39;/test/something/file.txt&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// /test/something</span></span>
<span class="line"></span></code></pre></div><h2 id="path-extname" tabindex="-1"><a class="header-anchor" href="#path-extname"><span>path.extname()</span></a></h2><p>获取后缀</p><div class="language-typescript" data-highlighter="prismjs" data-ext="ts" data-title="ts"><pre><code><span class="line"><span class="token function">extname</span><span class="token punctuation">(</span><span class="token string">&#39;/test/something&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// &#39;&#39;</span></span>
<span class="line"><span class="token function">extname</span><span class="token punctuation">(</span><span class="token string">&#39;/test/something/file.txt&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// &#39;.txt&#39;</span></span>
<span class="line"></span></code></pre></div><h2 id="path-format" tabindex="-1"><a class="header-anchor" href="#path-format"><span>path.format()</span></a></h2><p><code>path.parse</code>的反面</p><div class="language-typescript" data-highlighter="prismjs" data-ext="ts" data-title="ts"><pre><code><span class="line"><span class="token comment">// POSIX</span></span>
<span class="line"><span class="token function">format</span><span class="token punctuation">(</span><span class="token punctuation">{</span> dir<span class="token operator">:</span> <span class="token string">&#39;/Users/joe&#39;</span><span class="token punctuation">,</span> base<span class="token operator">:</span> <span class="token string">&#39;test.txt&#39;</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//  &#39;/Users/joe/test.txt&#39;</span></span>
<span class="line"><span class="token function">format</span><span class="token punctuation">(</span><span class="token punctuation">{</span> root<span class="token operator">:</span> <span class="token string">&#39;/Users/joe&#39;</span><span class="token punctuation">,</span> name<span class="token operator">:</span> <span class="token string">&#39;test&#39;</span><span class="token punctuation">,</span> ext<span class="token operator">:</span> <span class="token string">&#39;.txt&#39;</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//  &#39;/Users/joe/test.txt&#39;</span></span>
<span class="line"><span class="token comment">//windows</span></span>
<span class="line"><span class="token function">format</span><span class="token punctuation">(</span><span class="token punctuation">{</span> dir<span class="token operator">:</span> <span class="token string">&#39;C:\\\\Users\\\\joe&#39;</span><span class="token punctuation">,</span> base<span class="token operator">:</span> <span class="token string">&#39;test.txt&#39;</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//  &#39;C:\\\\Users\\\\joe\\\\test.txt&#39;</span></span>
<span class="line"></span></code></pre></div><h2 id="path-isabsolute" tabindex="-1"><a class="header-anchor" href="#path-isabsolute"><span>path.isAbsolute()</span></a></h2><p>是否是绝对路径</p><div class="language-typescript" data-highlighter="prismjs" data-ext="ts" data-title="ts"><pre><code><span class="line"><span class="token function">isAbsolute</span><span class="token punctuation">(</span><span class="token string">&#39;/test/something&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// true</span></span>
<span class="line"><span class="token function">isAbsolute</span><span class="token punctuation">(</span><span class="token string">&#39;./test/something&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// false</span></span>
<span class="line"></span>
<span class="line"></span></code></pre></div><h2 id="path-join" tabindex="-1"><a class="header-anchor" href="#path-join"><span>path.join</span></a></h2><div class="language-typescript" data-highlighter="prismjs" data-ext="ts" data-title="ts"><pre><code><span class="line"><span class="token keyword">const</span> name <span class="token operator">=</span> <span class="token string">&#39;joe&#39;</span><span class="token punctuation">;</span></span>
<span class="line"> <span class="token function">join</span><span class="token punctuation">(</span><span class="token string">&#39;/&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;users&#39;</span><span class="token punctuation">,</span> name<span class="token punctuation">,</span> <span class="token string">&#39;notes.txt&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// &#39;/users/joe/notes.txt&#39;</span></span>
<span class="line"></span></code></pre></div><p>使用平台特定的分隔符（window：/）作为定界符,将所有给定的path片段连接在一起,然后规范化生成的路径</p><div class="language-javascript" data-highlighter="prismjs" data-ext="js" data-title="js"><pre><code><span class="line">path<span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span><span class="token string">&#39;a&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;b&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;c&#39;</span><span class="token punctuation">)</span>   <span class="token comment">// 输出结果为： &#39;/a/b/c&#39;</span></span>
<span class="line">path<span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span><span class="token string">&#39;a&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;/b&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;c&#39;</span><span class="token punctuation">)</span>  <span class="token comment">// 输出结果为： &#39;/a/b/c&#39;</span></span>
<span class="line">path<span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span><span class="token string">&#39;a/b&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;../&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;c&#39;</span><span class="token punctuation">)</span> <span class="token comment">// 输出结果为： &#39;/a/c&#39;</span></span>
<span class="line">path<span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span><span class="token string">&#39;a&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;./&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;c&#39;</span><span class="token punctuation">)</span> <span class="token comment">// 输出结果为：&#39;/a/c&#39;</span></span>
<span class="line"></span></code></pre></div><h2 id="path-resolve" tabindex="-1"><a class="header-anchor" href="#path-resolve"><span>path.resolve()</span></a></h2><p>将路径或者路径片段序列化为绝对路径</p><div class="language-javascript" data-highlighter="prismjs" data-ext="js" data-title="js"><pre><code><span class="line"><span class="token comment">// 假设当前绝对路径为/admin/user</span></span>
<span class="line">path<span class="token punctuation">.</span><span class="token function">resolve</span><span class="token punctuation">(</span><span class="token string">&#39;a&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;b&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;c&#39;</span><span class="token punctuation">)</span> <span class="token comment">// 输出结果为：&#39;/admin/user/a/a/c&#39;</span></span>
<span class="line">path<span class="token punctuation">.</span><span class="token function">resolve</span><span class="token punctuation">(</span><span class="token string">&#39;a&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;/b&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;c&#39;</span><span class="token punctuation">)</span> <span class="token comment">// 输出结果为： &#39;/b/c&#39;</span></span>
<span class="line">path<span class="token punctuation">.</span><span class="token function">resolve</span><span class="token punctuation">(</span><span class="token string">&#39;a/b&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;../&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;c&#39;</span><span class="token punctuation">)</span> <span class="token comment">// 输出结果为：&#39;/admin/user/a/c&#39;</span></span>
<span class="line">path<span class="token punctuation">.</span><span class="token function">resolve</span><span class="token punctuation">(</span><span class="token string">&#39;a&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;./&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;c&#39;</span><span class="token punctuation">)</span> <span class="token comment">// 输出结果为：&#39;admin/user/a/c&#39;</span></span>
<span class="line"><span class="token function">resolve</span><span class="token punctuation">(</span><span class="token string">&#39;joe.txt&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// &#39;/Users/joe/joe.txt&#39; if run from my home folder</span></span>
<span class="line"><span class="token function">resolve</span><span class="token punctuation">(</span><span class="token string">&#39;tmp&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;joe.txt&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// &#39;/Users/joe/tmp/joe.txt&#39; if run from my home folder</span></span>
<span class="line"><span class="token function">resolve</span><span class="token punctuation">(</span><span class="token string">&#39;/etc&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;joe.txt&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// &#39;/etc/joe.txt&#39;</span></span>
<span class="line">注意<span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">/</span><span class="token template-punctuation string">\`</span></span>的存在<span class="token punctuation">,</span> <span class="token string">&#39;/a&#39;</span>代表的是根目录下的a<span class="token punctuation">,</span> <span class="token string">&#39;a&#39;</span>代表的是当前目录下的a</span>
<span class="line"></span></code></pre></div><p>为了要获取到符合 <code>/</code> 格式的路径，我们可以使用 <code>PATH</code> 模块提供的 <code>path.sep</code> <a href="https://nodejs.org/dist/latest-v12.x/docs/api/path.html#path_path_sep" target="_blank" rel="noopener noreferrer">接口</a>进行字符串匹配截取，接口会根据系统环境的不同进行匹配截取。</p><p>在 Unix 系统下</p><div class="language-javascript" data-highlighter="prismjs" data-ext="js" data-title="js"><pre><code><span class="line">foo<span class="token operator">/</span>bar<span class="token operator">/</span>baz&#39;<span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span>path<span class="token punctuation">.</span>sep<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token comment">// Returns: [&#39;foo&#39;, &#39;bar&#39;, &#39;baz&#39;]</span></span>
<span class="line"></span></code></pre></div><p>Windows 系统下</p><div class="language-javascript" data-highlighter="prismjs" data-ext="js" data-title="js"><pre><code><span class="line">foo\\\\bar\\\\baz&#39;<span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span>path<span class="token punctuation">.</span>sep<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token comment">// Returns: [&#39;foo&#39;, &#39;bar&#39;, &#39;baz&#39;]</span></span>
<span class="line"></span></code></pre></div><p><code>path.sep</code> 的赋值也是根据操作系统来决定是 <code>/</code> 还是 \`\\</p><p>最终的方案自然是 <code>string.split(path.sep).join(&#39;/&#39;)</code> 来进行分隔符的替换。</p><h2 id="path-normalize" tabindex="-1"><a class="header-anchor" href="#path-normalize"><span>path.normalize()</span></a></h2><p>计算最合适的路径</p><div class="language-typescript" data-highlighter="prismjs" data-ext="ts" data-title="ts"><pre><code><span class="line"><span class="token function">normalize</span><span class="token punctuation">(</span><span class="token string">&#39;/users/joe/..//test.txt&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// &#39;/users/test.txt&#39;</span></span>
<span class="line"></span></code></pre></div><h2 id="path-parse" tabindex="-1"><a class="header-anchor" href="#path-parse"><span>path.parse()</span></a></h2><p>解析路径</p><div class="language-typescript" data-highlighter="prismjs" data-ext="ts" data-title="ts"><pre><code><span class="line"><span class="token function">parse</span><span class="token punctuation">(</span><span class="token string">&#39;/users/test.txt&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token comment">//结果</span></span>
<span class="line"><span class="token punctuation">{</span></span>
<span class="line">  root<span class="token operator">:</span> <span class="token string">&#39;/&#39;</span><span class="token punctuation">,</span></span>
<span class="line">  dir<span class="token operator">:</span> <span class="token string">&#39;/users&#39;</span><span class="token punctuation">,</span></span>
<span class="line">  base<span class="token operator">:</span> <span class="token string">&#39;test.txt&#39;</span><span class="token punctuation">,</span></span>
<span class="line">  ext<span class="token operator">:</span> <span class="token string">&#39;.txt&#39;</span><span class="token punctuation">,</span></span>
<span class="line">  name<span class="token operator">:</span> <span class="token string">&#39;test&#39;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre></div><h2 id="path-relative" tabindex="-1"><a class="header-anchor" href="#path-relative"><span>path.relative()</span></a></h2><p>获取相对路径</p><div class="language-typescript" data-highlighter="prismjs" data-ext="ts" data-title="ts"><pre><code><span class="line"><span class="token function">relative</span><span class="token punctuation">(</span><span class="token string">&#39;/Users/joe&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;/Users/joe/test.txt&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// &#39;test.txt&#39;</span></span>
<span class="line"><span class="token function">relative</span><span class="token punctuation">(</span><span class="token string">&#39;/Users/joe&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;/Users/joe/something/test.txt&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// &#39;something/test.txt&#39;</span></span>
<span class="line"></span>
<span class="line"></span></code></pre></div>`,41)]))}const i=n(e,[["render",o]]),u=JSON.parse('{"path":"/node-tutor/apis/path.html","title":"path","lang":"zh-CN","frontmatter":{"description":"path path模块提供和系统路径相关的api 提示 path.sep在windows上是\\\\,在linux上是/ path.delimiter在windows上是;在linux上是/ path.basename() 获取基础路径 path.dirname() 获取路径名称 path.extname() 获取后缀 path.format() path....","head":[["meta",{"property":"og:url","content":"https://yzqdev.github.io/cs-guide/cs-guide/node-tutor/apis/path.html"}],["meta",{"property":"og:site_name","content":"cs-guide"}],["meta",{"property":"og:title","content":"path"}],["meta",{"property":"og:description","content":"path path模块提供和系统路径相关的api 提示 path.sep在windows上是\\\\,在linux上是/ path.delimiter在windows上是;在linux上是/ path.basename() 获取基础路径 path.dirname() 获取路径名称 path.extname() 获取后缀 path.format() path...."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2023-06-25T05:00:38.000Z"}],["meta",{"property":"article:modified_time","content":"2023-06-25T05:00:38.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"path\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2023-06-25T05:00:38.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"yzqdev\\",\\"url\\":\\"http://www.yzqdev.top\\"}]}"]]},"headers":[{"level":2,"title":"path.basename()","slug":"path-basename","link":"#path-basename","children":[]},{"level":2,"title":"path.dirname()","slug":"path-dirname","link":"#path-dirname","children":[]},{"level":2,"title":"path.extname()","slug":"path-extname","link":"#path-extname","children":[]},{"level":2,"title":"path.format()","slug":"path-format","link":"#path-format","children":[]},{"level":2,"title":"path.isAbsolute()","slug":"path-isabsolute","link":"#path-isabsolute","children":[]},{"level":2,"title":"path.join","slug":"path-join","link":"#path-join","children":[]},{"level":2,"title":"path.resolve()","slug":"path-resolve","link":"#path-resolve","children":[]},{"level":2,"title":"path.normalize()","slug":"path-normalize","link":"#path-normalize","children":[]},{"level":2,"title":"path.parse()","slug":"path-parse","link":"#path-parse","children":[]},{"level":2,"title":"path.relative()","slug":"path-relative","link":"#path-relative","children":[]}],"git":{"createdTime":1687669238000,"updatedTime":1687669238000,"contributors":[{"name":"yzqdev","username":"yzqdev","email":"yzqdev@outlook.com","commits":1,"url":"https://github.com/yzqdev"}]},"readingTime":{"minutes":1.84,"words":553},"filePathRelative":"node-tutor/apis/path.md","localizedDate":"2023年6月25日","autoDesc":true}');export{i as comp,u as data};
