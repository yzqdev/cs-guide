import{_ as s,c as n,a as e,o as t}from"./app-C8DxhDIZ.js";const l={};function c(p,a){return t(),n("div",null,a[0]||(a[0]=[e(`<h1 id="linux定时任务" tabindex="-1"><a class="header-anchor" href="#linux定时任务"><span>linux定时任务</span></a></h1><h2 id="命令格式" tabindex="-1"><a class="header-anchor" href="#命令格式"><span>命令格式</span></a></h2><div class="language-bash" data-highlighter="prismjs" data-ext="sh" data-title="sh"><pre><code><span class="line"><span class="token function">crontab</span> <span class="token punctuation">[</span>-u user<span class="token punctuation">]</span> <span class="token function">file</span></span>
<span class="line"><span class="token function">crontab</span> <span class="token punctuation">[</span>-u user<span class="token punctuation">]</span> <span class="token punctuation">[</span> <span class="token parameter variable">-e</span> <span class="token operator">|</span> <span class="token parameter variable">-l</span> <span class="token operator">|</span> <span class="token parameter variable">-r</span> <span class="token punctuation">]</span></span>
<span class="line"></span></code></pre></div><h2 id="命令功能" tabindex="-1"><a class="header-anchor" href="#命令功能"><span>命令功能</span></a></h2><p>通过crontab 命令，我们可以在固定的间隔时间执行指定的系统指令或 shell script脚本。时间间隔的单位可以是分钟、小时、日、月、周及以上的任意组合。这个命令非常设合周期性的日志分析或数据备份等工作。</p><h2 id="命令参数" tabindex="-1"><a class="header-anchor" href="#命令参数"><span>命令参数</span></a></h2><div class="language-bash" data-highlighter="prismjs" data-ext="sh" data-title="sh"><pre><code><span class="line"><span class="token parameter variable">-u</span> user：用来设定某个用户的crontab服务，例如，“-u ixdba”表示设定ixdba用户的crontab服务，此参数一般有root用户来运行。</span>
<span class="line">file：file是命令文件的名字,表示将file做为crontab的任务列表文件并载入crontab。如果在命令行中没有指定这个文件，crontab命令将接受标准输入（键盘）上键入的命令，并将它们载入crontab。</span>
<span class="line">-e：编辑某个用户的crontab文件内容。如果不指定用户，则表示编辑当前用户的crontab文件。</span>
<span class="line">-l：显示某个用户的crontab文件内容，如果不指定用户，则表示显示当前用户的crontab文件内容。</span>
<span class="line">-r：从/var/spool/cron目录中删除某个用户的crontab文件，如果不指定用户，则默认删除当前用户的crontab文件。</span>
<span class="line">-i：在删除用户的crontab文件时给确认提示。</span>
<span class="line"></span></code></pre></div><h2 id="文件格式" tabindex="-1"><a class="header-anchor" href="#文件格式"><span>文件格式</span></a></h2><p>下面是crontab的格式： 分 时 日 月 星期 要运行的命令</p><p>第1列分钟1～59 第2列小时1～23（0表示子夜） 第3列日1～31 第4列月1～12 第5列星期0～6（0表示星期天） 第6列要运行的命令</p><h2 id="常用方法" tabindex="-1"><a class="header-anchor" href="#常用方法"><span>常用方法</span></a></h2><h3 id="创建一个新的crontab文件" tabindex="-1"><a class="header-anchor" href="#创建一个新的crontab文件"><span>创建一个新的crontab文件</span></a></h3><p>在考虑向cron进程提交一个crontab文件之前，首先要做的一件事情就是设置环境变量EDITOR。cron进程根据它来确定使用哪个编辑器编辑crontab文件。9 9 %的UNIX和LINUX用户都使用vi，如果你也是这样，那么你就编辑$ HOME目录下的<code>. profile</code>文件，在其中加入这样一行： <code>EDITOR=vi; export EDITOR</code> 然后保存并退出。不妨创建一个名为<code>&lt;user&gt; cron</code>的文件，其中<code>&lt;user&gt;</code>是用户名，例如， davecron。在该文件中加入如下的内容。</p><div class="language-bash" data-highlighter="prismjs" data-ext="sh" data-title="sh"><pre><code><span class="line"><span class="token comment"># (put your own initials here)echo the date to the console every</span></span>
<span class="line"><span class="token comment"># 15minutes between 6pm and 6am</span></span>
<span class="line"><span class="token number">0,15</span>,30,45 <span class="token number">18</span>-06 * * * /bin/echo <span class="token string">&#39;date&#39;</span> <span class="token operator">&gt;</span> /dev/console</span>
<span class="line"></span></code></pre></div><p>保存并退出。确信前面5个域用空格分隔。 在上面的例子中，系统将每隔1 5分钟向控制台输出一次当前时间。如果系统崩溃或挂起，从最后所显示的时间就可以一眼看出系统是什么时间停止工作的。在有些系统中，用tty1来表示控制台，可以根据实际情况对上面的例子进行相应的修改。为了提交你刚刚创建的crontab文件，可以把这个新创建的文件作为cron命令的参数： <code>$ crontab davecron</code> 现在该文件已经提交给cron进程，它将每隔1 5分钟运行一次。 同时，新创建文件的一个副本已经被放在<code>/var/spool/cron</code>目录中，文件名就是用户名(即dave)。</p><h3 id="列出crontab文件" tabindex="-1"><a class="header-anchor" href="#列出crontab文件"><span>列出crontab文件</span></a></h3><p>为了列出crontab文件，可以用：</p><div class="language-bash" data-highlighter="prismjs" data-ext="sh" data-title="sh"><pre><code><span class="line">     <span class="token function">crontab</span> <span class="token parameter variable">-l</span></span>
<span class="line"></span></code></pre></div><p>你将会看到和上面类似的内容。可以使用这种方法在$ H O M E目录中对crontab文件做一备份：</p><div class="language-bash" data-highlighter="prismjs" data-ext="sh" data-title="sh"><pre><code><span class="line">     <span class="token function">crontab</span> <span class="token parameter variable">-l</span> <span class="token operator">&gt;</span> <span class="token environment constant">$HOME</span>/mycron</span>
<span class="line"></span></code></pre></div><p>这样，一旦不小心误删了crontab文件，可以用上一节所讲述的方法迅速恢复。</p><h3 id="编辑crontab文件" tabindex="-1"><a class="header-anchor" href="#编辑crontab文件"><span>编辑crontab文件</span></a></h3><p>如果希望添加、删除或编辑crontab文件中的条目，而E D I TO R环境变量又设置为v i，那么就可以用v i来编辑crontab文件，相应的命令为：</p><div class="language-bash" data-highlighter="prismjs" data-ext="sh" data-title="sh"><pre><code><span class="line">     <span class="token function">crontab</span> <span class="token parameter variable">-e</span></span>
<span class="line"></span></code></pre></div><p>可以像使用v i编辑其他任何文件那样修改crontab文件并退出。如果修改了某些条目或添加了新的条目，那么在保存该文件时， c r o n会对其进行必要的完整性检查。如果其中的某个域出现了超出允许范围的值，它会提示你。 我们在编辑crontab文件时，没准会加入新的条目。例如，加入下面的一条：</p><div class="language-bash" data-highlighter="prismjs" data-ext="sh" data-title="sh"><pre><code><span class="line">     <span class="token comment"># DT:delete core files,at 3.30am on 1,7,14,21,26,26 days of each month</span></span>
<span class="line">     <span class="token number">30</span> <span class="token number">3</span> <span class="token number">1,7</span>,14,21,26 * * /bin/find <span class="token parameter variable">-name</span> <span class="token string">&#39;core&#39;</span> <span class="token parameter variable">-exec</span> <span class="token function">rm</span> <span class="token punctuation">{</span><span class="token punctuation">}</span> <span class="token punctuation">\\</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre></div><p>现在保存并退出。最好在crontab文件的每一个条目之上加入一条注释，这样就可以知道它的功能、运行时间，更为重要的是，知道这是哪位用户的作业。 现在让我们使用前面讲过的crontab -l命令列出它的全部信息：</p><div class="language-bash" data-highlighter="prismjs" data-ext="sh" data-title="sh"><pre><code><span class="line">$ <span class="token function">crontab</span> <span class="token parameter variable">-l</span> </span>
<span class="line"><span class="token comment"># (crondave installed on Tue May 4 13:07:43 1999)</span></span>
<span class="line"><span class="token comment"># DT:ech the date to the console every 30 minites</span></span>
<span class="line"><span class="token number">0,15</span>,30,45 <span class="token number">18</span>-06 * * * /bin/echo <span class="token variable"><span class="token variable">\`</span><span class="token function">date</span><span class="token variable">\`</span></span> <span class="token operator">&gt;</span> /dev/tty1</span>
<span class="line"><span class="token comment"># DT:delete core files,at 3.30am on 1,7,14,21,26,26 days of each month</span></span>
<span class="line"><span class="token number">30</span> <span class="token number">3</span> <span class="token number">1,7</span>,14,21,26 * * /bin/find <span class="token parameter variable">-name</span> <span class="token string">&#39;core&#39;</span> <span class="token parameter variable">-exec</span> <span class="token function">rm</span> <span class="token punctuation">{</span><span class="token punctuation">}</span> <span class="token punctuation">\\</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre></div><h3 id="删除crontab文件" tabindex="-1"><a class="header-anchor" href="#删除crontab文件"><span>删除crontab文件</span></a></h3><p>要删除crontab文件，可以用：</p><div class="language-bash" data-highlighter="prismjs" data-ext="sh" data-title="sh"><pre><code><span class="line">     <span class="token function">crontab</span> <span class="token parameter variable">-r</span></span>
<span class="line"></span></code></pre></div><h3 id="恢复丢失的crontab文件" tabindex="-1"><a class="header-anchor" href="#恢复丢失的crontab文件"><span>恢复丢失的crontab文件</span></a></h3><p>如果不小心误删了<code>crontab</code>文件，假设你在自己的<code>$HOME</code>目录下还有一个备份，那么可以将其拷贝到<code>/var/spool/cron/&lt;username&gt;</code>，其中<code>&lt;username&gt;</code>是用户名。如果由于权限问题无法完成拷贝，可以用： <code>$ crontab &lt;filename&gt;</code> 其中，<code>&lt;filename&gt;</code>是你在<code>$HOME</code>目录中副本的文件名。 我建议你在自己的$HOME目录中保存一个该文件的副本。我就有过类似的经历，有数次误删了crontab文件（因为r键紧挨在e键的右边）。这就是为什么有些系统文档建议不要直接编辑crontab文件，而是编辑该文件的一个副本，然后重新提交新的文件。 有些crontab的变体有些怪异，所以在使用crontab命令时要格外小心。如果遗漏了任何选项，crontab可能会打开一个空文件，或者看起来像是个空文件。这时敲delete键退出，不要按<code>&lt;Ctrl+D&gt;</code>，否则你将丢失crontab文件。</p><h2 id="使用实例" tabindex="-1"><a class="header-anchor" href="#使用实例"><span>使用实例</span></a></h2><h3 id="实例1-每1分钟执行一次command" tabindex="-1"><a class="header-anchor" href="#实例1-每1分钟执行一次command"><span>实例1：每1分钟执行一次command</span></a></h3><p>命令： * ** ** command</p><h3 id="实例2-每小时的第3和第15分钟执行" tabindex="-1"><a class="header-anchor" href="#实例2-每小时的第3和第15分钟执行"><span>实例2：每小时的第3和第15分钟执行</span></a></h3><p>命令： 3,15 **** command</p><h3 id="实例3-在上午8点到11点的第3和第15分钟执行" tabindex="-1"><a class="header-anchor" href="#实例3-在上午8点到11点的第3和第15分钟执行"><span>实例3：在上午8点到11点的第3和第15分钟执行</span></a></h3><div class="language-bash" data-highlighter="prismjs" data-ext="sh" data-title="sh"><pre><code><span class="line">命令：</span>
<span class="line"><span class="token number">3,15</span> <span class="token number">8</span>-11 ** * <span class="token builtin class-name">command</span></span>
<span class="line"></span></code></pre></div><h3 id="实例4-每隔两天的上午8点到11点的第3和第15分钟执行" tabindex="-1"><a class="header-anchor" href="#实例4-每隔两天的上午8点到11点的第3和第15分钟执行"><span>实例4：每隔两天的上午8点到11点的第3和第15分钟执行</span></a></h3><div class="language-bash" data-highlighter="prismjs" data-ext="sh" data-title="sh"><pre><code><span class="line">命令：</span>
<span class="line"><span class="token number">3,15</span> <span class="token number">8</span>-11 */2* * <span class="token builtin class-name">command</span></span>
<span class="line"></span></code></pre></div><h3 id="实例5-每个星期一的上午8点到11点的第3和第15分钟执行" tabindex="-1"><a class="header-anchor" href="#实例5-每个星期一的上午8点到11点的第3和第15分钟执行"><span>实例5：每个星期一的上午8点到11点的第3和第15分钟执行</span></a></h3><div class="language-bash" data-highlighter="prismjs" data-ext="sh" data-title="sh"><pre><code><span class="line">命令：</span>
<span class="line"><span class="token number">3,15</span> <span class="token number">8</span>-11 ** <span class="token number">1</span> <span class="token builtin class-name">command</span></span>
<span class="line"></span></code></pre></div><h3 id="实例6-每晚的21-30重启smb" tabindex="-1"><a class="header-anchor" href="#实例6-每晚的21-30重启smb"><span>实例6：每晚的21:30重启smb</span></a></h3><div class="language-bash" data-highlighter="prismjs" data-ext="sh" data-title="sh"><pre><code><span class="line">命令：</span>
<span class="line"><span class="token number">30</span> <span class="token number">21</span> ** * /etc/init.d/smb restart</span>
<span class="line"></span></code></pre></div><h3 id="实例7-每月1、10、22日的4-45重启smb" tabindex="-1"><a class="header-anchor" href="#实例7-每月1、10、22日的4-45重启smb"><span>实例7：每月1、10、22日的4 : 45重启smb</span></a></h3><div class="language-bash" data-highlighter="prismjs" data-ext="sh" data-title="sh"><pre><code><span class="line">命令：</span>
<span class="line"><span class="token number">45</span> <span class="token number">4</span> <span class="token number">1,10</span>,22 ** /etc/init.d/smb restart</span>
<span class="line"></span></code></pre></div><h3 id="实例8-每周六、周日的1-10重启smb" tabindex="-1"><a class="header-anchor" href="#实例8-每周六、周日的1-10重启smb"><span>实例8：每周六、周日的1 : 10重启smb</span></a></h3><div class="language-bash" data-highlighter="prismjs" data-ext="sh" data-title="sh"><pre><code><span class="line">命令：</span>
<span class="line"><span class="token number">10</span> <span class="token number">1</span> ** <span class="token number">6,0</span> /etc/init.d/smb restart</span>
<span class="line"></span></code></pre></div><h3 id="实例9-每天18-00至23-00之间每隔30分钟重启smb" tabindex="-1"><a class="header-anchor" href="#实例9-每天18-00至23-00之间每隔30分钟重启smb"><span>实例9：每天18 : 00至23 : 00之间每隔30分钟重启smb</span></a></h3><div class="language-bash" data-highlighter="prismjs" data-ext="sh" data-title="sh"><pre><code><span class="line">命令：</span>
<span class="line"><span class="token number">0,30</span> <span class="token number">18</span>-23 ** * /etc/init.d/smb restart</span>
<span class="line"></span></code></pre></div><h3 id="实例10-每星期六的晚上11-00-pm重启smb" tabindex="-1"><a class="header-anchor" href="#实例10-每星期六的晚上11-00-pm重启smb"><span>实例10：每星期六的晚上11 : 00 pm重启smb</span></a></h3><div class="language-bash" data-highlighter="prismjs" data-ext="sh" data-title="sh"><pre><code><span class="line">命令：</span>
<span class="line"><span class="token number">0</span> <span class="token number">23</span> ** <span class="token number">6</span> /etc/init.d/smb restart</span>
<span class="line"></span></code></pre></div><h3 id="实例11-每一小时重启smb" tabindex="-1"><a class="header-anchor" href="#实例11-每一小时重启smb"><span>实例11：每一小时重启smb</span></a></h3><p>命令：</p><div class="language-bash" data-highlighter="prismjs" data-ext="sh" data-title="sh"><pre><code><span class="line">* */1* ** /etc/init.d/smb restart</span>
<span class="line"></span></code></pre></div><h3 id="实例12-晚上11点到早上7点之间-每隔一小时重启smb" tabindex="-1"><a class="header-anchor" href="#实例12-晚上11点到早上7点之间-每隔一小时重启smb"><span>实例12：晚上11点到早上7点之间，每隔一小时重启smb</span></a></h3><div class="language-bash" data-highlighter="prismjs" data-ext="sh" data-title="sh"><pre><code><span class="line">命令：</span>
<span class="line"><span class="token number">0</span> <span class="token number">23</span>-7 ** * /etc/init.d/smb restart</span>
<span class="line"></span></code></pre></div><h3 id="实例13-每月的4号与每周一到周三的11点重启smb" tabindex="-1"><a class="header-anchor" href="#实例13-每月的4号与每周一到周三的11点重启smb"><span>实例13：每月的4号与每周一到周三的11点重启smb</span></a></h3><div class="language-bash" data-highlighter="prismjs" data-ext="sh" data-title="sh"><pre><code><span class="line">命令：</span>
<span class="line"><span class="token number">0</span> <span class="token number">11</span> <span class="token number">4</span> * mon-wed /etc/init.d/smb restart</span>
<span class="line"></span></code></pre></div><h3 id="实例14-一月一号的4点重启smb" tabindex="-1"><a class="header-anchor" href="#实例14-一月一号的4点重启smb"><span>实例14：一月一号的4点重启smb</span></a></h3><div class="language-bash" data-highlighter="prismjs" data-ext="sh" data-title="sh"><pre><code><span class="line">命令：</span>
<span class="line"><span class="token number">0</span> <span class="token number">4</span> <span class="token number">1</span> jan * /etc/init.d/smb restart</span>
<span class="line"></span></code></pre></div><h3 id="实例15-每小时执行-etc-cron-hourly目录内的脚本" tabindex="-1"><a class="header-anchor" href="#实例15-每小时执行-etc-cron-hourly目录内的脚本"><span>实例15：每小时执行/etc/cron.hourly目录内的脚本</span></a></h3><div class="language-bash" data-highlighter="prismjs" data-ext="sh" data-title="sh"><pre><code><span class="line">命令：</span>
<span class="line">01   **   **     root run-parts /etc/cron.hourly</span>
<span class="line">说明：</span>
<span class="line">run-parts这个参数了，如果去掉这个参数的话，后面就可以写要运行的某个脚本名，而不是目录名了</span>
<span class="line"></span></code></pre></div><h2 id="使用注意事项" tabindex="-1"><a class="header-anchor" href="#使用注意事项"><span>使用注意事项</span></a></h2><h3 id="注意环境变量问题" tabindex="-1"><a class="header-anchor" href="#注意环境变量问题"><span>注意环境变量问题</span></a></h3><p>有时我们创建了一个crontab，但是这个任务却无法自动执行，而手动执行这个任务却没有问题，这种情况一般是由于在crontab文件中没有配置环境变量引起的。 在crontab文件中定义多个调度任务时，需要特别注意的一个问题就是环境变量的设置，因为我们手动执行某个任务时，是在当前shell环境下进行的，程序当然能找到环境变量，而系统自动执行任务调度时，是不会加载任何环境变量的，因此，就需要在crontab文件中指定任务运行所需的所有环境变量，这样，系统执行任务调度时就没有问题了。 不要假定cron知道所需要的特殊环境，它其实并不知道。所以你要保证在shelll脚本中提供所有必要的路径和环境变量，除了一些自动设置的全局变量。所以注意如下3点： 1）脚本中涉及文件路径时写全局路径； 2）脚本执行要用到java或其他环境变量时，通过source命令引入环境变量，如：</p><div class="language-bash" data-highlighter="prismjs" data-ext="sh" data-title="sh"><pre><code><span class="line"><span class="token function">cat</span> start_cbp.sh</span>
<span class="line"><span class="token comment"># !/bin/sh</span></span>
<span class="line"><span class="token builtin class-name">source</span> /etc/profile</span>
<span class="line"><span class="token builtin class-name">export</span> <span class="token assign-left variable">RUN_CONF</span><span class="token operator">=</span>/home/d139/conf/platform/cbp/cbp_jboss.conf</span>
<span class="line">/usr/local/jboss-4.0.5/bin/run.sh <span class="token parameter variable">-c</span> mev <span class="token operator">&amp;</span></span>
<span class="line"><span class="token number">3</span>）当手动执行脚本OK，但是crontab死活不执行时。这时必须大胆怀疑是环境变量惹的祸，并可以尝试在crontab中直接引入环境变量解决问题。如：</span>
<span class="line"><span class="token number">0</span> ** ** <span class="token builtin class-name">.</span> /etc/profile<span class="token punctuation">;</span>/bin/sh /var/www/java/audit_no_count/bin/restart_audit.sh</span>
<span class="line"></span></code></pre></div><h3 id="注意清理系统用户的邮件日志" tabindex="-1"><a class="header-anchor" href="#注意清理系统用户的邮件日志"><span>注意清理系统用户的邮件日志</span></a></h3><p>每条任务调度执行完毕，系统都会将任务输出信息通过电子邮件的形式发送给当前系统用户，这样日积月累，日志信息会非常大，可能会影响系统的正常运行，因此，将每条任务进行重定向处理非常重要。 例如，可以在crontab文件中设置如下形式，忽略日志输出： <code>0 */3* ** /usr/local/apache2/apachectl restart &gt;/dev/null 2&gt;&amp;1</code><code>/dev/null 2&gt;&amp;1</code>表示先将标准输出重定向到/dev/null，然后将标准错误重定向到标准输出，由于标准输出已经重定向到了<code>/dev/null</code>，因此标准错误也会重定向到<code>/dev/null</code>，这样日志输出问题就解决了。</p><h3 id="系统级任务调度与用户级任务调度" tabindex="-1"><a class="header-anchor" href="#系统级任务调度与用户级任务调度"><span>系统级任务调度与用户级任务调度</span></a></h3><p>系统级任务调度主要完成系统的一些维护操作，用户级任务调度主要完成用户自定义的一些任务，可以将用户级任务调度放到系统级任务调度来完成（不建议这么做），但是反过来却不行，root用户的任务调度操作可以通过“crontab –uroot –e”来设置，也可以将调度任务直接写入/etc/crontab文件，需要注意的是，如果要定义一个定时重启系统的任务，就必须将任务放到/etc/crontab文件，即使在root用户下创建一个定时重启系统的任务也是无效的。</p><h3 id="其他注意事项" tabindex="-1"><a class="header-anchor" href="#其他注意事项"><span>其他注意事项</span></a></h3><p>新创建的cron job，不会马上执行，至少要过2分钟才执行。如果重启cron则马上执行。 当crontab突然失效时，可以尝试<code>/etc/init.d/crond restart</code>解决问题。或者查看日志看某个job有没有执行/报错<code>tail -f /var/log/cron</code>。 千万别乱运行<code>crontab -r</code>。它从Crontab目录（/var/spool/cron）中删除用户的Crontab文件。删除了该用户的所有crontab都没了。 在crontab中%是有特殊含义的，表示换行的意思。如果要用的话必须进行转义%，如经常用的date ‘+%Y%m%d’在crontab里是不会执行的，应该换成<code>date ‘+\\%Y\\%m\\%d’</code>。</p>`,75)]))}const o=s(l,[["render",c]]),i=JSON.parse('{"path":"/linux-tutor/awesome-shell/cron.html","title":"linux定时任务","lang":"zh-CN","frontmatter":{"description":"linux定时任务 命令格式 命令功能 通过crontab 命令，我们可以在固定的间隔时间执行指定的系统指令或 shell script脚本。时间间隔的单位可以是分钟、小时、日、月、周及以上的任意组合。这个命令非常设合周期性的日志分析或数据备份等工作。 命令参数 文件格式 下面是crontab的格式： 分 时 日 月 星期 要运行的命令 第1列分钟1～...","head":[["meta",{"property":"og:url","content":"https://yzqdev.github.io/cs-guide/cs-guide/linux-tutor/awesome-shell/cron.html"}],["meta",{"property":"og:site_name","content":"cs-guide"}],["meta",{"property":"og:title","content":"linux定时任务"}],["meta",{"property":"og:description","content":"linux定时任务 命令格式 命令功能 通过crontab 命令，我们可以在固定的间隔时间执行指定的系统指令或 shell script脚本。时间间隔的单位可以是分钟、小时、日、月、周及以上的任意组合。这个命令非常设合周期性的日志分析或数据备份等工作。 命令参数 文件格式 下面是crontab的格式： 分 时 日 月 星期 要运行的命令 第1列分钟1～..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2022-05-26T11:39:36.000Z"}],["meta",{"property":"article:modified_time","content":"2022-05-26T11:39:36.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"linux定时任务\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2022-05-26T11:39:36.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"yzqdev\\",\\"url\\":\\"http://www.yzqdev.top\\"}]}"]]},"headers":[{"level":2,"title":"命令格式","slug":"命令格式","link":"#命令格式","children":[]},{"level":2,"title":"命令功能","slug":"命令功能","link":"#命令功能","children":[]},{"level":2,"title":"命令参数","slug":"命令参数","link":"#命令参数","children":[]},{"level":2,"title":"文件格式","slug":"文件格式","link":"#文件格式","children":[]},{"level":2,"title":"常用方法","slug":"常用方法","link":"#常用方法","children":[{"level":3,"title":"创建一个新的crontab文件","slug":"创建一个新的crontab文件","link":"#创建一个新的crontab文件","children":[]},{"level":3,"title":"列出crontab文件","slug":"列出crontab文件","link":"#列出crontab文件","children":[]},{"level":3,"title":"编辑crontab文件","slug":"编辑crontab文件","link":"#编辑crontab文件","children":[]},{"level":3,"title":"删除crontab文件","slug":"删除crontab文件","link":"#删除crontab文件","children":[]},{"level":3,"title":"恢复丢失的crontab文件","slug":"恢复丢失的crontab文件","link":"#恢复丢失的crontab文件","children":[]}]},{"level":2,"title":"使用实例","slug":"使用实例","link":"#使用实例","children":[{"level":3,"title":"实例1：每1分钟执行一次command","slug":"实例1-每1分钟执行一次command","link":"#实例1-每1分钟执行一次command","children":[]},{"level":3,"title":"实例2：每小时的第3和第15分钟执行","slug":"实例2-每小时的第3和第15分钟执行","link":"#实例2-每小时的第3和第15分钟执行","children":[]},{"level":3,"title":"实例3：在上午8点到11点的第3和第15分钟执行","slug":"实例3-在上午8点到11点的第3和第15分钟执行","link":"#实例3-在上午8点到11点的第3和第15分钟执行","children":[]},{"level":3,"title":"实例4：每隔两天的上午8点到11点的第3和第15分钟执行","slug":"实例4-每隔两天的上午8点到11点的第3和第15分钟执行","link":"#实例4-每隔两天的上午8点到11点的第3和第15分钟执行","children":[]},{"level":3,"title":"实例5：每个星期一的上午8点到11点的第3和第15分钟执行","slug":"实例5-每个星期一的上午8点到11点的第3和第15分钟执行","link":"#实例5-每个星期一的上午8点到11点的第3和第15分钟执行","children":[]},{"level":3,"title":"实例6：每晚的21:30重启smb","slug":"实例6-每晚的21-30重启smb","link":"#实例6-每晚的21-30重启smb","children":[]},{"level":3,"title":"实例7：每月1、10、22日的4 : 45重启smb","slug":"实例7-每月1、10、22日的4-45重启smb","link":"#实例7-每月1、10、22日的4-45重启smb","children":[]},{"level":3,"title":"实例8：每周六、周日的1 : 10重启smb","slug":"实例8-每周六、周日的1-10重启smb","link":"#实例8-每周六、周日的1-10重启smb","children":[]},{"level":3,"title":"实例9：每天18 : 00至23 : 00之间每隔30分钟重启smb","slug":"实例9-每天18-00至23-00之间每隔30分钟重启smb","link":"#实例9-每天18-00至23-00之间每隔30分钟重启smb","children":[]},{"level":3,"title":"实例10：每星期六的晚上11 : 00 pm重启smb","slug":"实例10-每星期六的晚上11-00-pm重启smb","link":"#实例10-每星期六的晚上11-00-pm重启smb","children":[]},{"level":3,"title":"实例11：每一小时重启smb","slug":"实例11-每一小时重启smb","link":"#实例11-每一小时重启smb","children":[]},{"level":3,"title":"实例12：晚上11点到早上7点之间，每隔一小时重启smb","slug":"实例12-晚上11点到早上7点之间-每隔一小时重启smb","link":"#实例12-晚上11点到早上7点之间-每隔一小时重启smb","children":[]},{"level":3,"title":"实例13：每月的4号与每周一到周三的11点重启smb","slug":"实例13-每月的4号与每周一到周三的11点重启smb","link":"#实例13-每月的4号与每周一到周三的11点重启smb","children":[]},{"level":3,"title":"实例14：一月一号的4点重启smb","slug":"实例14-一月一号的4点重启smb","link":"#实例14-一月一号的4点重启smb","children":[]},{"level":3,"title":"实例15：每小时执行/etc/cron.hourly目录内的脚本","slug":"实例15-每小时执行-etc-cron-hourly目录内的脚本","link":"#实例15-每小时执行-etc-cron-hourly目录内的脚本","children":[]}]},{"level":2,"title":"使用注意事项","slug":"使用注意事项","link":"#使用注意事项","children":[{"level":3,"title":"注意环境变量问题","slug":"注意环境变量问题","link":"#注意环境变量问题","children":[]},{"level":3,"title":"注意清理系统用户的邮件日志","slug":"注意清理系统用户的邮件日志","link":"#注意清理系统用户的邮件日志","children":[]},{"level":3,"title":"系统级任务调度与用户级任务调度","slug":"系统级任务调度与用户级任务调度","link":"#系统级任务调度与用户级任务调度","children":[]},{"level":3,"title":"其他注意事项","slug":"其他注意事项","link":"#其他注意事项","children":[]}]}],"git":{"createdTime":1653565176000,"updatedTime":1653565176000,"contributors":[{"name":"yzqdev","username":"yzqdev","email":"yzqdev@outlook.com","commits":1,"url":"https://github.com/yzqdev"}]},"readingTime":{"minutes":9.63,"words":2890},"filePathRelative":"linux-tutor/awesome-shell/cron.md","localizedDate":"2022年5月26日","autoDesc":true}');export{o as comp,i as data};
