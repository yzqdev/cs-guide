import{_ as s,c as a,a as p,o as t}from"./app-C8DxhDIZ.js";const e={};function o(c,n){return t(),a("div",null,n[0]||(n[0]=[p(`<h1 id="常用代码片段" tabindex="-1"><a class="header-anchor" href="#常用代码片段"><span>常用代码片段</span></a></h1><h2 id="_1-字符串反转" tabindex="-1"><a class="header-anchor" href="#_1-字符串反转"><span>1.字符串反转</span></a></h2><p>在此示例中，我们使用展开运算符，Array的<code>reverse</code>方法和 String 的<code>join</code>方法来反转给定的字符串。</p><div class="language-javascript" data-highlighter="prismjs" data-ext="js" data-title="js"><pre><code><span class="line"><span class="token keyword">const</span> <span class="token function-variable function">reverseString</span> <span class="token operator">=</span> <span class="token parameter">string</span> <span class="token operator">=&gt;</span> <span class="token punctuation">[</span><span class="token operator">...</span>string<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">reverse</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span><span class="token string">&#39;&#39;</span><span class="token punctuation">)</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">// 事例</span></span>
<span class="line"><span class="token function">reverseString</span><span class="token punctuation">(</span><span class="token string">&#39;Medium&#39;</span><span class="token punctuation">)</span> <span class="token comment">// &quot;muideM&quot;</span></span>
<span class="line"><span class="token function">reverseString</span><span class="token punctuation">(</span><span class="token string">&#39;Better Programming&#39;</span><span class="token punctuation">)</span> <span class="token comment">// &quot;gnimmargorP retteB&quot;</span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"></span></code></pre></div><h2 id="_2-计算指定数字的阶乘" tabindex="-1"><a class="header-anchor" href="#_2-计算指定数字的阶乘"><span>2.计算指定数字的阶乘</span></a></h2><div class="language-bash" data-highlighter="prismjs" data-ext="sh" data-title="sh"><pre><code><span class="line">const factorialOfNumber <span class="token operator">=</span> number <span class="token operator">=</span><span class="token operator">&gt;</span> </span>
<span class="line">  number <span class="token operator">&lt;</span> <span class="token number">0</span></span>
<span class="line">    ? <span class="token punctuation">((</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">&gt;</span> <span class="token punctuation">{</span></span>
<span class="line">      throw new TypeError<span class="token punctuation">(</span><span class="token string">&#39;请输入正整数&#39;</span><span class="token punctuation">)</span></span>
<span class="line">    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line">    <span class="token builtin class-name">:</span> number <span class="token operator">&lt;=</span> <span class="token number">1</span></span>
<span class="line">      ? <span class="token number">1</span></span>
<span class="line">      <span class="token builtin class-name">:</span> number * factorialOfNumber<span class="token punctuation">(</span>number - <span class="token number">1</span><span class="token punctuation">)</span></span>
<span class="line">      </span>
<span class="line">      </span>
<span class="line">// 事例</span>
<span class="line">factorialOfNumber<span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span> // <span class="token number">24</span></span>
<span class="line">factorialOfNumber<span class="token punctuation">(</span><span class="token number">8</span><span class="token punctuation">)</span> // <span class="token number">40320</span></span>
<span class="line"></span>
<span class="line"></span></code></pre></div><h2 id="_3-将数字转换为数字数组" tabindex="-1"><a class="header-anchor" href="#_3-将数字转换为数字数组"><span>3.将数字转换为数字数组</span></a></h2><div class="language-javascript" data-highlighter="prismjs" data-ext="js" data-title="js"><pre><code><span class="line"><span class="token keyword">const</span> <span class="token function-variable function">converToArray</span> <span class="token operator">=</span> <span class="token parameter">number</span> <span class="token operator">=&gt;</span> <span class="token punctuation">[</span><span class="token operator">...</span><span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>number<span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token parameter">el</span> <span class="token operator">=&gt;</span> <span class="token function">parseInt</span><span class="token punctuation">(</span>el<span class="token punctuation">)</span><span class="token punctuation">)</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">// 事例</span></span>
<span class="line"><span class="token function">converToArray</span><span class="token punctuation">(</span><span class="token number">5678</span><span class="token punctuation">)</span> <span class="token comment">// [5, 6, 7, 8]</span></span>
<span class="line"><span class="token function">converToArray</span><span class="token punctuation">(</span><span class="token number">12345678</span><span class="token punctuation">)</span> <span class="token comment">// [1, 2, 3, 4, 5, 6, 7, 8]</span></span>
<span class="line"></span>
<span class="line"></span></code></pre></div><h2 id="_4-检查数字是否为2的幂" tabindex="-1"><a class="header-anchor" href="#_4-检查数字是否为2的幂"><span>4.检查数字是否为2的幂</span></a></h2><div class="language-text" data-highlighter="prismjs" data-ext="text" data-title="text"><pre><code><span class="line">const isNumberPowerOfTwo = number =&gt; !!number &amp;&amp; (number &amp; (number - 1)) == 0</span>
<span class="line"></span>
<span class="line">// 事例</span>
<span class="line">isNumberPowerOfTwo(100) // false</span>
<span class="line">isNumberPowerOfTwo(128) // true</span>
<span class="line"></span>
<span class="line"></span></code></pre></div><h2 id="_5-从对象创建键-值对数组" tabindex="-1"><a class="header-anchor" href="#_5-从对象创建键-值对数组"><span>5.从对象创建<code>键-值</code>对数组</span></a></h2><div class="language-text" data-highlighter="prismjs" data-ext="text" data-title="text"><pre><code><span class="line">const keyValuePairsToArray = object =&gt; Object.keys(object)</span>
<span class="line">  .map(el =&gt; [el, object[el]])</span>
<span class="line"></span>
<span class="line">// 事例</span>
<span class="line">keyValuePairsToArray({Better: 4, Programming: 2})</span>
<span class="line">// [[&#39;Better&#39;, 4], [&#39;Programming&#39;, 2]]</span>
<span class="line"></span>
<span class="line">keyValuePairsToArray({x:1, y:2, z:3})</span>
<span class="line">// [[&#39;x&#39;, 1], [&#39;y&#39;, 2], [&#39;z&#39;, 3]]</span>
<span class="line"></span>
<span class="line"></span></code></pre></div><h2 id="_6-返回数字数组中的最大值" tabindex="-1"><a class="header-anchor" href="#_6-返回数字数组中的最大值"><span>6.返回数字数组中的最大值</span></a></h2><div class="language-javascript" data-highlighter="prismjs" data-ext="js" data-title="js"><pre><code><span class="line"><span class="token keyword">const</span> <span class="token function-variable function">maxElementsFromArray</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">array<span class="token punctuation">,</span> number <span class="token operator">=</span> <span class="token number">1</span></span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">[</span><span class="token operator">...</span>array<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">sort</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">x<span class="token punctuation">,</span> y</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> y <span class="token operator">-</span>x<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">slice</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> number<span class="token punctuation">)</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">// 事例</span></span>
<span class="line"><span class="token function">maxElementsFromArray</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token comment">// [5]</span></span>
<span class="line"></span>
<span class="line"><span class="token function">maxElementsFromArray</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">7</span><span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">,</span> <span class="token number">9</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span> <span class="token comment">// [10, 10]</span></span>
<span class="line"></span>
<span class="line"></span></code></pre></div><h2 id="_7-检查数组中的所有元素是否相等" tabindex="-1"><a class="header-anchor" href="#_7-检查数组中的所有元素是否相等"><span>7. 检查数组中的所有元素是否相等</span></a></h2><div class="language-javascript" data-highlighter="prismjs" data-ext="js" data-title="js"><pre><code><span class="line"><span class="token keyword">const</span> <span class="token function-variable function">elementsAreEqual</span> <span class="token operator">=</span> <span class="token parameter">array</span> <span class="token operator">=&gt;</span> array<span class="token punctuation">.</span><span class="token function">every</span><span class="token punctuation">(</span><span class="token parameter">el</span> <span class="token operator">=&gt;</span> el <span class="token operator">===</span> array<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">// 事例</span></span>
<span class="line"><span class="token function">elementsAreEqual</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">9</span><span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token comment">// false</span></span>
<span class="line"><span class="token function">elementsAreEqual</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token comment">// true</span></span>
<span class="line"></span>
<span class="line"></span></code></pre></div><h2 id="_8-返回数的平均值" tabindex="-1"><a class="header-anchor" href="#_8-返回数的平均值"><span>8. 返回数的平均值</span></a></h2><div class="language-javascript" data-highlighter="prismjs" data-ext="js" data-title="js"><pre><code><span class="line"><span class="token keyword">const</span> <span class="token function-variable function">averageOfTwoNumbers</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter"><span class="token operator">...</span>numbers</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> numbers<span class="token punctuation">.</span><span class="token function">reduce</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">accumulator<span class="token punctuation">,</span> currentValue</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> accumulator <span class="token operator">+</span> currentValue<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token operator">/</span> numbers<span class="token punctuation">.</span>length</span>
<span class="line"></span>
<span class="line"><span class="token comment">// 事例</span></span>
<span class="line"><span class="token function">averageOfTwoNumbers</span><span class="token punctuation">(</span><span class="token operator">...</span><span class="token punctuation">[</span><span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token comment">// 7</span></span>
<span class="line"><span class="token function">averageOfTwoNumbers</span><span class="token punctuation">(</span><span class="token operator">...</span><span class="token punctuation">[</span><span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">,</span> <span class="token number">9</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token comment">// 7.5</span></span>
<span class="line"></span>
<span class="line"></span></code></pre></div><h2 id="_9-返回两个或多个数字的和" tabindex="-1"><a class="header-anchor" href="#_9-返回两个或多个数字的和"><span>9.返回两个或多个数字的和</span></a></h2><div class="language-javascript" data-highlighter="prismjs" data-ext="js" data-title="js"><pre><code><span class="line"><span class="token keyword">const</span> <span class="token function-variable function">sumOfNumbers</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter"><span class="token operator">...</span>array</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">[</span><span class="token operator">...</span>array<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">reduce</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">accumulator<span class="token punctuation">,</span> currentValue</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> accumulator <span class="token operator">+</span> currentValue<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">// 事例</span></span>
<span class="line"><span class="token function">sumOfNumbers</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">,</span> <span class="token number">9</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">)</span> <span class="token comment">// 45</span></span>
<span class="line"><span class="token function">sumOfNumbers</span><span class="token punctuation">(</span><span class="token operator">...</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">,</span> <span class="token number">9</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token comment">// 50</span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"></span></code></pre></div><h2 id="_10-返回数字数组的幂集" tabindex="-1"><a class="header-anchor" href="#_10-返回数字数组的幂集"><span>10.返回数字数组的幂集</span></a></h2><p>所谓幂集（Power Set）， 就是原集合中所有的子集（包括全集和空集）构成的集族。可数集是最小的无限集； 它的幂集和实数集一一对应（也称同势），是不可数集。 不是所有不可数集都和实数集等势，集合的势可以无限的大。如实数集的幂集也是不可数集，但它的势比实数集大。 设X是一个有限集，|X| = k，则X的幂集的势为2的k次方。</p><div class="language-javascript" data-highlighter="prismjs" data-ext="js" data-title="js"><pre><code><span class="line"><span class="token keyword">const</span> <span class="token function-variable function">powersetOfArray</span> <span class="token operator">=</span> <span class="token parameter">array</span> <span class="token operator">=&gt;</span> array<span class="token punctuation">.</span><span class="token function">reduce</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">accumulator<span class="token punctuation">,</span> currentValue</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> accumulator<span class="token punctuation">.</span><span class="token function">concat</span><span class="token punctuation">(</span>accumulator<span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token parameter">el</span> <span class="token operator">=&gt;</span> <span class="token punctuation">[</span>currentValue<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">concat</span><span class="token punctuation">(</span>el<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">)</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">// 事例</span></span>
<span class="line"><span class="token function">powersetOfArray</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token comment">// [[], [4], [2], [2, 4]]</span></span>
<span class="line"><span class="token function">powersetOfArray</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">)</span></span>
<span class="line"><span class="token comment">// [[], [1], [2], [2,1], [3], [3,1], [3,2], [3,2,1]]</span></span>
<span class="line"></span>
<span class="line"></span></code></pre></div><hr>`,24)]))}const u=s(e,[["render",o]]),i=JSON.parse('{"path":"/cs-tips/frontend/snippets/snippets2.html","title":"常用代码片段","lang":"zh-CN","frontmatter":{"description":"常用代码片段 1.字符串反转 在此示例中，我们使用展开运算符，Array的reverse方法和 String 的join方法来反转给定的字符串。 2.计算指定数字的阶乘 3.将数字转换为数字数组 4.检查数字是否为2的幂 5.从对象创建键-值对数组 6.返回数字数组中的最大值 7. 检查数组中的所有元素是否相等 8. 返回数的平均值 9.返回两个或多个...","head":[["meta",{"property":"og:url","content":"https://yzqdev.github.io/cs-guide/cs-guide/cs-tips/frontend/snippets/snippets2.html"}],["meta",{"property":"og:site_name","content":"cs-guide"}],["meta",{"property":"og:title","content":"常用代码片段"}],["meta",{"property":"og:description","content":"常用代码片段 1.字符串反转 在此示例中，我们使用展开运算符，Array的reverse方法和 String 的join方法来反转给定的字符串。 2.计算指定数字的阶乘 3.将数字转换为数字数组 4.检查数字是否为2的幂 5.从对象创建键-值对数组 6.返回数字数组中的最大值 7. 检查数组中的所有元素是否相等 8. 返回数的平均值 9.返回两个或多个..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2023-05-25T04:34:06.000Z"}],["meta",{"property":"article:modified_time","content":"2023-05-25T04:34:06.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"常用代码片段\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2023-05-25T04:34:06.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"yzqdev\\",\\"url\\":\\"http://www.yzqdev.top\\"}]}"]]},"headers":[{"level":2,"title":"1.字符串反转","slug":"_1-字符串反转","link":"#_1-字符串反转","children":[]},{"level":2,"title":"2.计算指定数字的阶乘","slug":"_2-计算指定数字的阶乘","link":"#_2-计算指定数字的阶乘","children":[]},{"level":2,"title":"3.将数字转换为数字数组","slug":"_3-将数字转换为数字数组","link":"#_3-将数字转换为数字数组","children":[]},{"level":2,"title":"4.检查数字是否为2的幂","slug":"_4-检查数字是否为2的幂","link":"#_4-检查数字是否为2的幂","children":[]},{"level":2,"title":"5.从对象创建键-值对数组","slug":"_5-从对象创建键-值对数组","link":"#_5-从对象创建键-值对数组","children":[]},{"level":2,"title":"6.返回数字数组中的最大值","slug":"_6-返回数字数组中的最大值","link":"#_6-返回数字数组中的最大值","children":[]},{"level":2,"title":"7. 检查数组中的所有元素是否相等","slug":"_7-检查数组中的所有元素是否相等","link":"#_7-检查数组中的所有元素是否相等","children":[]},{"level":2,"title":"8. 返回数的平均值","slug":"_8-返回数的平均值","link":"#_8-返回数的平均值","children":[]},{"level":2,"title":"9.返回两个或多个数字的和","slug":"_9-返回两个或多个数字的和","link":"#_9-返回两个或多个数字的和","children":[]},{"level":2,"title":"10.返回数字数组的幂集","slug":"_10-返回数字数组的幂集","link":"#_10-返回数字数组的幂集","children":[]}],"git":{"createdTime":1684989246000,"updatedTime":1684989246000,"contributors":[{"name":"yzqdev","username":"yzqdev","email":"yzqdev@outlook.com","commits":1,"url":"https://github.com/yzqdev"}]},"readingTime":{"minutes":1.96,"words":589},"filePathRelative":"cs-tips/frontend/snippets/snippets2.md","localizedDate":"2023年5月25日","autoDesc":true}');export{u as comp,i as data};
