import{_ as a,c as n,a as e,o as t}from"./app-C8DxhDIZ.js";const l={};function p(o,s){return t(),n("div",null,s[0]||(s[0]=[e(`<h1 id="字符串" tabindex="-1"><a class="header-anchor" href="#字符串"><span>字符串</span></a></h1><p>​</p><p>PowerShell字符串是具有<code>System.String</code>类型的对象。它是一种表示字符序列的数据类型，可以是文字常量或某种变量。</p><p>可以在PowerShell中使用单引号或双引号来定义字符串。这两个字符串都是使用相同的<code>System.String</code>对象类型创建的。</p><h2 id="_1-示例" tabindex="-1"><a class="header-anchor" href="#_1-示例"><span>1.示例</span></a></h2><p>**示例1：**此示例描述如何在字符串中使用单引号：</p><div class="language-powershell" data-highlighter="prismjs" data-ext="powershell" data-title="powershell"><pre><code><span class="line"><span class="token function">PS</span> C:\\&gt;<span class="token variable">$String1</span>=<span class="token string">&#39;It is a Single Quoted String&#39;</span>  </span>
<span class="line"><span class="token function">PS</span> C:\\&gt;<span class="token variable">$String1</span>  </span>
<span class="line">It is a Single Quoted String</span>
<span class="line">Shell</span>
<span class="line"></span></code></pre></div><p>**示例2：**此示例描述如何在字符串中使用双引号：</p><div class="language-powershell" data-highlighter="prismjs" data-ext="powershell" data-title="powershell"><pre><code><span class="line"><span class="token function">PS</span> C:\\&gt; <span class="token variable">$String2</span>=<span class="token string">&quot;It is a double Quoted String&quot;</span>  </span>
<span class="line"><span class="token function">PS</span> C:\\&gt; <span class="token variable">$String2</span>  </span>
<span class="line">It is a double Quoted String</span>
<span class="line">Shell</span>
<span class="line"></span></code></pre></div><h2 id="_2-串联" tabindex="-1"><a class="header-anchor" href="#_2-串联"><span>2.串联</span></a></h2><p>字符串的连接使用加号执行。</p><p><strong>示例1：</strong> 下面的示例描述如何连接两个字符串变量：</p><div class="language-powershell" data-highlighter="prismjs" data-ext="powershell" data-title="powershell"><pre><code><span class="line"><span class="token function">PS</span> C:\\&gt; <span class="token variable">$s1</span>=<span class="token string">&quot;XN&quot;</span>  </span>
<span class="line"><span class="token function">PS</span> C:\\&gt; <span class="token variable">$s2</span>=<span class="token string">&quot;TUTOR&quot;</span>  </span>
<span class="line"><span class="token function">PS</span> C:\\&gt; <span class="token variable">$s1</span><span class="token operator">+</span><span class="token variable">$s2</span></span>
<span class="line">Shell</span>
<span class="line"></span></code></pre></div><p>上例中最后一条命令的输出将显示为：<code>XNTUTOR</code></p><p>**示例2：**也可以使用join运算符来连接字符串。下面的示例描述如何使用此运算符：</p><div class="language-powershell" data-highlighter="prismjs" data-ext="powershell" data-title="powershell"><pre><code><span class="line"><span class="token function">PS</span> C:\\&gt; <span class="token variable">$s1</span><span class="token punctuation">,</span><span class="token variable">$s2</span> <span class="token operator">-join</span> <span class="token string">&quot;.COM&quot;</span></span>
<span class="line">Shell</span>
<span class="line"></span></code></pre></div><p>本示例的输出将显示为：<code>XN.COMTUTOR</code></p><p>**示例3：**也可以使用方法<code>concat()</code>来连接字符串。下面的示例描述如何使用此方法：</p><div class="language-powershell" data-highlighter="prismjs" data-ext="powershell" data-title="powershell"><pre><code><span class="line"><span class="token variable">$s1</span>=<span class="token string">&quot;Power&quot;</span>  </span>
<span class="line"><span class="token function">PS</span> C:\\&gt; <span class="token variable">$s2</span>=<span class="token string">&quot;Shell&quot;</span>  </span>
<span class="line"><span class="token function">PS</span> C:\\&gt; <span class="token namespace">[System.String]</span>::Concat<span class="token punctuation">(</span><span class="token variable">$s1</span><span class="token punctuation">,</span><span class="token variable">$s2</span><span class="token punctuation">)</span></span>
<span class="line">Shell</span>
<span class="line"></span></code></pre></div><p>此示例的输出也将显示为：<code>PowerShell</code></p><h2 id="_3-子串" tabindex="-1"><a class="header-anchor" href="#_3-子串"><span>3.子串</span></a></h2><p><code>SubString</code>是一种方法，它接受两个重载参数并返回较长字符串的一部分。 这两个参数都是数值，并用逗号(<code>,</code>)分隔。第一参数是开始值，第二个表示想从开始位置向往右的字符数量。</p><p>**示例：**下面的示例跳过前三个字符，并从给定的字符串返回下一个七个字符。</p><div class="language-powershell" data-highlighter="prismjs" data-ext="powershell" data-title="powershell"><pre><code><span class="line"><span class="token function">PS</span> C:\\&gt; <span class="token variable">$s1</span>=<span class="token string">&quot;Windows PowerShell&quot;</span>  </span>
<span class="line"><span class="token function">PS</span> C:\\&gt; <span class="token variable">$s1</span><span class="token punctuation">.</span>SubString<span class="token punctuation">(</span>3<span class="token punctuation">,</span>7<span class="token punctuation">)</span></span>
<span class="line">Shell</span>
<span class="line"></span></code></pre></div><p>上面示例中的第二个命令显示以下输出：</p><div class="language-powershell" data-highlighter="prismjs" data-ext="powershell" data-title="powershell"><pre><code><span class="line">dows Po</span>
<span class="line">Shell</span>
<span class="line"></span></code></pre></div><h2 id="_4-字符串格式" tabindex="-1"><a class="header-anchor" href="#_4-字符串格式"><span>4.字符串格式</span></a></h2><p>字符串格式化是在字符串中插入一些字符或字符串的过程。 我们可以使用<code>-f</code>运算符来格式化字符串。</p><div class="language-powershell" data-highlighter="prismjs" data-ext="powershell" data-title="powershell"><pre><code><span class="line"><span class="token variable">$s1</span>=<span class="token string">&quot;Windows PowerShell&quot;</span>  </span>
<span class="line"><span class="token variable">$s2</span>=<span class="token string">&quot;XNTUTOR&quot;</span>  </span>
<span class="line"><span class="token variable">$formattedString</span> = <span class="token string">&quot;{0} {1}....&quot;</span> <span class="token operator">-</span>f <span class="token variable">$s1</span><span class="token punctuation">,</span><span class="token variable">$s2</span>  </span>
<span class="line"><span class="token variable">$formattedString</span></span>
<span class="line">Shell</span>
<span class="line"></span></code></pre></div><p>执行上面示例代码，得到以下结果：</p><div class="language-powershell" data-highlighter="prismjs" data-ext="powershell" data-title="powershell"><pre><code><span class="line">Windows PowerShell XNTUTOR<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span></span>
<span class="line">Shell</span>
<span class="line"></span></code></pre></div><h2 id="_5-字符替换" tabindex="-1"><a class="header-anchor" href="#_5-字符替换"><span>5.字符替换</span></a></h2><p><code>replace()</code>方法接受两个参数，并用于替换字符串中的字符。 **示例：**在下面的示例中，我们将给定字符串中的字符<code>P</code>替换为<code>S</code>。</p><div class="language-powershell" data-highlighter="prismjs" data-ext="powershell" data-title="powershell"><pre><code><span class="line"><span class="token function">PS</span> C:\\&gt; <span class="token variable">$s1</span>=<span class="token string">&quot;Windows Powerxhell&quot;</span>  </span>
<span class="line"><span class="token function">PS</span> C:\\&gt; <span class="token variable">$s1</span><span class="token punctuation">.</span>replace<span class="token punctuation">(</span><span class="token string">&quot;P&quot;</span><span class="token punctuation">,</span><span class="token string">&quot;S&quot;</span><span class="token punctuation">)</span></span>
<span class="line">Shell</span>
<span class="line"></span></code></pre></div><p>上面示例中的第二个命令显示以下输出：</p><div class="language-powershell" data-highlighter="prismjs" data-ext="powershell" data-title="powershell"><pre><code><span class="line">indows Sowerxhell</span>
<span class="line"></span></code></pre></div>`,36)]))}const c=a(l,[["render",p]]),r=JSON.parse('{"path":"/windows-tutor/powershell/basics/string.html","title":"字符串","lang":"zh-CN","frontmatter":{"description":"字符串 ​ PowerShell字符串是具有System.String类型的对象。它是一种表示字符序列的数据类型，可以是文字常量或某种变量。 可以在PowerShell中使用单引号或双引号来定义字符串。这两个字符串都是使用相同的System.String对象类型创建的。 1.示例 **示例1：**此示例描述如何在字符串中使用单引号： **示例2：**此...","head":[["meta",{"property":"og:url","content":"https://yzqdev.github.io/cs-guide/cs-guide/windows-tutor/powershell/basics/string.html"}],["meta",{"property":"og:site_name","content":"cs-guide"}],["meta",{"property":"og:title","content":"字符串"}],["meta",{"property":"og:description","content":"字符串 ​ PowerShell字符串是具有System.String类型的对象。它是一种表示字符序列的数据类型，可以是文字常量或某种变量。 可以在PowerShell中使用单引号或双引号来定义字符串。这两个字符串都是使用相同的System.String对象类型创建的。 1.示例 **示例1：**此示例描述如何在字符串中使用单引号： **示例2：**此..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2022-07-31T13:53:29.000Z"}],["meta",{"property":"article:modified_time","content":"2022-07-31T13:53:29.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"字符串\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2022-07-31T13:53:29.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"yzqdev\\",\\"url\\":\\"http://www.yzqdev.top\\"}]}"]]},"headers":[{"level":2,"title":"1.示例","slug":"_1-示例","link":"#_1-示例","children":[]},{"level":2,"title":"2.串联","slug":"_2-串联","link":"#_2-串联","children":[]},{"level":2,"title":"3.子串","slug":"_3-子串","link":"#_3-子串","children":[]},{"level":2,"title":"4.字符串格式","slug":"_4-字符串格式","link":"#_4-字符串格式","children":[]},{"level":2,"title":"5.字符替换","slug":"_5-字符替换","link":"#_5-字符替换","children":[]}],"git":{"createdTime":1652240878000,"updatedTime":1659275609000,"contributors":[{"name":"yzqdev","username":"yzqdev","email":"yzqdev@outlook.com","commits":2,"url":"https://github.com/yzqdev"}]},"readingTime":{"minutes":2.15,"words":645},"filePathRelative":"windows-tutor/powershell/basics/string.md","localizedDate":"2022年5月11日","autoDesc":true}');export{c as comp,r as data};
